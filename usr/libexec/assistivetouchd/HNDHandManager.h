//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class AXDispatchTimer, AXDragManager, AXElement, AXElementFetcher, AXElementGroup, AXNamedReplayableGesture, AXPIFingerModel, AXPISystemPointerLargeAppearance, AXPISystemPointerPreciseAppearance, AXUISoftwareKeyboardManager, AXUpdateElementVisualsCoalescer, HNDBubblePointerAppearance, HNDContinuousScroller, HNDDeviceManager, HNDDisplayManager, HNDDwellPointerAppearance, HNDEventManager, HNDMousePointerAppearance, HNDRockerButton, HNDSystemPointerController, MISSING_TYPE, NSArray, NSDate, NSMutableArray, NSMutableDictionary, NSNumber, NSPointerArray, NSString;
@protocol BSInvalidatable, OS_dispatch_queue;

@interface HNDHandManager : NSObject
{
    int _orientation;	// 8 = 0x8
    _Bool _primaryButtonDown;	// 12 = 0xc
    _Bool _inBrokenHomeButtonMode;	// 13 = 0xd
    _Bool _isRecording;	// 14 = 0xe
    _Bool _finishedRecording;	// 15 = 0xf
    unsigned long long _visualsHiddenForScreenshotCount;	// 16 = 0x10
    _Bool _isFingerDown;	// 24 = 0x18
    double _touchSpeed;	// 32 = 0x20
    _Bool _openMenuWithSwaggle;	// 40 = 0x28
    NSArray *_customGestures;	// 48 = 0x30
    AXNamedReplayableGesture *_currentCustomGesture;	// 56 = 0x38
    struct CGPoint _orbGestureLocation;	// 64 = 0x40
    int _preparedScrollAction;	// 80 = 0x50
    AXUISoftwareKeyboardManager *_softwareKeyboardManager;	// 88 = 0x58
    HNDMousePointerAppearance *_mousePointerAppearance;	// 96 = 0x60
    HNDDwellPointerAppearance *_dwellPointerAppearance;	// 104 = 0x68
    AXPISystemPointerPreciseAppearance *_systemPointerPreciseAppearance;	// 112 = 0x70
    AXPISystemPointerLargeAppearance *_systemPointerLargeAppearance;	// 120 = 0x78
    AXDispatchTimer *_systemPointerSettingsChangedDebouncer;	// 128 = 0x80
    HNDBubblePointerAppearance *_systemBubblePointerAppearance;	// 136 = 0x88
    AXDispatchTimer *_dwellTimer;	// 144 = 0x90
    struct CGPoint _lastDwellStartPoint;	// 152 = 0x98
    unsigned long long _dwellMode;	// 168 = 0xa8
    AXDispatchTimer *_fingerFadeTimer;	// 176 = 0xb0
    _Bool _fingersFaded;	// 184 = 0xb8
    _Bool _inMultiFingerGesture;	// 185 = 0xb9
    _Bool _resettingPinch;	// 186 = 0xba
    unsigned long long _pinchMode;	// 192 = 0xc0
    unsigned long long _pinchState;	// 200 = 0xc8
    struct CGPoint _pinchRotatePreviousPoint;	// 208 = 0xd0
    _Bool _hotCornerLocked;	// 224 = 0xe0
    _Bool _hoverNubbitLocked;	// 225 = 0xe1
    struct CGPoint _dragStartPoint;	// 232 = 0xe8
    _Bool _inDragMode;	// 248 = 0xf8
    _Bool _isDragNubbitMode;	// 249 = 0xf9
    _Bool _isPerformingDragPressEvent;	// 250 = 0xfa
    AXPIFingerModel *_realSelectedPinchFinger;	// 256 = 0x100
    _Bool _areFingersPressedDown;	// 264 = 0x108
    struct CGPoint _pressedPinchFingerStartPoint;	// 272 = 0x110
    struct CGPoint _pressedPinchFingerFulcrum;	// 288 = 0x120
    double _pressedPinchFingerMovementFromStart;	// 304 = 0x130
    NSMutableDictionary *_avPlayers;	// 312 = 0x138
    _Bool _inCustomGestureMovement;	// 320 = 0x140
    AXDispatchTimer *_orientationUpdateTimer;	// 328 = 0x148
    double _lastOrbValue;	// 336 = 0x150
    _Bool _shouldSkipElementFetchForAXScroll;	// 344 = 0x158
    id <BSInvalidatable> _suppressVisualsAssertion;	// 352 = 0x160
    _Bool _alwaysShowMenu;	// 360 = 0x168
    _Bool _voiceControl;	// 361 = 0x169
    _Bool _inBubbleMode;	// 362 = 0x16a
    _Bool _mouseBehavesLikeFinger;	// 363 = 0x16b
    _Bool _assistiveTouchMouseDwellControlEnabled;	// 364 = 0x16c
    _Bool _isPendingFingerLiftForPrimaryButtonPressUp;	// 365 = 0x16d
    _Bool _isActivelyScrollingContinuously;	// 366 = 0x16e
    _Bool _scrollingBlockedOnElementRefresh;	// 367 = 0x16f
    _Bool _isDwellActionPendingButtonUp;	// 368 = 0x170
    _Bool _bubbleModeCurrentlyFocusedOnNubbit;	// 369 = 0x171
    _Bool;	// 370 = 0x172
    _Bool _bubbleModeBlockedOnElementRefresh;	// 371 = 0x173
    _Bool _currentlySelectingKeyboardKey;	// 372 = 0x174
    struct os_unfair_lock_s _continuousScrollLock;	// 376 = 0x178
    NSPointerArray *_eventHandlers;	// 384 = 0x180
    HNDEventManager *_eventManager;	// 392 = 0x188
    HNDDeviceManager *_deviceManager;	// 400 = 0x190
    NSMutableArray *_displayManagers;	// 408 = 0x198
    NSArray *_horizontalContinuousScrollers;	// 416 = 0x1a0
    NSArray *_verticalContinuousScrollers;	// 424 = 0x1a8
    AXDragManager *_dragManager;	// 432 = 0x1b0
    HNDSystemPointerController *_systemPointerController;	// 440 = 0x1b8
    NSDate *_previousPrimaryButtonPressDownDate;	// 448 = 0x1c0
    unsigned long long _continuousScrollMode;	// 456 = 0x1c8
    NSNumber *_currentContinuousScrollDirection;	// 464 = 0x1d0
    unsigned long long _lastTimeElementFetcherRefreshed;	// 472 = 0x1d8
    NSObject<OS_dispatch_queue> *_continuousScrollerGenerationQueue;	// 480 = 0x1e0
    AXElement *_continuousScrollPickedElement;	// 488 = 0x1e8
    double _continuousScrollCurrentSpeedFactor;	// 496 = 0x1f0
    HNDContinuousScroller *_activeContinuousScroller;	// 504 = 0x1f8
    AXElementFetcher *_elementFetcher;	// 512 = 0x200
    AXUpdateElementVisualsCoalescer *_updateElementVisualsCoalescer;	// 520 = 0x208
    NSMutableDictionary *_bubbleModeFrameToElementMapping;	// 528 = 0x210
    AXElement *_currentBubbleModeFocusedElement;	// 536 = 0x218
    AXElement *_lastBubbleModeDwellElement;	// 544 = 0x220
    AXElement *_lastBubbleModeFocusedElement;	// 552 = 0x228
    AXDispatchTimer *_dwellBubbleModeTimer;	// 560 = 0x230
    HNDRockerButton *_bubbleModeFocusedRockerItem;	// 568 = 0x238
    HNDRockerButton *_lastBubbleModeDwellRockerItem;	// 576 = 0x240
    unsigned long long _lastTimeHitTestedForBubbleMode;	// 584 = 0x248
    AXElementGroup *_currentlySelectedKeyboardRow;	// 592 = 0x250
}

+ (id)_actionForHotCorner:(unsigned long long)arg1;	// IMP=0x0020000000030949
+ (struct CGPoint)_pointByAvoidingDisplayCornerRadius:(double)arg1 forPoint:(struct CGPoint)arg2;	// IMP=0x001000000002e5ba
+ (double)_displayCornerRadius;	// IMP=0x001000000002e4db
+ (id)sharedManager;	// IMP=0x001000000001f4d8
- (void).cxx_destruct;	// IMP=0x0020000000037a0c
@property(nonatomic, getter=isCurrentlySelectingKeyboardKey) _Bool currentlySelectingKeyboardKey; // @synthesize currentlySelectingKeyboardKey=_currentlySelectingKeyboardKey;
@property(retain, nonatomic) AXElementGroup *currentlySelectedKeyboardRow; // @synthesize currentlySelectedKeyboardRow=_currentlySelectedKeyboardRow;
@property(nonatomic) _Bool bubbleModeBlockedOnElementRefresh; // @synthesize bubbleModeBlockedOnElementRefresh=_bubbleModeBlockedOnElementRefresh;
@property(nonatomic) unsigned long long lastTimeHitTestedForBubbleMode; // @synthesize lastTimeHitTestedForBubbleMode=_lastTimeHitTestedForBubbleMode;
@property(nonatomic) _Bool lastBubbleModeDwellWasOnNubbit; // @synthesize lastBubbleModeDwellWasOnNubbit=_lastBubbleModeDwellWasOnNubbit;
@property(retain, nonatomic) HNDRockerButton *lastBubbleModeDwellRockerItem; // @synthesize lastBubbleModeDwellRockerItem=_lastBubbleModeDwellRockerItem;
@property(retain, nonatomic) HNDRockerButton *bubbleModeFocusedRockerItem; // @synthesize bubbleModeFocusedRockerItem=_bubbleModeFocusedRockerItem;
@property(retain, nonatomic) AXDispatchTimer *dwellBubbleModeTimer; // @synthesize dwellBubbleModeTimer=_dwellBubbleModeTimer;
@property(retain, nonatomic) AXElement *lastBubbleModeFocusedElement; // @synthesize lastBubbleModeFocusedElement=_lastBubbleModeFocusedElement;
@property(retain, nonatomic) AXElement *lastBubbleModeDwellElement; // @synthesize lastBubbleModeDwellElement=_lastBubbleModeDwellElement;
@property(nonatomic) _Bool bubbleModeCurrentlyFocusedOnNubbit; // @synthesize bubbleModeCurrentlyFocusedOnNubbit=_bubbleModeCurrentlyFocusedOnNubbit;
@property(retain, nonatomic) AXElement *currentBubbleModeFocusedElement; // @synthesize currentBubbleModeFocusedElement=_currentBubbleModeFocusedElement;
@property(retain, nonatomic) NSMutableDictionary *bubbleModeFrameToElementMapping; // @synthesize bubbleModeFrameToElementMapping=_bubbleModeFrameToElementMapping;
@property(nonatomic) _Bool isDwellActionPendingButtonUp; // @synthesize isDwellActionPendingButtonUp=_isDwellActionPendingButtonUp;
@property(retain, nonatomic) AXUpdateElementVisualsCoalescer *updateElementVisualsCoalescer; // @synthesize updateElementVisualsCoalescer=_updateElementVisualsCoalescer;
@property(retain, nonatomic) AXElementFetcher *elementFetcher; // @synthesize elementFetcher=_elementFetcher;
@property(retain, nonatomic) HNDContinuousScroller *activeContinuousScroller; // @synthesize activeContinuousScroller=_activeContinuousScroller;
@property(nonatomic) double continuousScrollCurrentSpeedFactor; // @synthesize continuousScrollCurrentSpeedFactor=_continuousScrollCurrentSpeedFactor;
@property(retain, nonatomic) AXElement *continuousScrollPickedElement; // @synthesize continuousScrollPickedElement=_continuousScrollPickedElement;
@property(nonatomic) struct os_unfair_lock_s continuousScrollLock; // @synthesize continuousScrollLock=_continuousScrollLock;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *continuousScrollerGenerationQueue; // @synthesize continuousScrollerGenerationQueue=_continuousScrollerGenerationQueue;
@property(nonatomic) _Bool scrollingBlockedOnElementRefresh; // @synthesize scrollingBlockedOnElementRefresh=_scrollingBlockedOnElementRefresh;
@property(nonatomic) _Bool isActivelyScrollingContinuously; // @synthesize isActivelyScrollingContinuously=_isActivelyScrollingContinuously;
@property(nonatomic) unsigned long long lastTimeElementFetcherRefreshed; // @synthesize lastTimeElementFetcherRefreshed=_lastTimeElementFetcherRefreshed;
@property(retain, nonatomic) NSNumber *currentContinuousScrollDirection; // @synthesize currentContinuousScrollDirection=_currentContinuousScrollDirection;
@property(nonatomic) unsigned long long continuousScrollMode; // @synthesize continuousScrollMode=_continuousScrollMode;
@property(nonatomic) _Bool isPendingFingerLiftForPrimaryButtonPressUp; // @synthesize isPendingFingerLiftForPrimaryButtonPressUp=_isPendingFingerLiftForPrimaryButtonPressUp;
@property(nonatomic) NSDate *previousPrimaryButtonPressDownDate; // @synthesize previousPrimaryButtonPressDownDate=_previousPrimaryButtonPressDownDate;
@property(nonatomic) _Bool assistiveTouchMouseDwellControlEnabled; // @synthesize assistiveTouchMouseDwellControlEnabled=_assistiveTouchMouseDwellControlEnabled;
@property(nonatomic) _Bool mouseBehavesLikeFinger; // @synthesize mouseBehavesLikeFinger=_mouseBehavesLikeFinger;
@property(readonly, nonatomic) HNDSystemPointerController *systemPointerController; // @synthesize systemPointerController=_systemPointerController;
@property(nonatomic) _Bool inBubbleMode; // @synthesize inBubbleMode=_inBubbleMode;
@property(retain, nonatomic) AXDragManager *dragManager; // @synthesize dragManager=_dragManager;
@property(nonatomic) _Bool voiceControl; // @synthesize voiceControl=_voiceControl;
@property(nonatomic) _Bool alwaysShowMenu; // @synthesize alwaysShowMenu=_alwaysShowMenu;
@property(retain, nonatomic) NSArray *verticalContinuousScrollers; // @synthesize verticalContinuousScrollers=_verticalContinuousScrollers;
@property(retain, nonatomic) NSArray *horizontalContinuousScrollers; // @synthesize horizontalContinuousScrollers=_horizontalContinuousScrollers;
@property(retain, nonatomic) NSMutableArray *displayManagers; // @synthesize displayManagers=_displayManagers;
@property(readonly, nonatomic) HNDDeviceManager *deviceManager; // @synthesize deviceManager=_deviceManager;
@property(retain, nonatomic) HNDEventManager *eventManager; // @synthesize eventManager=_eventManager;
@property(retain, nonatomic) NSPointerArray *eventHandlers; // @synthesize eventHandlers=_eventHandlers;
@property(retain, nonatomic) NSArray *customGestures; // @synthesize customGestures=_customGestures;
@property(nonatomic) _Bool openMenuWithSwaggle; // @synthesize openMenuWithSwaggle=_openMenuWithSwaggle;
@property(nonatomic) double touchSpeed; // @synthesize touchSpeed=_touchSpeed;
- (id)displayManagerForDisplayId:(unsigned int)arg1;	// IMP=0x0010000000037422
- (void)enumerateDisplayManagersWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0010000000037357
- (id)displayManagerForHardwareIdentifier:(id)arg1;	// IMP=0x00100000000371fc
@property(readonly, nonatomic) HNDDisplayManager *currentDisplayManager;
@property(readonly, nonatomic) HNDDisplayManager *mainDisplayManager;
- (_Bool)needsGenerateScrollers;	// IMP=0x001000000003711f
- (double)fingerWidth;	// IMP=0x00100000000370cf
- (_Bool)showInnerCircle;	// IMP=0x001000000003708b
- (double)fingerInnerCircleInnerRadius;	// IMP=0x001000000003703b
- (_Bool)showFingerOutlines;	// IMP=0x0010000000036ff7
- (double)fingerInnerRadius;	// IMP=0x0010000000036fa7
- (double)innerCircleStrokeWidth;	// IMP=0x0010000000036f57
- (double)strokeOutlineWidth;	// IMP=0x0010000000036f07
- (double)strokeWidth;	// IMP=0x0010000000036eb7
- (double)unpressedScale;	// IMP=0x0010000000036e67
- (double)pressedScale;	// IMP=0x0010000000036e17
- (double)unpressedAlpha;	// IMP=0x0010000000036dc7
- (double)pressedAlpha;	// IMP=0x0010000000036d77
- (_Bool)useSystemFilters;	// IMP=0x0010000000036d33
- (id)pressedCircularProgressFillColor;	// IMP=0x0010000000036ce3
- (id)circularProgressFillColor;	// IMP=0x0010000000036c93
- (id)strokeOutlineColor;	// IMP=0x0010000000036c43
- (id)deselectedStrokeColor;	// IMP=0x0010000000036bf3
- (id)selectedStrokeColor;	// IMP=0x0010000000036ba3
- (id)deselectedFillColor;	// IMP=0x0010000000036b53
- (id)selectedFillColor;	// IMP=0x0010000000036b03
- (id)currentFingerAppearance;	// IMP=0x0010000000036a4d
- (_Bool)_requiresLargeSystemPointer;	// IMP=0x0010000000036971
- (double)_fingerRadiusOnDisplay:(id)arg1;	// IMP=0x00100000000367cf
- (_Bool)isPerformingDragPress;	// IMP=0x00100000000367c3
- (struct CGPoint)startPointForDrag;	// IMP=0x00100000000367ad
- (void)performFingerUpAtPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x00100000000366e2
- (void)performFingerMoveToPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000036617
- (void)performFingerDownAtPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x001000000003654c
- (struct CGPoint)_fingerControllerPointForScreenPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000036443
- (id)fingerController;	// IMP=0x00100000000363c1
- (void)showMenu:(_Bool)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000036374
- (struct CGPoint)rotateEventFromOrientation:(struct CGPoint)arg1;	// IMP=0x001000000003632e
- (struct CGPoint)rotateNormalizedPointToOrientation:(struct CGPoint)arg1;	// IMP=0x00100000000362d4
- (void)didFailToFloatApp;	// IMP=0x00100000000362a6
- (void)didFailToPinApp;	// IMP=0x0010000000036278
- (void)volumeChanged;	// IMP=0x001000000003624a
@property(readonly, nonatomic) _Bool isVoiceControlRunning; // @dynamic isVoiceControlRunning;
@property(readonly, nonatomic) double volumeLevel; // @dynamic volumeLevel;
- (void)rotateEventToOrientation:(id)arg1;	// IMP=0x00100000000360bb
- (void)handleCustomHomeButtonAction:(int)arg1;	// IMP=0x001000000003605b
- (void)performButtonAction:(id)arg1 type:(int)arg2 state:(int)arg3;	// IMP=0x0010000000035f68
- (struct CGPoint)preferredMenuDisplayPointOnDisplay:(id)arg1;	// IMP=0x0010000000035d36
- (MISSING_TYPE *)reloadFingerAppearance;	// IMP=0x0010000000035b74
- (void)removeFingersToPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000035ae4
- (void)resetFingersToPoint:(struct CGPoint)arg1 onDisplay:(id)arg2 active:(_Bool)arg3;	// IMP=0x001000000003560e
- (void)resetFingersToPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x00100000000355f7
- (void)resetFingersIfActiveOnDisplay:(id)arg1;	// IMP=0x0010000000035528
- (void)resetFingersIfNeededOnDisplay:(id)arg1;	// IMP=0x00100000000354bf
- (void)resetFingersIfNeeded;	// IMP=0x0010000000035420
- (_Bool)isFingersPressedDown;	// IMP=0x00100000000351fc
- (_Bool)canShowASTMousePointer;	// IMP=0x001000000003514e
- (void)menuExitedOnDisplay:(id)arg1;	// IMP=0x001000000003506b
- (void)notifyUserEventOccurred;	// IMP=0x001000000003502e
- (void)startPinchModeWithPoint:(struct CGPoint)arg1 onDisplay:(id)arg2 mode:(unsigned long long)arg3;	// IMP=0x0010000000034f27
- (id)_scrollFallbackGestureAtPoint:(struct CGPoint)arg1 onDisplay:(id)arg2 vertical:(_Bool)arg3 forward:(_Bool)arg4 max:(_Bool)arg5;	// IMP=0x0010000000034d60
- (double)_scrollDeltaForGesture:(_Bool)arg1 screenSize:(struct CGSize)arg2;	// IMP=0x0010000000034d46
- (_Bool)_performAXScrollActionAtPoint:(struct CGPoint)arg1 onDisplay:(id)arg2 action:(int)arg3;	// IMP=0x00100000000348bd
- (void)prepareScrollAtPoint:(struct CGPoint)arg1 onDisplay:(id)arg2 vertical:(_Bool)arg3 forward:(_Bool)arg4 max:(_Bool)arg5;	// IMP=0x00100000000347e6
- (void)handleMultiTouchStandard:(long long)arg1 onDisplay:(id)arg2 withExistingFingerMidPoint:(struct CGPoint)arg3;	// IMP=0x0010000000034303
- (void)handleSecondaryButtonPress:(int)arg1;	// IMP=0x00100000000342dd
- (void)handleLaserPrimaryButtonPress:(int)arg1;	// IMP=0x00100000000342b7
- (void)handlePrimaryButtonPress:(int)arg1;	// IMP=0x0010000000033ab4
- (void)_liftFingersUpForPotentialTapViaPrimaryButton;	// IMP=0x00100000000338e4
- (void)_reallyLiftFingersUpForPotentialTapViaPrimaryButton;	// IMP=0x001000000003385b
- (void)_handleAction:(id)arg1 type:(int)arg2 state:(int)arg3;	// IMP=0x00100000000334f9
- (void)handleButtonEvent:(id)arg1;	// IMP=0x001000000003330a
- (_Bool)softwareKeyboardManagerShouldSetHardwareKeyboardAttached:(id)arg1 hardwareKeyboardIsCurrentlyAttached:(_Bool)arg2 newHardwareKeyboardAttachedValue:(_Bool *)arg3;	// IMP=0x0010000000033302
- (void)softwareKeyboardManagerDidChangeHardwareKeyboardAttached:(id)arg1;	// IMP=0x00100000000332fc
- (void)softwareKeyboardManager:(id)arg1 didSetHardwareKeyboardAttached:(_Bool)arg2;	// IMP=0x00100000000332f6
- (void)softwareKeyboardManagerWillUpdateKeyboardState:(id)arg1;	// IMP=0x00100000000332f0
- (id)currentHardwareIdentifierForPointer;	// IMP=0x00100000000332a0
@property(readonly, nonatomic) struct CGPoint currentPointForPointer;
- (_Bool)_isWaitingForFirstSystemPointerMovement;	// IMP=0x0010000000032fa9
@property(nonatomic) _Bool dwellControlPaused;
- (void)setDwellMode:(unsigned long long)arg1;	// IMP=0x0010000000032e6a
@property(nonatomic) _Bool dwellControlAutorevertEnabled;
@property(readonly, nonatomic) _Bool dwellControlEnabled;
- (void)_setApplicationAccessibilityEnabledIfNeeded;	// IMP=0x0010000000032bf8
- (void)_presentMigrationPopupIfNeeded;	// IMP=0x001000000003260d
- (void)_dwellControlToggled;	// IMP=0x0010000000032520
- (void)_highlightFingers;	// IMP=0x0010000000032354
- (void)_fadeFingersAfterDelayIfNeededOnDisplay:(id)arg1;	// IMP=0x0010000000032067
- (void)_fadeFingersAfterDelayIfNeeded;	// IMP=0x0010000000031fc8
- (void)_updateFadedFingerOpacity;	// IMP=0x0010000000031ede
- (_Bool)_fadedFingersShouldShowOutlines;	// IMP=0x0010000000031e60
- (_Bool)_shouldAutoFadeFingersOnDisplay:(id)arg1;	// IMP=0x0010000000031e58
- (void)cancelDwellTimerWithoutStateResetForBubbleMode;	// IMP=0x0010000000031ddf
- (void)cancelDwellTimerForBubbleMode;	// IMP=0x0010000000031d91
- (void)cancelDwellTimerForPointer;	// IMP=0x0010000000031d07
- (void)cancelDwellTimer;	// IMP=0x0010000000031c56
- (_Bool)_startDwellTimerForBubbleMode;	// IMP=0x0010000000031742
- (_Bool)_startDwellTimerForPointer;	// IMP=0x00100000000312d6
- (void)_startDwellTimer;	// IMP=0x001000000003120c
- (_Bool)_isWithinLastDwellBounds:(struct CGPoint)arg1;	// IMP=0x0010000000031180
- (_Bool)_isPoint:(struct CGPoint)arg1 withinTolerance:(double)arg2 ofStartPoint:(struct CGPoint)arg3;	// IMP=0x0010000000031152
- (id)_avPlayerForSound:(id)arg1;	// IMP=0x0010000000030fca
- (_Bool)inCustomGesture;	// IMP=0x0010000000030fbc
- (struct CGPoint)_pointForLockedCorner:(unsigned long long)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000030e00
- (_Bool)_shouldLockIntoHotCornerAtNormalizedPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000030d4a
- (unsigned long long)_roundedCornersForCursorAtPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000030c7f
- (unsigned long long)_hotCornerForNormalizedPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000030b94
- (struct CGSize)_hotCornerActivationSizeOnDisplay:(id)arg1;	// IMP=0x0010000000030a95
- (unsigned long long)_cornerForNormalizedPoint:(struct CGPoint)arg1 normalizedPadding:(struct CGSize)arg2;	// IMP=0x0010000000030a2d
- (void)_performActionForHotCorner:(unsigned long long)arg1 onDisplay:(id)arg2;	// IMP=0x00100000000308ab
- (unsigned long long)_defaultDwellMode;	// IMP=0x00100000000307cd
- (void)_resetDwellModeToDefault;	// IMP=0x0010000000030663
- (void)_resetDwellDueToFingersReset;	// IMP=0x0010000000030576
- (void)_initializeDwell;	// IMP=0x0010000000030509
- (void)_performDwellActionOnDisplay:(id)arg1;	// IMP=0x00100000000302d0
- (void)_dwellTimerFired;	// IMP=0x0010000000030053
- (void)_showFingersIfNeededForMouseOnDisplay:(id)arg1;	// IMP=0x001000000002ff97
- (void)_updateZoomWithDisplayPoint:(struct CGPoint)arg1 onDisplay:(unsigned int)arg2;	// IMP=0x001000000002fe78
- (double)_defaultNubbitHitboxActivationFactor;	// IMP=0x001000000002fe6a
- (_Bool)_isInNubbitHitbox:(struct CGPoint)arg1 onDisplay:(id)arg2 activationFactor:(double)arg3;	// IMP=0x001000000002fded
- (_Bool)_isInNubbitHitbox:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x001000000002fd3c
- (struct CGRect)_paddedHitboxForNubbitOnDisplay:(id)arg1 activationFactor:(double)arg2;	// IMP=0x001000000002fc17
- (void)_lockIntoHotCornerForOrientedNormalizedPoint:(struct CGPoint)arg1 onDisplay:(id)arg2 cancelDwell:(_Bool)arg3;	// IMP=0x001000000002fb68
- (void)moveFingerToPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x001000000002f2d3
- (void)moveFingerToPoint:(struct CGPoint)arg1;	// IMP=0x001000000002f270
- (void)moveFingerByDelta:(struct CGPoint)arg1;	// IMP=0x001000000002f14a
- (void)sceneDidDisconnect:(id)arg1;	// IMP=0x001000000002eda9
- (void)sceneDidConnect:(id)arg1;	// IMP=0x001000000002ecf0
- (void)setupWindow:(id)arg1 ignoredWindow:(id)arg2;	// IMP=0x001000000002e976
- (void)_menuOpenTracker:(struct CGPoint)arg1;	// IMP=0x001000000002e1d9
@property(nonatomic) _Bool nubbitMoving;
- (void)setCaptureEvents:(_Bool)arg1;	// IMP=0x001000000002de2d
- (void)_resetMenuOpenTracker;	// IMP=0x001000000002ddfa
- (void)prepareGesture:(id)arg1 onDisplay:(id)arg2;	// IMP=0x001000000002daa9
- (_Bool)isCapturingRealEvents;	// IMP=0x001000000002d9cc
- (_Bool)_shouldRepeatGesture;	// IMP=0x001000000002d93a
- (void)_performCustomGestureOnDisplay:(id)arg1;	// IMP=0x001000000002d514
- (id)_shiftGestureIfNeeded:(id)arg1 onDisplay:(id)arg2 toMidpoint:(struct CGPoint)arg3;	// IMP=0x001000000002d3f6
- (void)performPreparedGestureOnDisplay:(id)arg1;	// IMP=0x001000000002d3db
- (_Bool)isPerformingGesture;	// IMP=0x001000000002d2c5
- (void)cancelCurrentGesture;	// IMP=0x001000000002d26c
@property(readonly, nonatomic) double touchSpeedMultiplier; // @dynamic touchSpeedMultiplier;
- (void)updatePointerAppearance;	// IMP=0x001000000002d090
@property(readonly, nonatomic) _Bool nubbitVisible;
- (void)updateSoftwareKeyboardState;	// IMP=0x001000000002ce19
- (void)updateMenuVisibility;	// IMP=0x001000000002cc70
- (void)updateAllSettings;	// IMP=0x001000000002cb70
- (void)removeEventHandler:(id)arg1;	// IMP=0x001000000002ca41
- (void)addEventHandler:(id)arg1;	// IMP=0x001000000002c6b9
- (void)_modifyPinchToolMoveToPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x001000000002be5a
- (void)mediaPlaybackChanged;	// IMP=0x001000000002bca4
- (void)screenshotDidFire;	// IMP=0x001000000002bbe4
- (void)screenshotWillFire;	// IMP=0x001000000002b942
- (void)_handleScreenshotDidFireCallbackTimeout;	// IMP=0x001000000002b893
- (void)_attemptToShowVisualsAfterPerformingScreenshot;	// IMP=0x001000000002b6e1
- (void)mediaControlsChanged:(_Bool)arg1;	// IMP=0x001000000002b625
- (void)resetNubbitLocation;	// IMP=0x001000000002b5f7
- (void)_startOrientationUpdateTimer;	// IMP=0x001000000002b482
- (void)orientationChanged:(long long)arg1;	// IMP=0x001000000002b3b6
- (void)orientationChanged;	// IMP=0x001000000002b233
- (_Bool)inDragMode;	// IMP=0x001000000002b227
- (_Bool)inPinchMode;	// IMP=0x001000000002b111
- (_Bool)inRockerMode;	// IMP=0x001000000002b034
- (void)systemServerDied;	// IMP=0x001000000002afcf
- (void)substantialTransitionOccurred;	// IMP=0x001000000002ac35
- (void)rotationLockChanged;	// IMP=0x001000000002ac07
- (void)ringerSwitchChanged;	// IMP=0x001000000002abd9
- (void)handleRealEvent:(id)arg1;	// IMP=0x001000000002a723
- (_Bool)usingSpecialTool;	// IMP=0x001000000002a6c4
- (void)specialToolUsageEnded:(_Bool)arg1;	// IMP=0x001000000002a420
- (void)resumeBubbleModeForSpecialUsageToolIfNecessary;	// IMP=0x001000000002a3c8
- (void)pauseBubbleModeForSpecialUsageTool;	// IMP=0x001000000002a38f
- (_Bool)_shouldHandleRealEventWithMultiTouchTool;	// IMP=0x001000000002a2dc
- (void)_handleMultiTouchToolEvent:(id)arg1;	// IMP=0x0010000000029dd1
- (_Bool)_shouldEnableMultiTouchToolBackground;	// IMP=0x0010000000029d7b
- (void)_handleRealCustomGestureUp:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000029d21
- (void)_handleRealCustomGestureMove:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000029c4e
- (void)_handleRealCustomGestureDown:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000029c2a
- (void)_moveFingersForRealEventToPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000029b51
- (void)_handleRealMultiFingerUp:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000029adb
- (void)_handleRealMultiFingerDown:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x00100000000299ad
- (void)_handleRealMultiFingerMove:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x00100000000298f1
- (void)_handleRealPinchToolMove:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x00100000000297f9
- (void)_handleRealPinchToolUp:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x00100000000296fa
- (id)mainWindow;	// IMP=0x00100000000296aa
- (void)resetPinchFingersOnDisplay:(id)arg1;	// IMP=0x00100000000291cf
- (void)_handleRealPinchToolDown:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000029096
- (void)_handlePinchFingerDownWithFinger:(id)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000028fd4
- (void)endContinuousScrollingOnDisplay:(id)arg1 withCompletion:(_Bool)arg2;	// IMP=0x0010000000028dd9
- (_Bool)_isChildElement:(id)arg1 desendantOfElement:(id)arg2;	// IMP=0x0010000000028d33
- (id)_scrollViewForScrollAction:(int)arg1 elementsToScroll:(id *)arg2;	// IMP=0x001000000002880b
- (_Bool)_iterateRemoteViewsAndPerformContinuousScrollWithSpeed:(double)arg1 direction:(unsigned long long)arg2;	// IMP=0x00100000000284de
- (void)processOrientedPointForContinuousScrolling:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000027ab9
- (void)beginContinuousScrollingInDirection:(unsigned long long)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000027911
- (void)prepareForContinuousScrollOnDisplay:(id)arg1;	// IMP=0x00100000000276f6
- (void)disableElementFetcherIfNecessary;	// IMP=0x00100000000276f0
- (void)enableElementFetcherAndNotificationsIfNecessary;	// IMP=0x00100000000276ea
- (void)refreshElementFetcherWithScrollingBlocked:(_Bool)arg1;	// IMP=0x00100000000275f1
- (_Bool)inContinuousScrollMode;	// IMP=0x00100000000275b4
- (struct CGRect)clipRect:(struct CGRect)arg1 toRotatedScreenBoundsOnDisplay:(id)arg2;	// IMP=0x00100000000274e2
- (_Bool)currentlySnappedInBubbleMode;	// IMP=0x0010000000027449
- (_Bool)isSimpleElementForBubbleMode:(id)arg1;	// IMP=0x00100000000273a7
- (_Bool)supportsActivateForBubbleModeElement:(id)arg1;	// IMP=0x00100000000272a1
- (void)activateCurrentBubbleModeFocusedElement;	// IMP=0x0010000000026f7c
- (double)distanceBetweenRect:(struct CGRect)arg1 andPoint:(struct CGPoint)arg2;	// IMP=0x0010000000026e94
- (id)nearestRockerButtonForDisplayManger:(id)arg1 orientedPoint:(struct CGPoint)arg2 distance:(double *)arg3;	// IMP=0x0010000000026bc7
- (id)nearestElementFrameForPortraitPoint:(struct CGPoint)arg1 distance:(double *)arg2;	// IMP=0x0010000000026934
- (void)generateMappingForElementFrames;	// IMP=0x001000000002662c
- (_Bool)_shouldUseTwoStageTyping;	// IMP=0x0010000000026624
- (id)availableElements;	// IMP=0x0010000000026564
- (void)bubbleModeFailedToSnapOnDisplay:(id)arg1;	// IMP=0x0010000000026374
- (void)processPortraitUpPointForBubbleMode:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000025403
- (id)_groupWithItems:(id)arg1 groupTraits:(unsigned long long)arg2 scanningBehaviorTraits:(unsigned long long)arg3 label:(id)arg4 identifier:(id)arg5 currentPid:(int)arg6;	// IMP=0x0010000000024f8e
- (id)_groupWithDictionary:(id)arg1 currentPid:(int)arg2;	// IMP=0x0010000000024e35
- (_Bool)bubbleModeAllowed;	// IMP=0x0010000000024e2d
- (_Bool)shouldUseBubbleMode;	// IMP=0x0010000000024dcd
- (void)enableBubbleMode:(_Bool)arg1;	// IMP=0x0000000000024bf2
- (_Bool)shouldUseEyeTrackingAutoHide;	// IMP=0x0010000000024bea
- (void)generateContinuousScrollersOnQueue:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x0010000000023e61
- (void)generateContinuousScrollersWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0010000000023d5a
- (_Bool)_scrollAncestorIsSelfForScrollView:(id)arg1 scrollAction:(int)arg2 resultScrollAncestor:(id *)arg3;	// IMP=0x0010000000023cb6
- (void)accessibilityManager:(id)arg1 didReceiveEvent:(long long)arg2 data:(id)arg3;	// IMP=0x0010000000023c18
- (id)additionalAXNotificationsToObserve;	// IMP=0x0010000000023bc8
- (void)fetcher:(id)arg1 didFetchElementsForEvent:(unsigned long long)arg2 foundNewElements:(_Bool)arg3;	// IMP=0x0010000000023b6b
- (_Bool)isSystemSleeping:(id)arg1;	// IMP=0x0010000000023b20
- (struct CGRect)screenFrame:(id)arg1;	// IMP=0x0010000000023b08
- (void)_handleRealContinuousScrollToolMove:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000023af6
- (void)_handleRealContinuousScrollToolUp:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000023a72
- (void)_handleRealDragToolMove:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000023a0c
- (void)_handleRealDragToolUp:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x001000000002390b
- (void)endDragModeAtPoint:(struct CGPoint)arg1 onDisplay:(id)arg2 completed:(_Bool)arg3;	// IMP=0x0010000000023170
- (void)beginDragAtPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000022dd9
- (void)beginDragMenuAtPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000022dc0
- (void)startDragModeOnDisplay:(id)arg1;	// IMP=0x0010000000022bfb
- (void)moveFingersToPointInFingerCoordinateSpace:(struct CGPoint)arg1 onDisplay:(id)arg2 allowOutOfBounds:(_Bool)arg3;	// IMP=0x00100000000225d7
- (void)_moveFingersToPointInFingerCoordinateSpace:(struct CGPoint)arg1 onDisplay:(id)arg2 allowOutOfBounds:(_Bool)arg3 animated:(_Bool)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x001000000002247f
- (void)_moveFingersToPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x001000000002246b
- (void)_moveSystemPointerIfActiveToPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000022352
- (void)_systemPointerSettingsDidChange;	// IMP=0x00100000000221ac
- (id)viewAtSystemPointerPoint;	// IMP=0x0010000000022114
- (_Bool)hitTestsViewAtSystemPointerPoint;	// IMP=0x00100000000220e1
- (_Bool)shouldHandleSystemPointerButtonEvent:(id)arg1;	// IMP=0x0010000000021e60
- (_Bool)shouldHideSystemPointerForFingersView;	// IMP=0x0010000000021c7a
- (void)cleanupPointerStreamIfNecessary;	// IMP=0x0010000000021c44
- (void)pointerController:(id)arg1 didReceivePointerEvent:(id)arg2;	// IMP=0x0010000000021723
- (void)keyboardVisible:(_Bool)arg1 withFrame:(struct CGRect)arg2;	// IMP=0x00100000000216c5
- (void)restartEverything;	// IMP=0x0010000000021443
- (void)systemServerConnected;	// IMP=0x001000000002142a
- (void)setupNonSceneUI:(_Bool)arg1;	// IMP=0x001000000002120d
- (void)refreshOrientation;	// IMP=0x0010000000020fc9
- (int)deviceOrientation;	// IMP=0x0010000000020f73
- (void)_registerForSettingsNotifications;	// IMP=0x00100000000205f7
- (void)_handleUsageConfirmation;	// IMP=0x001000000002040a
- (void)_handleBrokenHomeButtonMode;	// IMP=0x001000000001ffb1
- (void)_bootstrapRegister;	// IMP=0x001000000001fe93
- (void)dealloc;	// IMP=0x001000000001fd42
- (_Bool)_elementFetchingRequired;	// IMP=0x001000000001fd32
- (void)_updateForElementFetchRequired;	// IMP=0x001000000001fcf4
- (id)init;	// IMP=0x001000000001f52d
- (id)testingEventManager;	// IMP=0x0010000000037c0f

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
// Preceding property had unknown attributes: ?
// Original attribute string: T@"NSString",?,R,C

@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

