//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <CoreData/NSManagedObject.h>

@class CKRecord, CKShare, NSData, NSString, NSUUID, RDStoreControllerManagedObjectContext, REMCDAccount, REMCKCloudState, REMObjectID, REMResolutionTokenMap;

@interface REMCDObject : NSManagedObject
{
    CKRecord *_ckServerRecord;	// 8 = 0x8
    CKShare *_ckServerShare;	// 16 = 0x10
    _Bool _mergeDataRefusedToMergeMarkedForDeletion;	// 24 = 0x18
    _Bool _mergeDataRevertedLocallyMarkedForDeletion;	// 25 = 0x19
    _Bool _shouldPerformCloudSchemaCatchUpSync;	// 26 = 0x1a
    _Bool hack_willSaveHandled;	// 27 = 0x1b
    _Bool hack_didHandleShouldSyncUpDelete;	// 28 = 0x1c
    _Bool spotlightIndexCountUpdated;	// 29 = 0x1d
    _Bool validateForInsertion_handledJournalEntries;	// 30 = 0x1e
    _Bool validateForUpdate_handledJournalEntries;	// 31 = 0x1f
    REMCDAccount *previousAccount;	// 32 = 0x20
    REMResolutionTokenMap *hack_resolutionTokenMapCopy;	// 40 = 0x28
    REMResolutionTokenMap *cached_CDResolutionMap;	// 48 = 0x30
}

+ (_Bool)conformsToREMChangeTrackingIdentifiable;	// IMP=0x002000000005e930
+ (id)cdEntityName;	// IMP=0x001000000005e8d9
+ (id)objectIDWithUUID:(id)arg1;	// IMP=0x001000000005e84c
+ (id)newObjectID;	// IMP=0x001000000005e7ea
+ (id)relationshipsEligibleForEffectiveMinimumSupportedVersionPropagationWithEntity:(id)arg1;	// IMP=0x001000000005e244
+ (id)keyPathsForValuesAffectingEffectiveMinimumSupportedVersion;	// IMP=0x001000000005e02a
+ (_Bool)isAbstract;	// IMP=0x001000000005adeb
+ (id)ic_resultsMatchingPredicate:(id)arg1 sortDescriptors:(id)arg2 resultType:(unsigned long long)arg3 fetchBatchSize:(unsigned long long)arg4 propertiesToFetch:(id)arg5 relationshipKeyPathsForPrefetching:(id)arg6 context:(id)arg7;	// IMP=0x0010000000005f4c
+ (id)ic_objectsFromObjectIDs:(id)arg1 propertiesToFetch:(id)arg2 relationshipKeyPathsForPrefetching:(id)arg3 context:(id)arg4;	// IMP=0x00100000000059b1
+ (_Bool)shouldAttemptLocalObjectMerge;	// IMP=0x001000000006d6ae
+ (id)getResolutionTokenMapFromRecord:(id)arg1;	// IMP=0x001000000006d461
+ (id)objectCkZoneOwnerNameFromCKRecordZoneID:(id)arg1;	// IMP=0x001000000006cc21
+ (id)shareSystemFieldsTransformer;	// IMP=0x001000000006c1b7
+ (id)recordSystemFieldsTransformer;	// IMP=0x001000000006c162
+ (id)versionsByRecordIDByOperation;	// IMP=0x001000000006b9c7
+ (id)versionsByOperationQueue;	// IMP=0x001000000006b946
+ (id)keyPathsForValuesAffectingServerShareCheckingParent;	// IMP=0x001000000006afc1
+ (id)keyPathsForValuesAffectingIsSharedReadOnly;	// IMP=0x001000000006af21
+ (id)keyPathsForValuesAffectingIsSharedViaICloud;	// IMP=0x001000000006acaf
+ (id)keyPathsForValuesAffectingCanBeSharedViaICloud;	// IMP=0x001000000006ac15
+ (id)keyPathsForValuesAffectingNeedsToBeDeletedFromCloud;	// IMP=0x0010000000069e89
+ (void)deleteAllTemporaryAssetFilesForAllObjects;	// IMP=0x00100000000698d2
+ (void)deleteTemporaryFilesForAsset:(id)arg1;	// IMP=0x0010000000069715
+ (void)deleteTemporaryAssetFilesForOperation:(id)arg1;	// IMP=0x001000000006921b
+ (id)temporaryAssetDirectoryURL;	// IMP=0x0010000000068f13
+ (id)assetForData:(id)arg1;	// IMP=0x0010000000068cf4
+ (id)temporaryAssets;	// IMP=0x0010000000068c8f
+ (_Bool)needsToReFetchServerRecordValue:(id)arg1;	// IMP=0x00100000000674e4
+ (id)keyPathsForValuesAffectingNeedsToBePushedToCloud;	// IMP=0x0010000000067260
+ (_Bool)shouldSyncToCloud;	// IMP=0x0010000000066f58
+ (id)allDirtyCloudObjectIDsInContext:(id)arg1;	// IMP=0x0010000000065f1a
+ (id)allDirtyCloudObjectsPredicate;	// IMP=0x0010000000065ef8
+ (id)allCloudObjectIDsInContext:(id)arg1;	// IMP=0x0010000000065e7b
+ (id)allCloudObjectsInContext:(id)arg1;	// IMP=0x0010000000065d74
+ (id)allCloudObjectsPredicate;	// IMP=0x0010000000065c65
+ (id)newPlaceholderObjectForRecordID:(id)arg1 account:(id)arg2 context:(id)arg3;	// IMP=0x0010000000065af7
+ (id)newObjectWithCKIdentifier:(id)arg1 context:(id)arg2 account:(id)arg3;	// IMP=0x0010000000065124
+ (id)newObjectWithCKRecordName:(id)arg1 context:(id)arg2 account:(id)arg3;	// IMP=0x001000000006508e
+ (id)newCloudObjectForRecord:(id)arg1 account:(id)arg2 context:(id)arg3;	// IMP=0x0010000000065086
+ (id)newCloudObjectForRecord:(id)arg1 accountID:(id)arg2 context:(id)arg3;	// IMP=0x0010000000064e98
+ (id)existingCloudObjectForRecordID:(id)arg1 accountID:(id)arg2 context:(id)arg3;	// IMP=0x0010000000064e90
+ (id)numberOfPushAttemptsToWaitByCKIdentifier;	// IMP=0x0010000000063b25
+ (id)failedToSyncCountsByCKIdentifier;	// IMP=0x001000000006374f
+ (id)failureCountQueue;	// IMP=0x00100000000636ce
+ (id)objectWithRecordID:(id)arg1 accountID:(id)arg2 context:(id)arg3;	// IMP=0x0010000000062f60
+ (id)ckIdentifierFromRecordName:(id)arg1;	// IMP=0x0010000000062e8c
+ (id)recordTypes;	// IMP=0x0010000000062279
+ (id)ckRecordKeyForMinimumSupportedVersion;	// IMP=0x001000000006226c
+ (_Bool)conformsToICCloudObject;	// IMP=0x0010000000062264
+ (id)subclassNamesOfREMCDObjectRepresentingRootCoreDataEntities;	// IMP=0x0010000000078c60
+ (id)subclassesOfREMCDObjectRepresentingRootCoreDataEntities;	// IMP=0x0010000000078b52
+ (id)fetchRequest;	// IMP=0x0010000000078a41
+ (id)entity;	// IMP=0x0010000000078973
+ (void)mergeSystemPropertiesIntoCDObject:(id)arg1 fromCKRecord:(id)arg2;	// IMP=0x00100000004a4080
- (void).cxx_destruct;	// IMP=0x002000000005ea59
@property(nonatomic) _Bool validateForUpdate_handledJournalEntries; // @synthesize validateForUpdate_handledJournalEntries;
@property(nonatomic) _Bool validateForInsertion_handledJournalEntries; // @synthesize validateForInsertion_handledJournalEntries;
@property(nonatomic) _Bool spotlightIndexCountUpdated; // @synthesize spotlightIndexCountUpdated;
@property(retain, nonatomic) REMResolutionTokenMap *cached_CDResolutionMap; // @synthesize cached_CDResolutionMap;
@property(nonatomic) _Bool hack_didHandleShouldSyncUpDelete; // @synthesize hack_didHandleShouldSyncUpDelete;
@property(nonatomic) _Bool hack_willSaveHandled; // @synthesize hack_willSaveHandled;
@property(retain, nonatomic) REMResolutionTokenMap *hack_resolutionTokenMapCopy; // @synthesize hack_resolutionTokenMapCopy;
@property(retain, nonatomic) REMCDAccount *previousAccount; // @synthesize previousAccount;
- (id)remChangedObjectID;	// IMP=0x001000000005e938
- (id)remObjectIDWithError:(id *)arg1;	// IMP=0x001000000005e784
@property(readonly, nonatomic) REMObjectID *remObjectID;
- (_Bool)validateEffectiveMinimumSupportedVersionApplyingChange:(_Bool)arg1;	// IMP=0x001000000005e512
- (void)_markDirtyForEffectiveMinimumSupportedVersionValidation;	// IMP=0x001000000005e0a2
- (long long)parentEffectiveMinimumSupportedVersion;	// IMP=0x001000000005dfcb
@property(nonatomic) long long effectiveMinimumSupportedVersion;
- (void)setMinimumSupportedVersion:(long long)arg1;	// IMP=0x001000000005dcc3
@property(readonly, nonatomic) long long minimumSupportedVersion;
- (_Bool)isUnsupported;	// IMP=0x001000000005dc97
- (_Bool)_allowsObjectSupportedVersion;	// IMP=0x001000000005dc00
- (void)fixValueBeforeUnmarkingForDeletionForKey:(id)arg1;	// IMP=0x001000000005db47
- (void)fixValueBeforeMarkingForDeletionForKey:(id)arg1;	// IMP=0x001000000005d978
- (id)allChildObjects;	// IMP=0x001000000005d86e
- (void)deleteAllChildrenFromLocalDatabase;	// IMP=0x001000000005d714
- (void)recursiveMarkForDeletion:(_Bool)arg1 usingVisitedMap:(id)arg2;	// IMP=0x000000000005d59c
- (void)traverseObjectTreeUsingVisitedMap:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x001000000005cd97
- (void)updateDeletedFlagAccordingToOrphanState:(id)arg1;	// IMP=0x001000000005c8a0
- (_Bool)shouldMarkAsDeletedInsteadOfDeletingImmediately;	// IMP=0x001000000005c898
- (_Bool)_validateZoneOwnerNamesWithLogPrefix:(id)arg1 error:(id *)arg2;	// IMP=0x001000000005c4ca
@property(readonly, nonatomic) NSString *_parentZoneMismatchErrorDebugDescription;
- (_Bool)validateForUpdate:(id *)arg1;	// IMP=0x001000000005c08e
- (_Bool)validateForInsert:(id *)arg1;	// IMP=0x001000000005be73
- (void)prepareForDeletion;	// IMP=0x001000000005be1c
- (void)didSave;	// IMP=0x001000000005bd6f
- (void)willSave;	// IMP=0x001000000005b985
@property(retain, nonatomic) REMCDAccount *account; // @dynamic account;
- (id)createResolutionTokenMapIfNecessary;	// IMP=0x001000000005b834
- (id)resolutionTokenMapFromJsonData:(id)arg1;	// IMP=0x001000000005b78d
- (id)jsonDataFromResolutionTokenMap:(id)arg1;	// IMP=0x001000000005b72c
@property(retain, nonatomic) NSData *resolutionTokenMapData;
@property(retain, nonatomic) REMResolutionTokenMap *resolutionTokenMap;
- (void)didChangeValueForKey:(id)arg1;	// IMP=0x001000000005b07f
- (void)willChangeValueForKey:(id)arg1;	// IMP=0x001000000005b009
- (void)didTurnIntoFault;	// IMP=0x001000000005afc8
- (void)awakeFromFetch;	// IMP=0x001000000005af6b
- (void)awakeFromInsert;	// IMP=0x001000000005af0e
@property(readonly, nonatomic) _Bool isPlaceholder;
@property(readonly, nonatomic) _Bool isConcealed;
@property(readonly, nonatomic) RDStoreControllerManagedObjectContext *storeControllerManagedObjectContext;
@property(readonly, nonatomic) _Bool shouldPerformCloudSchemaCatchUpSync;
@property(readonly, nonatomic) _Bool mergeDataRevertedLocallyMarkedForDeletion;
@property(readonly, nonatomic) _Bool mergeDataRefusedToMergeMarkedForDeletion;
- (void)cleanUpAfterLocalObjectMerge;	// IMP=0x001000000006d797
- (_Bool)mergeWithLocalObject:(id)arg1;	// IMP=0x001000000006d78f
- (id)existingLocalObjectToMergeWithPredicate:(id)arg1;	// IMP=0x001000000006d787
- (_Bool)isMergeableWithLocalObject;	// IMP=0x001000000006d6b6
- (void)generateReolutionTokenMapForTestingWithKeys:(id)arg1;	// IMP=0x001000000006d53d
- (id)getResolutionTokenMapFromRecord:(id)arg1;	// IMP=0x001000000006d524
- (id)cloudKitReferenceWithRecordIDAndValidateAction:(id)arg1;	// IMP=0x001000000006d401
- (id)ic_loggingValues;	// IMP=0x001000000006cd67
- (id)ic_loggingIdentifier;	// IMP=0x001000000006cd55
- (id)shortLoggingDescription;	// IMP=0x001000000006ccd9
- (id)loggingDescription;	// IMP=0x001000000006ccc7
- (_Bool)hasAllMandatoryFields;	// IMP=0x001000000006cc7f
@property(retain, nonatomic) CKShare *ckServerShare;
- (void)updateSharedObjectOwnerName:(id)arg1;	// IMP=0x001000000006c4f6
@property(retain, nonatomic) CKRecord *ckServerRecord;
@property(nonatomic, getter=isInCloud) _Bool inCloud;
- (long long)isPushingSameOrLaterThanVersion:(long long)arg1;	// IMP=0x001000000006bde3
- (void)setVersion:(long long)arg1 forOperation:(id)arg2;	// IMP=0x001000000006bc12
- (long long)versionForOperation:(id)arg1;	// IMP=0x001000000006ba2c
- (void)restoreParentReferenceAfterUnmarkingForDeletion;	// IMP=0x001000000006b940
- (void)didAcceptShare:(id)arg1;	// IMP=0x001000000006b724
- (void)setServerShareIfNewer:(id)arg1;	// IMP=0x001000000006b18d
- (void)updateObjectWithShare:(id)arg1;	// IMP=0x001000000006b138
- (id)currentUserShareParticipantID;	// IMP=0x001000000006b097
- (id)shareType;	// IMP=0x001000000006b085
- (id)shareTitle;	// IMP=0x001000000006b073
- (id)serverShareCheckingParent;	// IMP=0x001000000006afe1
- (_Bool)isSharedReadOnly;	// IMP=0x001000000006af41
- (_Bool)isSharedRootObject;	// IMP=0x001000000006ae90
- (_Bool)isOwnedByCurrentUser;	// IMP=0x001000000006ae4c
- (_Bool)canBeRootShareObject;	// IMP=0x001000000006ae44
- (_Bool)isSharedViaICloud;	// IMP=0x001000000006acf7
- (_Bool)canBeSharedViaICloud;	// IMP=0x001000000006ac41
@property(readonly) _Bool needsToDeleteShare;
- (void)updateParentReferenceIfNecessary;	// IMP=0x001000000006a6cc
- (id)parentCloudObject;	// IMP=0x001000000006a6c4
- (void)debug_lowLevelRemoveFromParent;	// IMP=0x001000000006a657
- (void)debug_markObjectDirtyAfterUnmarkedForDeletion;	// IMP=0x001000000006a645
- (void)debug_lowLevelUnmarkForDeletion;	// IMP=0x001000000006a633
- (void)debug_markObjectDirtyAfterMarkedForDeletion;	// IMP=0x001000000006a621
- (void)debug_lowLevelMarkForDeletion;	// IMP=0x001000000006a60f
- (void)debug_fixValuesOfKeysWithUniqueConstraintBeforeSettingMarkedForDeletion:(_Bool)arg1;	// IMP=0x001000000006a5fd
- (_Bool)supportsDeletionByTTL;	// IMP=0x001000000006a5f5
@property(nonatomic) _Bool markedForDeletion; // @dynamic markedForDeletion;
- (void)__lowLevelMarkForDeletion;	// IMP=0x001000000006a46b
- (void)markObjectDirtyAfterUnmarkedForDeletion;	// IMP=0x001000000006a459
- (void)lowLevelUnmarkForDeletion;	// IMP=0x001000000006a445
- (void)unmarkForDeletion;	// IMP=0x001000000006a33b
- (void)markObjectDirtyAfterMarkedForDeletion;	// IMP=0x001000000006a29d
- (void)lowLevelMarkForDeletion;	// IMP=0x001000000006a286
- (void)markForDeletion;	// IMP=0x001000000006a179
- (void)fixValuesOfKeysWithUniqueConstraintBeforeSettingMarkedForDeletion:(_Bool)arg1;	// IMP=0x0010000000069ead
- (void)fixBrokenReferences;	// IMP=0x0010000000069e83
- (id)objectsToBeDeletedBeforeThisObject;	// IMP=0x0010000000069e76
- (void)deleteFromLocalDatabase;	// IMP=0x0010000000069d9a
- (_Bool)shouldBeDeletedFromLocalDatabase;	// IMP=0x0010000000069bfd
- (_Bool)isDeletable;	// IMP=0x0010000000069bf5
- (void)sortChildrenObjects;	// IMP=0x0010000000068c89
- (void)objectWasFetchedButDoesNotExistInCloud;	// IMP=0x0010000000068b12
- (void)objectWasFetchedFromCloudWithRecord:(id)arg1 accountID:(id)arg2;	// IMP=0x00100000000684b4
- (void)objectWasPushedToCloudWithOperation:(id)arg1 serverRecord:(id)arg2;	// IMP=0x0010000000068272
- (void)objectFailedToBePushedToCloudWithOperation:(id)arg1 recordID:(id)arg2 error:(id)arg3;	// IMP=0x0010000000067963
- (void)objectWillBePushedToCloudWithOperation:(id)arg1;	// IMP=0x00100000000678eb
- (void)objectWasDeletedFromCloudByAnotherDevice;	// IMP=0x00100000000676f6
- (void)objectWasDeletedFromCloud;	// IMP=0x00100000000676e2
- (_Bool)needsToFetchAfterServerRecordChanged:(id)arg1;	// IMP=0x0010000000067319
- (_Bool)hasSuccessfullyPushedLatestVersionToCloud;	// IMP=0x001000000006728c
- (void)forcePushToCloud;	// IMP=0x0010000000067136
@property(readonly) _Bool needsToBePushedToCloud;
- (void)mergeDataFromRecord:(id)arg1 accountID:(id)arg2;	// IMP=0x001000000006698a
- (id)newlyCreatedRecord;	// IMP=0x001000000006632d
- (void)recursivelyFixCrossZoneRelationshipWithVisitedMap:(id)arg1 perObjectHandler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000065f97
- (_Bool)isValidObject;	// IMP=0x0010000000064d8f
- (_Bool)isInICloudAccount;	// IMP=0x0010000000064c90
- (_Bool)_isInICloudAccount;	// IMP=0x0010000000064bc4
@property(readonly) _Bool needsToBeDeletedFromCloud;
- (id)recordType;	// IMP=0x0010000000064af3
- (long long)rd_ckDatabaseScope;	// IMP=0x0010000000064aaf
- (id)recordID;	// IMP=0x00100000000647bc
@property(copy, nonatomic) NSString *ckZoneOwnerName; // @dynamic ckZoneOwnerName;
- (id)recordZoneName;	// IMP=0x0010000000064691
- (id)recordName;	// IMP=0x0010000000064574
@property(readonly, nonatomic) _Bool shouldBeIgnoredForSync;
- (void)resetFailureCounts;	// IMP=0x00100000000643be
- (void)deleteChangeTokensAndReSync;	// IMP=0x0010000000064223
- (void)decrementFailureCounts;	// IMP=0x00100000000640d1
- (void)incrementFailureCounts;	// IMP=0x0010000000063efb
- (void)setNumberOfPushAttemptsToWaitCount:(long long)arg1;	// IMP=0x0010000000063d5c
- (long long)numberOfPushAttemptsToWaitCount;	// IMP=0x0010000000063b8a
- (void)setFailedToSyncCount:(long long)arg1;	// IMP=0x0010000000063986
- (long long)failedToSyncCount;	// IMP=0x00100000000637b4
- (id)ckIdentifierFromRecordName:(id)arg1;	// IMP=0x0010000000062f0f
- (void)clearServerRecord;	// IMP=0x0010000000062e78
- (void)clearChangeCount;	// IMP=0x0010000000062dca
- (void)updateChangeCount;	// IMP=0x0010000000062b8e
- (void)setShouldSyncUpDeleteIfNeeded;	// IMP=0x0010000000062a91
- (_Bool)shouldSyncUpDelete;	// IMP=0x0010000000062a78
- (void)_setCKIdentifierIfNecessary;	// IMP=0x001000000006290c
@property(nonatomic) _Bool ckNeedsToBeFetchedFromCloud; // @dynamic ckNeedsToBeFetchedFromCloud;
@property(readonly, nonatomic) NSString *accountCKIdentifier;
- (id)cloudAccount;	// IMP=0x001000000006260d
- (void)insertCloudStateIfNeededOnAwakeFromFetch;	// IMP=0x0010000000062435
- (void)insertCloudStateOnAwakeFromInsert;	// IMP=0x0010000000062336
- (void)clearTransformedCKServerValueCachesOnDidTurnIntoFault;	// IMP=0x00100000000622e9
- (_Bool)shouldCascadeMarkAsDeleteInto:(id)arg1 forRelationship:(id)arg2;	// IMP=0x001000000006eaff
- (_Bool)isConnectedToAccountObject:(id)arg1;	// IMP=0x001000000006ea3c

// Remaining properties
@property(retain, nonatomic) REMCKCloudState *ckCloudState; // @dynamic ckCloudState;
@property(nonatomic) short ckDirtyFlags; // @dynamic ckDirtyFlags;
@property(copy, nonatomic) NSString *ckIdentifier; // @dynamic ckIdentifier;
@property(nonatomic) _Bool ckNeedsInitialFetchFromCloud; // @dynamic ckNeedsInitialFetchFromCloud;
@property(retain, nonatomic) NSData *ckServerRecordData; // @dynamic ckServerRecordData;
@property(retain, nonatomic) NSData *ckServerShareData; // @dynamic ckServerShareData;
@property(copy, nonatomic) NSString *daPushKey; // @dynamic daPushKey;
@property(copy, nonatomic) NSString *daSyncToken; // @dynamic daSyncToken;
@property(readonly, copy) NSString *debugDescription;
// Preceding property had unknown attributes: ?
// Original attribute string: T@"NSString",?,R,C

@property(readonly, copy) NSString *description;
@property(nonatomic) long long effectiveMinimumSupportedAppVersion; // @dynamic effectiveMinimumSupportedAppVersion;
@property(copy, nonatomic) NSString *externalIdentifier; // @dynamic externalIdentifier;
@property(copy, nonatomic) NSString *externalModificationTag; // @dynamic externalModificationTag;
@property(readonly) unsigned long long hash;
@property(copy, nonatomic) NSUUID *identifier; // @dynamic identifier;
@property(nonatomic) long long minimumSupportedAppVersion; // @dynamic minimumSupportedAppVersion;
@property(retain, nonatomic) NSString *primitiveCkZoneOwnerName; // @dynamic primitiveCkZoneOwnerName;
@property(retain, nonatomic) REMResolutionTokenMap *resolutionTokenMap_v2_JSON; // @dynamic resolutionTokenMap_v2_JSON;
@property(retain, nonatomic) NSData *resolutionTokenMap_v3_JSONData; // @dynamic resolutionTokenMap_v3_JSONData;
@property(readonly) Class superclass;

@end

