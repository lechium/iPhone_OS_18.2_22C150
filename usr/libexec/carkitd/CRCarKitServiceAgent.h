//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CARConnectionTimeServiceAgent, CARMessagingServiceConnector, CARSessionRequestClient, CARSessionStatus, CRBluetoothManager, CRCarKitMonitoringServiceAgent, CRCarPlayPreferences, CRFeaturesAvailabilityAgent, CRLoggingChannelManager, CRPairingPromptFlowController, CRSetupPromptDirectorAgent, CRVehicle, CRVehicleStore, CRWiFiCarManager, CRWirelessSessionAssertionManager, NSMutableArray, NSMutableDictionary, NSNumber, NSString;
@protocol CRHeadUnitPairingPresenterDelegate, CRMessagingServiceVehicleRepresenting, CRVehicleAssetManaging;

@interface CRCarKitServiceAgent : NSObject
{
    _Bool _carPlaySimulatorActive;	// 8 = 0x8
    id <CRHeadUnitPairingPresenterDelegate> _headUnitPairingDelegate;	// 16 = 0x10
    CRCarKitMonitoringServiceAgent *_monitoringService;	// 24 = 0x18
    CRSetupPromptDirectorAgent *_setupPromptDirector;	// 32 = 0x20
    id <CRVehicleAssetManaging> _vehicleAssetManager;	// 40 = 0x28
    CRWirelessSessionAssertionManager *_assertionManager;	// 48 = 0x30
    CRBluetoothManager *_bluetoothManager;	// 56 = 0x38
    CARMessagingServiceConnector *_messagingConnector;	// 64 = 0x40
    CRCarPlayPreferences *_preferencesManager;	// 72 = 0x48
    CRFeaturesAvailabilityAgent *_featuresAvailabilityAgent;	// 80 = 0x50
    CARSessionStatus *_sessionStatus;	// 88 = 0x58
    CARSessionRequestClient *_sessionRequestClient;	// 96 = 0x60
    CRVehicleStore *_vehicleStore;	// 104 = 0x68
    CRWiFiCarManager *_wifiManager;	// 112 = 0x70
    CRPairingPromptFlowController *_currentPromptFlowController;	// 120 = 0x78
    CDUnknownBlockType _currentBluetoothConfirmationHandler;	// 128 = 0x80
    CDUnknownBlockType _currentBluetoothPairingCompletion;	// 136 = 0x88
    NSMutableArray *_outstandingApprovalAlerts;	// 144 = 0x90
    NSMutableArray *_outstandingPairingAlerts;	// 152 = 0x98
    NSMutableArray *_outstandingEnableWiFiAlerts;	// 160 = 0xa0
    NSMutableArray *_outstandingEnhancedIntegrationAlerts;	// 168 = 0xa8
    NSNumber *_cachedCarPlayAllowedChangeValue;	// 176 = 0xb0
    NSMutableDictionary *_serviceCountDuringAlertForBluetoothAddress;	// 184 = 0xb8
    NSString *_lastStartSessionDeviceID;	// 192 = 0xc0
    id <CRMessagingServiceVehicleRepresenting> _BTPowerMessagingVehicle;	// 200 = 0xc8
    CRVehicle *_BTPowerStoredVehicle;	// 208 = 0xd0
    CRLoggingChannelManager *_loggingChannelManager;	// 216 = 0xd8
    CARConnectionTimeServiceAgent *_connectionTimeServiceAgent;	// 224 = 0xe0
}

+ (unsigned long long)_declineTypeForOOBPairingMessagingVehicle:(id)arg1;	// IMP=0x0020000000034c77
+ (void)_incrementPairingDeclineCountForIdentifier:(id)arg1;	// IMP=0x0010000000034b3b
+ (unsigned long long)_pairingDeclineCountForIdentifier:(id)arg1;	// IMP=0x0010000000034a1b
+ (id)_pairingIdentifierForPromptFlow:(id)arg1;	// IMP=0x00100000000348f3
+ (id)_pairingIdentifierForMessagingVehicle:(id)arg1;	// IMP=0x00100000000348aa
- (void).cxx_destruct;	// IMP=0x0020000000038377
@property(retain, nonatomic) CARConnectionTimeServiceAgent *connectionTimeServiceAgent; // @synthesize connectionTimeServiceAgent=_connectionTimeServiceAgent;
@property(readonly, nonatomic) CRLoggingChannelManager *loggingChannelManager; // @synthesize loggingChannelManager=_loggingChannelManager;
@property(retain, nonatomic) CRVehicle *BTPowerStoredVehicle; // @synthesize BTPowerStoredVehicle=_BTPowerStoredVehicle;
@property(retain, nonatomic) id <CRMessagingServiceVehicleRepresenting> BTPowerMessagingVehicle; // @synthesize BTPowerMessagingVehicle=_BTPowerMessagingVehicle;
@property(retain, nonatomic) NSString *lastStartSessionDeviceID; // @synthesize lastStartSessionDeviceID=_lastStartSessionDeviceID;
@property(retain, nonatomic) NSMutableDictionary *serviceCountDuringAlertForBluetoothAddress; // @synthesize serviceCountDuringAlertForBluetoothAddress=_serviceCountDuringAlertForBluetoothAddress;
@property(nonatomic) NSNumber *cachedCarPlayAllowedChangeValue; // @synthesize cachedCarPlayAllowedChangeValue=_cachedCarPlayAllowedChangeValue;
@property(retain, nonatomic) NSMutableArray *outstandingEnhancedIntegrationAlerts; // @synthesize outstandingEnhancedIntegrationAlerts=_outstandingEnhancedIntegrationAlerts;
@property(retain, nonatomic) NSMutableArray *outstandingEnableWiFiAlerts; // @synthesize outstandingEnableWiFiAlerts=_outstandingEnableWiFiAlerts;
@property(retain, nonatomic) NSMutableArray *outstandingPairingAlerts; // @synthesize outstandingPairingAlerts=_outstandingPairingAlerts;
@property(retain, nonatomic) NSMutableArray *outstandingApprovalAlerts; // @synthesize outstandingApprovalAlerts=_outstandingApprovalAlerts;
@property(copy, nonatomic) CDUnknownBlockType currentBluetoothPairingCompletion; // @synthesize currentBluetoothPairingCompletion=_currentBluetoothPairingCompletion;
@property(copy, nonatomic) CDUnknownBlockType currentBluetoothConfirmationHandler; // @synthesize currentBluetoothConfirmationHandler=_currentBluetoothConfirmationHandler;
@property(retain, nonatomic) CRPairingPromptFlowController *currentPromptFlowController; // @synthesize currentPromptFlowController=_currentPromptFlowController;
@property(retain, nonatomic) CRWiFiCarManager *wifiManager; // @synthesize wifiManager=_wifiManager;
@property(retain, nonatomic) CRVehicleStore *vehicleStore; // @synthesize vehicleStore=_vehicleStore;
@property(retain, nonatomic) CARSessionRequestClient *sessionRequestClient; // @synthesize sessionRequestClient=_sessionRequestClient;
@property(retain, nonatomic) CARSessionStatus *sessionStatus; // @synthesize sessionStatus=_sessionStatus;
@property(retain, nonatomic) CRFeaturesAvailabilityAgent *featuresAvailabilityAgent; // @synthesize featuresAvailabilityAgent=_featuresAvailabilityAgent;
@property(retain, nonatomic) CRCarPlayPreferences *preferencesManager; // @synthesize preferencesManager=_preferencesManager;
@property(retain, nonatomic) CARMessagingServiceConnector *messagingConnector; // @synthesize messagingConnector=_messagingConnector;
@property(retain, nonatomic) CRBluetoothManager *bluetoothManager; // @synthesize bluetoothManager=_bluetoothManager;
@property(retain, nonatomic) CRWirelessSessionAssertionManager *assertionManager; // @synthesize assertionManager=_assertionManager;
@property(nonatomic) __weak id <CRVehicleAssetManaging> vehicleAssetManager; // @synthesize vehicleAssetManager=_vehicleAssetManager;
@property(nonatomic) __weak CRSetupPromptDirectorAgent *setupPromptDirector; // @synthesize setupPromptDirector=_setupPromptDirector;
@property(nonatomic) __weak CRCarKitMonitoringServiceAgent *monitoringService; // @synthesize monitoringService=_monitoringService;
@property(nonatomic) _Bool carPlaySimulatorActive; // @synthesize carPlaySimulatorActive=_carPlaySimulatorActive;
@property(nonatomic) __weak id <CRHeadUnitPairingPresenterDelegate> headUnitPairingDelegate; // @synthesize headUnitPairingDelegate=_headUnitPairingDelegate;
- (id)storedVehicleForSession:(id)arg1;	// IMP=0x0010000000037f50
- (void)sessionDidDisconnect:(id)arg1;	// IMP=0x0010000000037ca7
- (void)_invokeCurrentBluetoothPairingCompletionWithDeviceIdentifier:(id)arg1 success:(_Bool)arg2 error:(id)arg3;	// IMP=0x0010000000037a6a
- (void)bluetoothManager:(id)arg1 completedPairingForDeviceAddress:(id)arg2 deviceName:(id)arg3;	// IMP=0x0010000000037a4d
- (void)bluetoothManager:(id)arg1 failedPairingForDeviceAddress:(id)arg2 name:(id)arg3 didTimeout:(_Bool)arg4;	// IMP=0x0010000000037925
- (void)bluetoothManager:(id)arg1 requestsConfirmationForDeviceAddress:(id)arg2 name:(id)arg3 numericCode:(id)arg4 responseHandler:(CDUnknownBlockType)arg5;	// IMP=0x0010000000037547
- (void)bluetoothManager:(id)arg1 didChangePowerState:(_Bool)arg2;	// IMP=0x0010000000037460
- (void)_dismissEnhancedIntegrationAlerts;	// IMP=0x0010000000037331
- (void)_dismissEnhancedIntegrationAlertForMessagingVehicle:(id)arg1;	// IMP=0x0010000000037152
- (void)_presentEnhancedIntegrationAlertForMessagingVehicle:(id)arg1;	// IMP=0x0010000000036d1a
- (void)_enhancedIntegrationUpdatedForMessagingVehicle:(id)arg1 status:(unsigned long long)arg2;	// IMP=0x0010000000036b5a
- (void)vehicleIdentifierForCertificateSerial:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000036826
- (void)_dismissReconnectionEnableWiFiAlertExceptForVehicle:(id)arg1;	// IMP=0x00100000000365cf
- (void)_dismissReconnectionEnableWiFiAlertForVehicle:(id)arg1;	// IMP=0x0010000000036378
- (id)_presentedReconnectionEnableWiFiAlertForVehicle:(id)arg1;	// IMP=0x00100000000361a5
- (void)_presentReconnectionEnableWiFiAlertForVehicle:(id)arg1;	// IMP=0x0010000000035d13
- (void)_dismissPairingAlerts;	// IMP=0x0010000000035be4
- (void)_dismissPairingAlertForMessagingVehicle:(id)arg1;	// IMP=0x0010000000035a05
- (void)_beginWiredPairingWithMessagingVehicle:(id)arg1 storedVehicle:(id)arg2;	// IMP=0x001000000003543d
- (void)_presentWiredBluetoothPairingAlertForMessagingVehicle:(id)arg1 storedVehicle:(id)arg2;	// IMP=0x0010000000034db2
- (void)_dismissApprovalAlerts;	// IMP=0x001000000003477b
- (void)_dismissApprovalAlertForMessagingVehicle:(id)arg1;	// IMP=0x001000000003459c
- (void)_presentApprovalUsingAlertsForMessagingVehicle:(id)arg1;	// IMP=0x0010000000033a98
- (void)_presentCarPlaySetupForMessagingVehicle:(id)arg1 storedVehicle:(id)arg2;	// IMP=0x001000000003390f
- (void)_presentApprovalIfNecessaryForMessagingVehicle:(id)arg1 storedVehicle:(id)arg2;	// IMP=0x0010000000033804
- (void)_delegateHeadUnitPairingDidCompletePairingFlow:(_Bool)arg1 forBluetoothAddress:(id)arg2 error:(id)arg3;	// IMP=0x001000000003375b
- (void)_delegateHeadUnitPairingDidReceiveUserConfirmation:(_Bool)arg1 forBluetoothAddress:(id)arg2;	// IMP=0x00100000000336cc
- (void)didFailToHeadUnitPairWithBluetoothAddress:(id)arg1 error:(id)arg2;	// IMP=0x00100000000335cd
- (void)didHeadUnitPairWithBluetoothAddress:(id)arg1;	// IMP=0x0010000000033429
- (void)presentHeadUnitPairingForBluetoothAddress:(id)arg1 showBluetoothOnlyOption:(_Bool)arg2;	// IMP=0x00100000000332ad
- (void)pairingPromptFlow:(id)arg1 receivedEnhancedIntegrationResponse:(_Bool)arg2;	// IMP=0x00100000000331ce
- (void)pairingPromptFlow:(id)arg1 receivedConnectCarPlayFromCarKeyResponse:(_Bool)arg2 vehicleName:(id)arg3 turnOnWiFi:(_Bool)arg4;	// IMP=0x0010000000032fa6
- (void)pairingPromptFlow:(id)arg1 receivedConnectCarPlayResponse:(_Bool)arg2 turnOnWiFi:(_Bool)arg3;	// IMP=0x0010000000032ca4
- (void)pairingPromptFlow:(id)arg1 receivedUseWirelessResponse:(_Bool)arg2 turnOnBluetooth:(_Bool)arg3 turnOnWiFi:(_Bool)arg4;	// IMP=0x00100000000329ef
- (void)pairingPromptFlow:(id)arg1 receivedAllowWhileLockedResponse:(_Bool)arg2;	// IMP=0x001000000003291f
- (void)_setVehiclePairingStatus:(unsigned long long)arg1 forPromptFlow:(id)arg2;	// IMP=0x00100000000327ec
- (void)pairingPromptFlow:(id)arg1 receivedBluetoothContactsSyncResponse:(_Bool)arg2 forDeviceIdentifier:(id)arg3;	// IMP=0x001000000003272b
- (void)pairingPromptFlow:(id)arg1 receivedBluetoothConfirmationResponse:(_Bool)arg2 forDeviceIdentifier:(id)arg3;	// IMP=0x0010000000032605
- (void)didCompletePairingPromptFlow:(id)arg1;	// IMP=0x001000000003256e
- (void)pairingPromptFlow:(id)arg1 didCancelWithRequiredStepsRemaining:(_Bool)arg2;	// IMP=0x001000000003232b
- (void)_dismissPairingPromptFlow:(id)arg1;	// IMP=0x0010000000032143
- (void)pairingPromptFlow:(id)arg1 wantsToPerformPresentation:(CDUnknownBlockType)arg2;	// IMP=0x0010000000031e8a
- (id)assetProgressForPairingPromptFlow:(id)arg1;	// IMP=0x0010000000031d82
- (id)carKeyInfoForPairingPromptFlow:(id)arg1;	// IMP=0x0010000000031d2f
- (void)incrementOutOfBandPairingDeclineCountForPairingPromptFlow:(id)arg1;	// IMP=0x0010000000031cb4
- (unsigned long long)outOfBandPairingDeclineCountForPairingPromptFlow:(id)arg1;	// IMP=0x0010000000031c2d
- (_Bool)supportsThemeAssetsForPairingPromptFlow:(id)arg1;	// IMP=0x0010000000031a96
- (_Bool)needsWiFiTurnedOnForPairingPromptFlow:(id)arg1;	// IMP=0x0010000000031a4e
- (_Bool)needsBluetoothTurnedOnForPairingPromptFlow:(id)arg1;	// IMP=0x0010000000031a06
- (_Bool)enhancedIntegrationSupportedForPairingPromptFlow:(id)arg1;	// IMP=0x0010000000031922
- (_Bool)hasExistingBluetoothPairingForPairingPromptFlow:(id)arg1;	// IMP=0x0010000000031868
- (_Bool)_requestWiFiCredentialsIfNecessaryForApprovedMessagingVehicle:(id)arg1;	// IMP=0x00100000000317ba
- (_Bool)_sendDeviceIdentifiersForMessagingVehicle:(id)arg1 pairingStatus:(unsigned long long)arg2;	// IMP=0x00100000000316bb
- (void)_sendCarPlayAvailabilityForMessagingVehicle:(id)arg1 storedVehicle:(id)arg2;	// IMP=0x00100000000312bb
- (_Bool)attemptConnectionWithVehicles:(id)arg1;	// IMP=0x0010000000030c44
- (_Bool)removeVehicle:(id)arg1;	// IMP=0x00100000000304c2
- (id)saveVehicle:(id)arg1;	// IMP=0x001000000002fcdf
- (_Bool)_currentlyConnectedVehicleSupportsMixableAudio;	// IMP=0x001000000002fc47
- (id)pairedVehiclesConnectedOnBluetooth;	// IMP=0x001000000002f71e
- (void)updateStoredVehicle:(id)arg1 usingMessagingVehicle:(id)arg2;	// IMP=0x001000000002f057
- (void)enumerateStoredVehiclesForMessagingVehicles:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;	// IMP=0x001000000002ee3f
- (id)vehicleMatchingMessagingVehicle:(id)arg1 inVehicles:(id)arg2;	// IMP=0x001000000002ec0d
- (void)updateIncompletePairingsMatchingMessagingVehicles:(id)arg1;	// IMP=0x001000000002e33b
- (id)_wirelessPairingAnalyticsDescriptionForMessagingVehicle:(id)arg1 storedVehicle:(id)arg2;	// IMP=0x001000000002df4b
- (void)handleDidConnectMessagingToVehicles:(id)arg1;	// IMP=0x001000000002d9d3
- (void)handleAnyMessagingConnectionsToVehicles;	// IMP=0x001000000002d95b
- (_Bool)_shouldPromptEnhancedIntegrationForStoredVehicle:(id)arg1 messagingVehicle:(id)arg2;	// IMP=0x001000000002d852
- (void)_mainQueue_updateClusterAssetIdentifier:(id)arg1 assetVersion:(id)arg2 sdkVersion:(id)arg3 forVehicle:(id)arg4;	// IMP=0x001000000002d757
- (void)_mainQueue_startSessionForHost:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x001000000002d579
- (void)_saveWiFiCredentials:(id)arg1 fromMessagingVehicle:(id)arg2 forWirelessPairedVehicle:(id)arg3 result:(CDUnknownBlockType)arg4;	// IMP=0x001000000002d0bc
- (void)_saveWiFiCredentials:(id)arg1 forAccessoryConnectionIdentifier:(unsigned long long)arg2 result:(CDUnknownBlockType)arg3;	// IMP=0x001000000002ced4
- (void)_findWirelessPairedVehicleForMessagingVehicle:(id)arg1 result:(CDUnknownBlockType)arg2;	// IMP=0x001000000002cacc
- (void)_findWirelessPairedVehicleForAccessoryConnectionIdentifier:(unsigned long long)arg1 result:(CDUnknownBlockType)arg2;	// IMP=0x001000000002c920
- (_Bool)_isVehicleActionable:(id)arg1;	// IMP=0x001000000002c903
- (_Bool)_isRestricted:(id *)arg1;	// IMP=0x001000000002c86f
- (_Bool)postOutOfCarNotificationForVehicle:(id)arg1;	// IMP=0x001000000002c730
- (_Bool)postInCarNotificationForVehicle:(id)arg1;	// IMP=0x001000000002c551
- (void)handleVehicleStoreAvailabiltyDidChange:(id)arg1;	// IMP=0x001000000002c4a5
- (void)_handleCarPlayAllowedDidChange;	// IMP=0x001000000002c0c4
- (void)handleCarPlayAllowedDidChange;	// IMP=0x001000000002c063
- (void)serviceConnector:(id)arg1 didConnectUnsupportedAccessoryWithBluetoothAddress:(id)arg2;	// IMP=0x001000000002bf38
- (void)serviceConnector:(id)arg1 didDisconnectVehicle:(id)arg2;	// IMP=0x001000000002bdf6
- (void)serviceConnector:(id)arg1 receivedStartSessionMessage:(id)arg2 fromVehicle:(id)arg3;	// IMP=0x001000000002b500
- (void)serviceConnector:(id)arg1 didUpdateVehicle:(id)arg2;	// IMP=0x001000000002b39e
- (void)serviceConnector:(id)arg1 didConnectVehicle:(id)arg2;	// IMP=0x001000000002b073
- (void)serviceConnector:(id)arg1 completedPairingForBluetoothLEIdentifier:(id)arg2 name:(id)arg3;	// IMP=0x001000000002af91
- (void)serviceConnector:(id)arg1 failedPairingForBluetoothLEIdentifier:(id)arg2 name:(id)arg3 error:(id)arg4;	// IMP=0x001000000002ad68
- (void)serviceConnector:(id)arg1 requestsPairingConfirmationForBluetoothLEIdentifier:(id)arg2 name:(id)arg3 numericCode:(id)arg4 responseHandler:(CDUnknownBlockType)arg5;	// IMP=0x001000000002a882
- (void)fetchScaledDisplaysWithReply:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x001000000002a7d0
- (id)accessoryRadarDescription:(id)arg1;	// IMP=0x001000000002a657
- (void)fetchInstrumentClusterURLsWithReply:(CDUnknownBlockType)arg1;	// IMP=0x001000000002a5dd
- (void)handleCarPlayDiagnosticsWithDeviceScreenshotURL:(id)arg1 carScreenshotURL:(id)arg2 attachmentURLs:(id)arg3 activeBundleIdentifier:(id)arg4 reply:(CDUnknownBlockType)arg5;	// IMP=0x0010000000029b26
- (void)supportedAirPlayFeaturesForVehicleIdentifier:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x001000000002980a
- (void)supportedCarPlayFeaturesForCertificateSerial:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000295ea
- (void)setCarPlayFeatures:(unsigned long long)arg1 disabled:(_Bool)arg2 forVehicleIdentifier:(id)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x0010000000029434
- (void)disablesCarPlayFeatures:(unsigned long long)arg1 forVehicleIdentifier:(id)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x0010000000029258
- (void)deviceSupportedCarPlayFeaturesWithReply:(CDUnknownBlockType)arg1;	// IMP=0x00100000000290d2
- (void)isCarPlayAllowedWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0010000000029056
- (void)handleCarPlayRestrictionChangedWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0010000000028fd0
- (void)isEnhancedIntegrationEnabledWithCertificateSerial:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000028c0a
- (void)isPairedWithCertificateSerial:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000028844
- (void)allowsConnectionsForCertificateSerial:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x001000000002846c
- (void)allowsConnectionsForWiFiUUID:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000028073
- (void)saveWiFiCredentials:(id)arg1 forAccessoryConnectionIdentifier:(unsigned long long)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x0010000000027d73
- (void)wantsCarPlayControlAdvertisingForWiFiUUID:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000027820
- (void)wantsCarPlayControlAdvertisingForUSBWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0010000000027483
- (void)postBannerToPhone:(id)arg1 notificationMessage:(id)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x00100000000273b3
- (void)handleCarPlayConnectionRequestForConnectionID:(unsigned int)arg1 startSessionProperties:(id)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x00100000000262b7
- (void)startBluetoothClassicPairingForDeviceAddress:(id)arg1 deviceName:(id)arg2 numericCode:(id)arg3 showBluetoothOnlyOption:(_Bool)arg4 reply:(CDUnknownBlockType)arg5;	// IMP=0x0010000000025d41
- (void)startBluetoothLEPairingForIdentifier:(id)arg1 deviceName:(id)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x0010000000025804
- (void)handleBluetoothClassicPairingCompletedForDeviceAddress:(id)arg1 name:(id)arg2 preApproved:(_Bool)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x0010000000025455
- (void)isBluetoothInCarWithReply:(CDUnknownBlockType)arg1;	// IMP=0x00100000000250b8
- (void)handleDidDisconnectBluetoothAddress:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000024eed
- (void)handleDidConnectBluetoothAddress:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000246d2
- (void)hasVehiclesWithReply:(CDUnknownBlockType)arg1;	// IMP=0x00100000000245ef
- (void)fetchAllVehiclesWithReply:(CDUnknownBlockType)arg1;	// IMP=0x001000000002437e
- (void)removeVehicle:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x001000000002417c
- (void)saveVehicle:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000023eac
- (_Bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;	// IMP=0x00100000000239ed
- (void)dealloc;	// IMP=0x0010000000023978
- (id)initWithVehicleStore:(id)arg1 sessionStatus:(id)arg2 bluetoothManager:(id)arg3 preferences:(id)arg4 connectionTimeServiceAgent:(id)arg5;	// IMP=0x00100000000234dc

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
// Preceding property had unknown attributes: ?
// Original attribute string: T@"NSString",?,R,C

@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

