//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class ADAudioSessionCoordinator, ADSpeechCompressor, ADSpeechLog, ADSpeechPlaybackSimulator, ADVolumeService, AFAudioPowerUpdater, AFClientConfiguration, AFDictationOptions, AFInstanceContext, CSAudioDeviceInfo, CSAudioSessionController, CSSiriAudioPlaybackService, CSSiriSpeechRecorder, CSSiriSpeechRecordingContext, CSSpeechController, CoreEmbeddedSpeechRecognizer, NSArray, NSError, NSString;
@protocol ADSpeechManagerDelegate, ADVolumeServiceProviding, ADVolumeTracking, AFAudioSessionAssertionAcquisitionService, CSSiriRecordingInfoProviding, CSSiriSpeechCapturing, OS_dispatch_queue;

@interface ADSpeechManager : NSObject
{
    CoreEmbeddedSpeechRecognizer *_interactiveLocalSpeechRecognizer;	// 8 = 0x8
    NSString *_localSpeechRecognizerTask;	// 16 = 0x10
    NSObject<OS_dispatch_queue> *_queue;	// 24 = 0x18
    AFInstanceContext *_instanceContext;	// 32 = 0x20
    int _speechState;	// 40 = 0x28
    _Bool _shouldTalkToDelegate;	// 44 = 0x2c
    long long _capturingMode;	// 48 = 0x30
    AFClientConfiguration *_clientConfiguration;	// 56 = 0x38
    CSSiriSpeechRecordingContext *_capturingContext;	// 64 = 0x40
    NSError *_recordingError;	// 72 = 0x48
    id <ADSpeechManagerDelegate> _delegate;	// 80 = 0x50
    CDUnknownBlockType _recordStartedCompletion;	// 88 = 0x58
    CDUnknownBlockType _recordStoppedCompletion;	// 96 = 0x60
    _Bool _releasesAudioSessionWhenRecordingStopped;	// 104 = 0x68
    long long _prepareAudioSystemTransactionCount;	// 112 = 0x70
    _Bool _releasesAudioSessionWhenPrepareAudioSystemDone;	// 120 = 0x78
    ADSpeechLog *_speechLog;	// 128 = 0x80
    CSSpeechController *_speechController;	// 136 = 0x88
    CSAudioSessionController *_audioSessionController;	// 144 = 0x90
    id <CSSiriSpeechCapturing> _currentCapturing;	// 152 = 0x98
    CSSiriSpeechRecorder *_speechRecorder;	// 160 = 0xa0
    ADSpeechPlaybackSimulator *_playbackSimulator;	// 168 = 0xa8
    ADSpeechCompressor *_speechCompressor;	// 176 = 0xb0
    ADVolumeService *_volumeService;	// 184 = 0xb8
    CSSiriAudioPlaybackService *_audioPlaybackService;	// 192 = 0xc0
    id _context;	// 200 = 0xc8
    _Bool _isDriving;	// 208 = 0xd0
    _Bool _isAudioSessionLikelyActive;	// 209 = 0xd1
    _Bool _isReleaseAudioSessionRequired;	// 210 = 0xd2
    _Bool _hasPreparedAudioSystemForPlayback;	// 211 = 0xd3
    CSAudioDeviceInfo *_audioDeviceInfo;	// 216 = 0xd8
    NSString *_recordRoute;	// 224 = 0xe0
    NSString *_deviceIdentifier;	// 232 = 0xe8
    _Bool _hasFetchedSmartSiriVolume;	// 240 = 0xf0
    _Bool _hasUpdatedSiriOutputVolume;	// 241 = 0xf1
    unsigned long long _dirtySiriOutputVolumeHostTime;	// 248 = 0xf8
    _Bool _hasReceivedLastAudioBuffer;	// 256 = 0x100
    NSString *_initialDictationLanguage;	// 264 = 0x108
    NSString *_primaryDictationLanguage;	// 272 = 0x110
    NSArray *_dictationLanguages;	// 280 = 0x118
    AFDictationOptions *_dictationOptions;	// 288 = 0x120
    NSArray *_inlineItemList;	// 296 = 0x128
    AFAudioPowerUpdater *_audioPowerUpdater;	// 304 = 0x130
    ADAudioSessionCoordinator *_audioSessionCoordinator;	// 312 = 0x138
}

+ (id)sharedManager;	// IMP=0x0020000000348d68
+ (id)_speechCodecError;	// IMP=0x0010000000348d3d
+ (id)_badStateError;	// IMP=0x0010000000348d12
+ (id)_ADSpeechManagerLowPriorityDispatchQueue;	// IMP=0x0010000000348c82
- (void).cxx_destruct;	// IMP=0x0020000000342786
@property(readonly, nonatomic) CSSiriAudioPlaybackService *audioPlaybackService; // @synthesize audioPlaybackService=_audioPlaybackService;
@property(readonly, nonatomic) CSAudioSessionController *audioSessionController; // @synthesize audioSessionController=_audioSessionController;
@property(readonly, nonatomic) ADAudioSessionCoordinator *audioSessionCoordinator; // @synthesize audioSessionCoordinator=_audioSessionCoordinator;
@property(readonly, nonatomic) AFAudioPowerUpdater *audioPowerUpdater; // @synthesize audioPowerUpdater=_audioPowerUpdater;
@property(copy, nonatomic) NSArray *inlineItemList; // @synthesize inlineItemList=_inlineItemList;
@property(nonatomic) _Bool isDriving; // @synthesize isDriving=_isDriving;
@property(retain, nonatomic) id context; // @synthesize context=_context;
@property(copy, nonatomic) AFDictationOptions *dictationOptions; // @synthesize dictationOptions=_dictationOptions;
@property(copy, nonatomic) NSArray *dictationLanguages; // @synthesize dictationLanguages=_dictationLanguages;
@property(copy, nonatomic) NSString *primaryDictationLanguage; // @synthesize primaryDictationLanguage=_primaryDictationLanguage;
@property(copy, nonatomic) NSString *initialDictationLanguage; // @synthesize initialDictationLanguage=_initialDictationLanguage;
- (void)asrBridgeReceivedPartialResult:(id)arg1 language:(id)arg2 tokens:(id)arg3;	// IMP=0x00100000003425e3
- (void)asrBridgeReceivedFinalResult:(id)arg1 speechPackage:(id)arg2 sessionUUID:(id)arg3;	// IMP=0x0010000000342502
- (void)asrBridgeReceivedEagerRecognitionCandidate:(id)arg1 rawRecognitionResult:(id)arg2 duration:(double)arg3 sessionUUID:(id)arg4;	// IMP=0x0010000000342421
@property(readonly, nonatomic) id <AFAudioSessionAssertionAcquisitionService> audioSessionAssertionAcquisitionService;
- (void)_getAdjustedSiriOutputVolumeLevelForAudioRoute:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x00100000003422fd
- (void)adjustSiriOutputVolumeForRouteIfNeeded:(id)arg1;	// IMP=0x0010000000342270
- (void)_updateSiriOutputVolume:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00100000003420dc
- (void)_fetchSmartSiriVolumeForType:(unsigned long long)arg1 forceFetch:(_Bool)arg2;	// IMP=0x0010000000341f46
- (void)_fetchSmartSiriVolume:(_Bool)arg1;	// IMP=0x0010000000341f2d
- (id)_volumeService;	// IMP=0x0010000000341de0
- (_Bool)_supportsVolumeService;	// IMP=0x0010000000341dc5
- (void)setEARLanguageDetectorSpeechRequestId:(id)arg1;	// IMP=0x0010000000341d38
- (void)_addRecordStoppedCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0010000000341c51
- (void)setEndpointerDelayedTrigger:(_Bool)arg1;	// IMP=0x0010000000341c03
- (void)setEndpointerThreshold:(double)arg1;	// IMP=0x0010000000341bb3
- (void)updateSpeechSynthesisRecord:(id)arg1;	// IMP=0x0010000000341b26
@property(readonly, nonatomic) id <CSSiriRecordingInfoProviding> recordingInfoProvider;
@property(readonly, nonatomic) id <ADVolumeServiceProviding> volumeServiceProvider;
@property(readonly, nonatomic) id <ADVolumeTracking> volumeTracker;
- (void)getLastStartpointTimestampAndCurrentTime:(CDUnknownBlockType)arg1;	// IMP=0x0010000000341a7e
- (void)stopFingerprintingForSuccess:(_Bool)arg1;	// IMP=0x0010000000341a30
- (void)updateSpeechOptions:(id)arg1;	// IMP=0x0010000000341959
- (void)playRecordingStartAlert;	// IMP=0x001000000034190e
- (void)setSpeechRecognizedContext:(id)arg1;	// IMP=0x0010000000341881
- (void)enforcePreviousEndpointHint;	// IMP=0x0010000000341836
- (void)updateEndpointHintForRC:(id)arg1 forceAccept:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x0010000000341773
- (void)updateOptionsAfterRecognitionForElapsedTime:(double)arg1 isFinal:(_Bool)arg2;	// IMP=0x0010000000341720
- (void)updateASRFeatures:(id)arg1;	// IMP=0x0010000000341693
- (void)suspendAutomaticEndpointingInRange:(struct AFTimeRange)arg1;	// IMP=0x001000000034163e
- (void)setFingerprintWasRecognized;	// IMP=0x00100000003415f3
- (void)deactivateAudioSessionIfNoActiveAssertions;	// IMP=0x00100000003415a8
- (void)suppressAudioInterruptionEndedNotificationsAndEndSessionIfIdle:(CDUnknownBlockType)arg1;	// IMP=0x001000000034151b
- (_Bool)_endSessionIfIdle;	// IMP=0x001000000034142b
- (void)_cancelRecordingIfNeededAndEndSessionWhenIdleWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0010000000340fac
- (void)endSession:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0010000000340db1
- (void)endSession;	// IMP=0x0010000000340c2d
- (void)setSuppressAudioInterruptionEndedNotifications:(_Bool)arg1;	// IMP=0x0010000000340bdf
- (void)_stopSpeechCaptureWithOptions:(id)arg1;	// IMP=0x0010000000340923
- (void)stopSpeechCaptureIfFingerprintingOnlyWithOptions:(id)arg1;	// IMP=0x00100000003407c4
- (void)stopSpeechCaptureWithOptions:(id)arg1;	// IMP=0x0010000000340644
- (void)cancelSpeechCaptureSuppressingAlert:(_Bool)arg1;	// IMP=0x0010000000340511
- (void)startSpeechCaptureWithURL:(id)arg1 isNarrowBand:(_Bool)arg2 isDictation:(_Bool)arg3 sessionUUID:(id)arg4;	// IMP=0x0010000000340408
- (void)addRecordedDictationAudioSampleData:(id)arg1;	// IMP=0x001000000034037b
- (void)startRecordedDictationCaptureWithSessionUUID:(id)arg1 narrowband:(_Bool)arg2 secureOfflineOnly:(_Bool)arg3;	// IMP=0x00100000003402aa
- (void)_startCaptureForMode:(long long)arg1 options:(id)arg2 context:(id)arg3;	// IMP=0x001000000033f7d3
- (id)_startFixedPriorityCaptureForMode:(long long)arg1 options:(id)arg2 sessionUUID:(id)arg3;	// IMP=0x001000000033f625
- (void)startAcousticIDCaptureWithOptions:(id)arg1 sessionUUID:(id)arg2;	// IMP=0x001000000033f5ff
- (id)startSpeechCaptureForDictationWithOptions:(id)arg1 sessionUUID:(id)arg2 secureOfflineOnly:(_Bool)arg3;	// IMP=0x000000000033f4a8
- (id)startSpeechCaptureForRequestWithOptions:(id)arg1 sessionUUID:(id)arg2 language:(id)arg3;	// IMP=0x001000000033f3c2
- (_Bool)isStopped;	// IMP=0x001000000033f334
- (_Bool)isCapturing;	// IMP=0x001000000033f2a6
- (void)setClientConfiguration:(id)arg1;	// IMP=0x001000000033f219
- (void)setDelegate:(id)arg1;	// IMP=0x001000000033f18c
- (void)_prepareAudioSystemWithContext:(id)arg1 audioSessionAssertion:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x001000000033e833
- (void)prepareAudioSystemWithContext:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x001000000033e6b6
- (void)preheatRecognizerWithOptions:(id)arg1;	// IMP=0x001000000033e5a0
- (void)preheatWithOptions:(id)arg1;	// IMP=0x001000000033e48a
- (void)eagerlyInitializeAudioRecording;	// IMP=0x001000000033e43f
- (void)localSpeechRecognizer:(id)arg1 didCompletionRecognitionWithStatistics:(id)arg2 error:(id)arg3;	// IMP=0x001000000033e352
- (void)localSpeechRecognizer:(id)arg1 didProduceLoggablePackage:(id)arg2;	// IMP=0x001000000033e29b
- (void)localSpeechRecognizer:(id)arg1 didRecognizePackage:(id)arg2;	// IMP=0x001000000033e1e4
- (void)localSpeechRecognizer:(id)arg1 didRecognizeRawEagerRecognitionCandidate:(id)arg2;	// IMP=0x001000000033e157
- (void)localSpeechRecognizer:(id)arg1 didProcessAudioDuration:(double)arg2;	// IMP=0x001000000033e0bb
- (void)localSpeechRecognizer:(id)arg1 didRecognizeTokens:(id)arg2;	// IMP=0x001000000033e004
- (void)audioPowerUpdaterDidUpdate:(id)arg1 averagePower:(float)arg2 peakPower:(float)arg3;	// IMP=0x001000000033dfe7
- (id)_recordingInfo;	// IMP=0x001000000033df97
- (id)getRecordingInfo;	// IMP=0x001000000033dede
- (void)getRecordingInfoUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000033de47
- (void)getVolumeServiceUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000033ddb0
- (void)setDirtySiriOutputVolumeHostTime:(unsigned long long)arg1;	// IMP=0x001000000033dd61
- (void)audioSessionCoordinator:(id)arg1 releaseAudioSessionWithContext:(id)arg2;	// IMP=0x001000000033dc23
- (void)audioSessionCoordinator:(id)arg1 prepareAudioSessionWithContext:(id)arg2;	// IMP=0x001000000033dae5
- (void)speechCapturingDidProvideConfidenceScores:(id)arg1 classification:(unsigned long long)arg2 classifiedUser:(id)arg3 unknownUserScore:(long long)arg4 duration:(long long)arg5 version:(long long)arg6 thresholdingType:(id)arg7 assetVersion:(id)arg8;	// IMP=0x001000000033d9f6
- (void)speechCapturing:(id)arg1 languageDetectorDidFail:(id)arg2;	// IMP=0x001000000033d99a
- (void)speechCapturing:(id)arg1 didDetectLanguage:(id)arg2 confidenceScores:(id)arg3 isConfident:(_Bool)arg4;	// IMP=0x001000000033d97f
- (void)speechCapturing:(id)arg1 didLoseAudioSessionOwnerOrMediaServices:(id)arg2;	// IMP=0x001000000033d8c1
- (void)speechCapturing:(id)arg1 didInterruptAudioSession:(id)arg2;	// IMP=0x001000000033d803
- (void)speechCapturing:(id)arg1 didSetAudioSessionActive:(_Bool)arg2;	// IMP=0x001000000033d709
- (void)speechCapturing:(id)arg1 willSetAudioSessionActive:(_Bool)arg2;	// IMP=0x001000000033d616
- (void)speechCapturingDidRequestUpdateSiriOutputVolume:(id)arg1;	// IMP=0x001000000033d537
- (void)speechCapturingDidRequestShutdownUI:(id)arg1;	// IMP=0x001000000033d49b
- (void)speechCapturingDidRequestQuickStop:(id)arg1;	// IMP=0x001000000033d3ff
- (void)speechCapturing:(id)arg1 performTwoShotPromptWithType:(long long)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x001000000033d3e7
- (void)speechCapturing:(id)arg1 didDetectEndpointAtTime:(double)arg2;	// IMP=0x001000000033d3d5
- (void)speechCapturing:(id)arg1 didDetectStartpointAtTime:(double)arg2;	// IMP=0x001000000033d3c3
- (void)speechCapturing:(id)arg1 didFinishWritingAudioFile:(id)arg2 error:(id)arg3;	// IMP=0x001000000033d3ab
- (void)speechCapturingDidDelayEndpointForMusic:(id)arg1;	// IMP=0x001000000033d399
- (void)speechCapturingDidDetectMusic:(id)arg1;	// IMP=0x001000000033d387
- (void)speechCapturing:(id)arg1 didReceiveFingerprint:(id)arg2 duration:(double)arg3;	// IMP=0x001000000033d372
- (void)speechCapturingDidRecordPCMAudioData:(id)arg1;	// IMP=0x001000000033d36c
- (void)speechCapturingDidRecordSpeechPackets:(id)arg1 atTimestamp:(double)arg2 totalPacketCount:(long long)arg3;	// IMP=0x001000000033d219
- (void)speechCapturingDidStopRecordingWithError:(id)arg1 endpointMode:(long long)arg2 totalPacketCount:(long long)arg3 endpointerMetrics:(id)arg4;	// IMP=0x001000000033d12e
- (void)speechCapturingWillStopRecordingWithSignpostID:(unsigned long long)arg1;	// IMP=0x001000000033d11c
- (void)speechCapturingWillStopRecording;	// IMP=0x001000000033d105
- (void)speechCapturingDidReceiveLastAudioBufferWithEndpointMode:(long long)arg1 totalPacketCount:(long long)arg2 endpointerMetrics:(id)arg3;	// IMP=0x001000000033cfc9
- (void)speechCapturingDidUpdateAudioDeviceInfo:(id)arg1;	// IMP=0x001000000033cfb7
- (void)speechCapturingDidUpdateRecordingInfo:(id)arg1;	// IMP=0x001000000033cf11
- (void)speechCapturingDidStartRecordingSuccessfully:(_Bool)arg1 error:(id)arg2 withInfo:(id)arg3;	// IMP=0x001000000033bf3c
- (void)_updateCapturingStateWithOptions:(id)arg1;	// IMP=0x001000000033be4f
- (void)_recordingStoppedWithError:(id)arg1 totalPacketCount:(long long)arg2 endpointMode:(long long)arg3 endpointerMetrics:(id)arg4;	// IMP=0x001000000033bb40
- (void)_lastAudioBufferReceivedWithEndpointMode:(long long)arg1 totalPacketCount:(long long)arg2 endpointerMetrics:(id)arg3;	// IMP=0x001000000033b9f5
- (void)_cancelRecordingWithError:(id)arg1 suppressAlert:(_Bool)arg2;	// IMP=0x001000000033b877
- (void)_tellDelegateSpeechWillStopRecordingWithSignpostID:(unsigned long long)arg1;	// IMP=0x001000000033b832
- (void)_tellDelegateDidDetectLanguage:(id)arg1 confidenceScores:(id)arg2 isConfident:(_Bool)arg3;	// IMP=0x001000000033b7b0
- (void)_tellDelegateDidSetAudioSessionActive:(_Bool)arg1;	// IMP=0x001000000033b76d
- (void)_tellDelegateWillSetAudioSessionActive:(_Bool)arg1;	// IMP=0x001000000033b72a
- (void)_tellDelegateShutdownUIWasRequested;	// IMP=0x001000000033b6f0
- (void)_tellDelegateQuickStopWasRequested;	// IMP=0x001000000033b6b6
- (void)_tellDelegateToPerformTwoShotPromptWithType:(long long)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x001000000033b651
- (void)_tellDelegateSpeechEndpointWasDetectedAtTime:(double)arg1;	// IMP=0x001000000033b605
- (void)_tellDelegateSpeechStartpointWasDetectedAtTime:(double)arg1;	// IMP=0x001000000033b5b9
- (void)_tellDelegateAudioFileDidFinish:(id)arg1 error:(id)arg2;	// IMP=0x001000000033b537
- (void)_tellDelegateAboutInputAveragePower:(float)arg1 peak:(float)arg2;	// IMP=0x001000000033b44f
- (void)_tellDelegateEndpointWasDelayedForMusic;	// IMP=0x001000000033b37b
- (void)_tellDelegateMusicWasDetected;	// IMP=0x001000000033b2a7
- (void)_tellDelegateAboutFingerprint:(id)arg1 duration:(double)arg2;	// IMP=0x001000000033b1c2
- (void)_tellDelegateAboutSpeechPackets:(id)arg1 atTimestamp:(double)arg2 count:(long long)arg3;	// IMP=0x001000000033b0cf
- (void)_tellDelegateUpdateAudioInfo:(id)arg1;	// IMP=0x001000000033aff0
- (void)_tellDelegateSpeechStartedWithRecordingInfo:(id)arg1;	// IMP=0x001000000033af11
- (void)_tellDelegateSpeechWillBeginWithTimestamp:(double)arg1 isFromFile:(_Bool)arg2 isAudioPowerUpdateDisabled:(_Bool)arg3;	// IMP=0x001000000033adaf
- (void)_tellDelegateSpeechRecognitionUpdateWillBegin;	// IMP=0x001000000033acd7
- (void)_tellDelegateSpeechShouldPreheatWithRecordingInfo:(id)arg1;	// IMP=0x001000000033abf8
- (void)_tellDelegateSpeechFinished;	// IMP=0x001000000033ab01
- (void)_tellDelegateSpeechReceivedLastAudioBufferWithEndpointMode:(long long)arg1 totalPacketCount:(long long)arg2 endpointerMetrics:(id)arg3;	// IMP=0x001000000033aa07
- (void)_tellDelegateSpeechFailedWithError:(id)arg1;	// IMP=0x001000000033a913
- (void)_tellDelegateSpeechCanceled;	// IMP=0x001000000033a81c
- (void)_cleanUpDelegateInfo;	// IMP=0x001000000033a75f
- (void)resetLocalRecognizer;	// IMP=0x001000000033a714
- (void)cancelLocalRecognitionIfActive;	// IMP=0x001000000033a6c9
- (_Bool)isLocallyRecognizingInDictationMode;	// IMP=0x001000000033a63b
- (_Bool)isLocallyRecognizing;	// IMP=0x001000000033a5ad
- (void)disableDESWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x001000000033a520
- (void)getOfflineDictationStatusIgnoringCache:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x001000000033a49d
- (id)_interactiveLocalSpeechRecognizer;	// IMP=0x001000000033a3a5
- (void)dictationSessionDidComplete;	// IMP=0x001000000033a35a
- (_Bool)_releaseSession;	// IMP=0x0010000000339da9
- (void)_updateRecordRoute:(id)arg1 andDeviceIdentifier:(id)arg2;	// IMP=0x0010000000339bc2
- (void)_updateAudioDeviceInfo:(id)arg1;	// IMP=0x0010000000339a4f
- (void)_updateSpeechState:(int)arg1;	// IMP=0x00100000003398f1
- (id)_currentSpeechCaptureSource;	// IMP=0x001000000033980c
- (id)_speechCompressor;	// IMP=0x001000000033966d
- (id)endpointerModelVersion;	// IMP=0x0010000000339654
- (void)getSpeechRecorderVTSatScore:(CDUnknownBlockType)arg1;	// IMP=0x00100000003395c7
- (id)_speechRecorder;	// IMP=0x0010000000339416
- (void)dealloc;	// IMP=0x0010000000339380
- (id)_initWithInstanceContext:(id)arg1;	// IMP=0x0010000000339001

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
// Preceding property had unknown attributes: ?
// Original attribute string: T@"NSString",?,R,C

@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

