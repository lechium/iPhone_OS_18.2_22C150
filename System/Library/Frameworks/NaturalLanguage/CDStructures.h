//
//     Generated by classdump-c 4.2.0 (64 bit) (iOS port by DreamDevLost, Updated by Kevin Bradley.)(Debug version compiled Dec 27 2024 14:18:54).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct ExecutionStream;

struct ExecutionStreamOperation;

struct LanguageModel {
    struct unique_ptr<language_modeling::LanguageModelImpl, std::default_delete<language_modeling::LanguageModelImpl>> m_impl;
};

struct LanguageModelImpl;

struct LanguageModelSession;

struct ProgramLibrary;

struct _NLConstraintParameters {
    _Bool splitSentences;
    unsigned long long minSplitTokens;
    unsigned long long maxSplitTokens;
    unsigned long long maxTokens;
    unsigned long long maxLabels;
    unsigned long long maxVocabularySize;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct shared_ptr<E5RT::ExecutionStreamOperation> {
    struct ExecutionStreamOperation *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct unique_ptr<E5RT::ExecutionStream, std::default_delete<E5RT::ExecutionStream>> {
    struct __compressed_pair<E5RT::ExecutionStream *, std::default_delete<E5RT::ExecutionStream>> {
        struct ExecutionStream *__value_;
    } __ptr_;
};

struct unique_ptr<E5RT::ProgramLibrary, std::default_delete<E5RT::ProgramLibrary>> {
    struct __compressed_pair<E5RT::ProgramLibrary *, std::default_delete<E5RT::ProgramLibrary>> {
        struct ProgramLibrary *__value_;
    } __ptr_;
};

struct unique_ptr<language_modeling::LanguageModelImpl, std::default_delete<language_modeling::LanguageModelImpl>> {
    struct __compressed_pair<language_modeling::LanguageModelImpl *, std::default_delete<language_modeling::LanguageModelImpl>> {
        struct LanguageModelImpl *__value_;
    } __ptr_;
};

struct unique_ptr<language_modeling::LanguageModelSession, std::default_delete<language_modeling::LanguageModelSession>> {
    struct __compressed_pair<language_modeling::LanguageModelSession *, std::default_delete<language_modeling::LanguageModelSession>> {
        struct LanguageModelSession *__value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<E5RT::BufferObject>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<E5RT::BufferObject>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<E5RT::BufferObject>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<E5RT::BufferObject>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<E5RT::BufferObject>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<E5RT::BufferObject>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<std::string, std::shared_ptr<E5RT::BufferObject>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::shared_ptr<E5RT::BufferObject>>>> {
    struct __hash_table<std::__hash_value_type<std::string, std::shared_ptr<E5RT::BufferObject>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::shared_ptr<E5RT::BufferObject>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::shared_ptr<E5RT::BufferObject>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::shared_ptr<E5RT::BufferObject>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<E5RT::BufferObject>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<E5RT::BufferObject>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<E5RT::BufferObject>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<E5RT::BufferObject>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<E5RT::BufferObject>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::shared_ptr<E5RT::BufferObject>>, std::hash<std::string>, std::equal_to<std::string>>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::shared_ptr<E5RT::BufferObject>>, std::equal_to<std::string>, std::hash<std::string>>> {
            float __value_;
        } __p3_;
    } __table_;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct unique_ptr<E5RT::ProgramLibrary, std::default_delete<E5RT::ProgramLibrary>> {
    struct __compressed_pair<E5RT::ProgramLibrary *, std::default_delete<E5RT::ProgramLibrary>> {
        struct ProgramLibrary *__value_;
    } __ptr_;
} unique_ptr_ac6eeb09;

