//
//     Generated by classdump-c 4.2.0 (64 bit) (iOS port by DreamDevLost, Updated by Kevin Bradley.)(Debug version compiled Dec 27 2024 14:18:54).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class AVAudioEngine, AVAudioFile, AVAudioNode, AVAudioPlayerNode, AVAudioSession, AVAudioSourceNode, AVAudioUnit, AVAudioUnitEQ, NSNumber;
@protocol OS_dispatch_queue, OS_os_transaction;

__attribute__((visibility("hidden")))
@interface AVAudioDeviceTestService : NSObject
{
    struct unique_ptr<PulseTone, std::default_delete<PulseTone>> mPulseToneHandler;	// 8 = 0x8
    _Bool _testServiceSupportedOnHardware;	// 16 = 0x10
    AVAudioEngine *_engine;	// 24 = 0x18
    AVAudioPlayerNode *_player;	// 32 = 0x20
    AVAudioUnitEQ *_inputFilter;	// 40 = 0x28
    AVAudioUnitEQ *_outputFilter;	// 48 = 0x30
    AVAudioUnit *_multichannelMixer;	// 56 = 0x38
    AVAudioSession *_currentSession;	// 64 = 0x40
    AVAudioNode *_nodeToCaptureData;	// 72 = 0x48
    AVAudioFile *_inputTapFile;	// 80 = 0x50
    id _routeChangeObserver;	// 88 = 0x58
    id _interruptionObserver;	// 96 = 0x60
    id _mediaservicesLostObserver;	// 104 = 0x68
    id _mediaservicesResetObserver;	// 112 = 0x70
    id _systemVolumeObserver;	// 120 = 0x78
    long long _extensionHandle;	// 128 = 0x80
    AVAudioSourceNode *_sourceNode;	// 136 = 0x88
    NSObject<OS_dispatch_queue> *_toneQueue;	// 144 = 0x90
    NSNumber *_userVolumeBeforeHearingTest;	// 152 = 0x98
    AVAudioSession *_hearingTestSession;	// 160 = 0xa0
    NSObject<OS_os_transaction> *_transaction;	// 168 = 0xa8
}

- (id).cxx_construct;	// IMP=0x00000000000767af
- (void).cxx_destruct;	// IMP=0x00000000000766bd
@property(retain, nonatomic) NSObject<OS_os_transaction> *transaction; // @synthesize transaction=_transaction;
@property(retain, nonatomic) AVAudioSession *hearingTestSession; // @synthesize hearingTestSession=_hearingTestSession;
@property(retain, nonatomic) NSNumber *userVolumeBeforeHearingTest; // @synthesize userVolumeBeforeHearingTest=_userVolumeBeforeHearingTest;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *toneQueue; // @synthesize toneQueue=_toneQueue;
@property(retain, nonatomic) AVAudioSourceNode *sourceNode; // @synthesize sourceNode=_sourceNode;
@property long long extensionHandle; // @synthesize extensionHandle=_extensionHandle;
@property _Bool testServiceSupportedOnHardware; // @synthesize testServiceSupportedOnHardware=_testServiceSupportedOnHardware;
@property(retain) id systemVolumeObserver; // @synthesize systemVolumeObserver=_systemVolumeObserver;
@property(retain) id mediaservicesResetObserver; // @synthesize mediaservicesResetObserver=_mediaservicesResetObserver;
@property(retain) id mediaservicesLostObserver; // @synthesize mediaservicesLostObserver=_mediaservicesLostObserver;
@property(retain) id interruptionObserver; // @synthesize interruptionObserver=_interruptionObserver;
@property(retain) id routeChangeObserver; // @synthesize routeChangeObserver=_routeChangeObserver;
@property(retain) AVAudioFile *inputTapFile; // @synthesize inputTapFile=_inputTapFile;
@property(retain) AVAudioNode *nodeToCaptureData; // @synthesize nodeToCaptureData=_nodeToCaptureData;
@property(retain) AVAudioSession *currentSession; // @synthesize currentSession=_currentSession;
@property(retain) AVAudioUnit *multichannelMixer; // @synthesize multichannelMixer=_multichannelMixer;
@property(retain) AVAudioUnitEQ *outputFilter; // @synthesize outputFilter=_outputFilter;
@property(retain) AVAudioUnitEQ *inputFilter; // @synthesize inputFilter=_inputFilter;
@property(retain) AVAudioPlayerNode *player; // @synthesize player=_player;
@property(retain) AVAudioEngine *engine; // @synthesize engine=_engine;
- (void)cancel;	// IMP=0x00000000000763cf
- (void)cleanUp;	// IMP=0x00000000000761a4
- (void)removeSystemVolumeObserver;	// IMP=0x000000000007602e
- (void)cleanUpObservers;	// IMP=0x0000000000075b44
- (id)stringForRouteChangeReason:(unsigned long long)arg1;	// IMP=0x0000000000075b25
- (id)stringForInterruptionReason:(unsigned long long)arg1;	// IMP=0x0000000000075b06
- (void)setupObservers:(CDUnknownBlockType)arg1;	// IMP=0x0000000000075378
- (void)configureMultiChannelMixerForOutputChannel:(long long)arg1 totalChannels:(long long)arg2;	// IMP=0x0000000000074ef5
- (void)setupMultiChannelMixerForOutputChannel:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000000000749bd
- (void)dealloc;	// IMP=0x00000000000746ec
- (id)convertBufferFor:(id)arg1 sourceBuffer:(id)arg2;	// IMP=0x00000000000740e8
- (void)setupAudioEngineFor:(id)arg1 sourceNodeBlock:(CDUnknownBlockType)arg2;	// IMP=0x0000000000074037
- (_Bool)createAudioEngineAndPulseToneHandlerFor:(id)arg1;	// IMP=0x0000000000073a6b
- (void)setupAudioSessionFor:(id)arg1 playbackOnly:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x0000000000072bf4
- (void)checkSequenceValidity:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000000000727b8
- (void)resetVolume:(float)arg1;	// IMP=0x00000000000725a1
- (void)setupVolumeObserverForVolume:(float)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000000072210
- (_Bool)isPlaybackForTestEnabled;	// IMP=0x00000000000721d0
- (_Bool)isMixerOutputEnabled;	// IMP=0x0000000000072190
- (void)stopAudioSession:(CDUnknownBlockType)arg1;	// IMP=0x00000000000720c9
- (void)setupAudioSessionForHearingTestWithStatus:(CDUnknownBlockType)arg1 success:(CDUnknownBlockType)arg2;	// IMP=0x0000000000071fcd
- (void)setupAudioSessionForHearingTest:(CDUnknownBlockType)arg1;	// IMP=0x0000000000071f06
- (void)stopRecording:(CDUnknownBlockType)arg1;	// IMP=0x000000000007177e
- (void)startRecording:(id)arg1 filePath:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x0000000000070fa4
- (void)stopPlayback;	// IMP=0x0000000000070d9b
- (void)playback:(id)arg1 filePath:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000006f630
- (void)playbackTone:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000006f534
- (double)calculateCrossCorrelationPeakRelativeToSource:(id)arg1 capture:(id)arg2;	// IMP=0x000000000006f091
- (void)startWithSequence:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000006b248
- (_Bool)isOutputRouteBluetooth:(id)arg1 session:(id)arg2;	// IMP=0x000000000006b14b
- (void)passExtensionToken:(id)arg1;	// IMP=0x000000000006aee0
- (void)configureDataSources:(id)arg1 session:(id)arg2;	// IMP=0x000000000006a407
- (_Bool)setVolume:(id)arg1;	// IMP=0x000000000006a279
- (_Bool)setVolume:(id)arg1 session:(id)arg2;	// IMP=0x0000000000069ef4
- (void)createAudioEngineAndProcessingChain:(id)arg1 session:(id)arg2 sourceNodeBlock:(CDUnknownBlockType)arg3;	// IMP=0x0000000000067ddf
- (id)init;	// IMP=0x0000000000067ca5

@end

