//
//     Generated by classdump-c 4.2.0 (64 bit) (iOS port by DreamDevLost, Updated by Kevin Bradley.)(Debug version compiled Dec 27 2024 14:18:54).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class AVAudioFormat, MISSING_TYPE, NSCache, PHASESpatialPipeline;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AABB {
    struct Vector3<float> _field1;
    struct Vector3<float> _field2;
};

struct AcousticAbsorptionMaterial;

struct AcousticScatteringMaterial;

struct AcousticSoundReductionMaterial;

struct Allocator {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    _Bool _field3;
};

struct AssetService {
    CDUnknownFunctionPointerType *_field1;
};

struct AttributeTable {
    struct SharedPtr<re::CachedVertexFetchFunction> _field1;
    struct AttributeTable *_field2;
    unsigned long long _field3;
    struct FixedArray<re::VertexBufferFormat> _field4;
    struct BufferTable _field5;
};

struct AudioComponentDescription {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
};

struct AudioEngineRunnableManager;

struct AudioFileAssetReader {
    struct SeekableInputStream *seekableStream;
    _Bool ownedStream;
    struct SeekableInputStreamBufferedReader *backingData;
    struct OpaqueAudioFileID *audioFile;
    struct OpaqueExtAudioFile *audioFileRef;
    long long fileLength;
    AVAudioFormat *format;
};

struct AudioSceneService {
    CDUnknownFunctionPointerType *_field1;
};

struct AudioService {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct BlendShapeModelBuilder {
    struct Device _field1;
    struct DeformationModelData *_field2;
};

struct BucketArray<NS::SharedPtr<MTL::Buffer>, 8UL> {
    struct DynamicOverflowArray<NS::SharedPtr<MTL::Buffer>*, 2UL> _field1;
    unsigned long long _field2;
    unsigned int _field3;
};

struct Buffer;

struct BufferTable {
    struct HashBrown<re::WeakStringID, unsigned char, re::Hash<WeakStringID>, re::EqualTo<re::WeakStringID>, re::Hash<uint8_t>, false> _field1;
    struct DynamicArray<re::BufferView> _field2;
    struct DynamicArray<unsigned int> _field3;
    struct BucketArray<NS::SharedPtr<MTL::Buffer>, 8UL> _field4;
    struct DynamicArray<re::FixedArray<unsigned long>> _field5;
    struct DynamicArray<unsigned long> _field6;
    unsigned int _field7;
};

struct BufferView;

struct CGSize {
    double _field1;
    double _field2;
};

struct CachedVertexFetchFunction;

struct Connection {
    id _field1;
};

struct DataArrayHandle<re::MeshModel> {
    struct ElementPointer _field1;
    unsigned int :24;
    unsigned int :8;
};

struct DeformationModelData {
    struct unique_ptr<void, std::function<void (void *)>> _field1[18];
};

struct Device {
    id _field1;
};

struct DynamicArray<re::AcousticAbsorptionMaterial> {
    struct Allocator *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned int _field4;
    struct AcousticAbsorptionMaterial *_field5;
};

struct DynamicArray<re::AcousticScatteringMaterial> {
    struct Allocator *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned int _field4;
    struct AcousticScatteringMaterial *_field5;
};

struct DynamicArray<re::AcousticSoundReductionMaterial> {
    struct Allocator *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned int _field4;
    struct AcousticSoundReductionMaterial *_field5;
};

struct DynamicArray<re::BufferView> {
    struct Allocator *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned int _field4;
    struct BufferView *_field5;
};

struct DynamicArray<re::FixedArray<unsigned long>> {
    struct Allocator *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned int _field4;
    void *_field5;
};

struct DynamicArray<re::MeshModel> {
    struct Allocator *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned int _field4;
    struct MeshModel *_field5;
};

struct DynamicArray<re::MeshResourceDefinition::Level> {
    struct Allocator *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned int _field4;
    struct Level *_field5;
};

struct DynamicArray<re::audio::PHASEOccluderData> {
    struct Allocator *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned int _field4;
    struct PHASEOccluderData *_field5;
};

struct DynamicArray<re::audio::PHASEOccluderUpdateData> {
    struct Allocator *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned int _field4;
    struct PHASEOccluderUpdateData *_field5;
};

struct DynamicArray<unsigned int> {
    struct Allocator *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned int _field4;
    unsigned int *_field5;
};

struct DynamicArray<unsigned long> {
    struct Allocator *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned int _field4;
    unsigned long long *_field5;
};

struct DynamicOverflowArray<NS::SharedPtr<MTL::Buffer>*, 2UL> {
    struct Allocator *_field1;
    unsigned long long _field2;
    union {
        struct {
            unsigned int :1;
            unsigned int :31;
        } _field1;
        unsigned int _field2;
    } _field3;
    union {
        void *_field1[2];
        struct {
            unsigned long long _field1;
            void **_field2;
        } _field2;
    } _field4;
};

struct EdgeInsets {
    float top;
    float left;
    float bottom;
    float right;
};

struct ElementPointer {
    unsigned short _field1;
    unsigned short _field2;
};

struct EntryWithHash;

struct EntryWithoutHash;

struct FixedArray<int> {
    struct Allocator *_field1;
    unsigned long long _field2;
    int *_field3;
};

struct FixedArray<re::GenericSRT<float>> {
    struct Allocator *_field1;
    unsigned long long _field2;
    void *_field3;
};

struct FixedArray<re::Matrix4x4<float>> {
    struct Allocator *_field1;
    unsigned long long _field2;
    void *_field3;
};

struct FixedArray<re::MeshLodLevelInfo> {
    struct Allocator *_field1;
    unsigned long long _field2;
    struct MeshLodLevelInfo *_field3;
};

struct FixedArray<re::MeshPart> {
    struct Allocator *_field1;
    unsigned long long _field2;
    struct MeshPart *_field3;
};

struct FixedArray<re::SharedPtr<re::MaterialParameterBlock>> {
    struct Allocator *_field1;
    unsigned long long _field2;
    void *_field3;
};

struct FixedArray<re::StringID> {
    struct Allocator *_field1;
    unsigned long long _field2;
    struct StringID *_field3;
};

struct FixedArray<re::VertexBufferFormat> {
    struct Allocator *_field1;
    unsigned long long _field2;
    struct VertexBufferFormat *_field3;
};

struct FixedArray<unsigned int> {
    struct Allocator *_field1;
    unsigned long long _field2;
    unsigned int *_field3;
};

struct FixedInlineArray<NS::SharedPtr<MTL::Buffer>, 8UL> {
    struct SharedPtr<MTL::Buffer> _field1[8];
};

struct FixedInlineArray<unsigned char, 24UL> {
    unsigned char _field1[24];
};

struct FixedInlineArray<unsigned long, 8UL> {
    unsigned long long _field1[8];
};

struct HashBrown<re::WeakStringID, unsigned char, re::Hash<WeakStringID>, re::EqualTo<re::WeakStringID>, re::Hash<uint8_t>, false> {
    void *_field1;
    void *_field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    unsigned long long _field6;
    unsigned long long _field7;
    struct Allocator *_field8;
};

struct HashTable<unsigned long long, re::SharedPtr<re::SharedObject>, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false> {
    struct Allocator *m_allocator;
    unsigned int *m_buckets;
    union Entry m_entries;
    unsigned int m_capacity;
    unsigned int m_count;
    unsigned int m_touchedEntries;
    unsigned int m_freeList;
    unsigned int m_version;
};

struct Level;

struct Matrix4x4<float> {
    union {
        struct {
            float _field1;
            float _field2;
            float _field3;
            float _field4;
            float _field5;
            float _field6;
            float _field7;
            float _field8;
            float _field9;
            float _field10;
            float _field11;
            float _field12;
            float _field13;
            float _field14;
            float _field15;
            float _field16;
        } _field1;
        struct float4x4 _field2;
        struct {
            struct Vector4<float> _field1;
            struct Vector4<float> _field2;
            struct Vector4<float> _field3;
            struct Vector4<float> _field4;
        } _field3;
        struct Vector4<float> _field4[4];
        float _field5[4][4];
        float _field6[16];
    } _field1;
};

struct MeshAssetPart;

struct MeshAssetSkeleton {
    struct StringID _field1;
    struct FixedArray<re::StringID> _field2;
    struct FixedArray<unsigned int> _field3;
    struct FixedArray<re::GenericSRT<float>> _field4;
    struct FixedArray<re::Matrix4x4<float>> _field5;
};

struct MeshCollection {
    struct DynamicArray<re::MeshModel> _field1;
};

struct MeshInstance {
    struct StringID _field1;
    struct DataArrayHandle<re::MeshModel> _field2;
    struct MeshLodSelectOptions _field3;
    Matrix4x4_12f7bfe5 _field4;
    struct FixedArray<int> _field5;
    struct FixedArray<re::SharedPtr<re::MaterialParameterBlock>> _field6;
};

struct MeshLodLevelInfo {
    float _field1;
    float _field2;
    unsigned int _field3;
};

struct MeshLodSelectOptions {
    unsigned char strategy;
    float bias;
};

struct MeshModel {
    struct StringID _field1;
    struct AABB _field2;
    struct FixedArray<re::MeshPart> _field3;
    struct FixedArray<re::MeshLodLevelInfo> _field4;
    struct DeformationModelData _field5;
};

struct MeshPart {
    struct AttributeTable _field1;
    struct FixedArray<re::StringID> _field2;
    Matrix4x4_12f7bfe5 _field3;
    struct AABB _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned char _field7;
    unsigned short _field8;
    struct FixedInlineArray<unsigned char, 24UL> _field9;
    struct StringID _field10;
    unsigned long long _field11;
    unsigned int _field12;
    unsigned int _field13;
    unsigned char _field14;
    int _field15;
    struct RenderFlags _field16;
};

struct MeshStats {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    int _field10;
    int _field11;
    int _field12;
    int _field13;
    int _field14;
    int _field15;
    int _field16;
    int _field17;
    int _field18;
    int _field19;
    int _field20;
    int _field21;
    int _field22;
    int _field23;
    int *_field24;
    int *_field25;
    int *_field26;
    unsigned char _field27;
};

struct OpaqueAudioFileID;

struct OpaqueExtAudioFile;

struct PHASEOccluderData {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    id _field4;
    struct optional<double> _field5;
};

struct PHASEOccluderUpdateData {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    id _field5;
    struct optional<double> _field6;
};

struct PatchHandler {
    struct Allocator *_field1;
    struct PatchHandlerImpl *_field2;
};

struct PatchHandlerImpl;

struct REMeshLodSelectOptions {
    struct MeshLodSelectOptions options;
};

struct REPHASEAudioScene;

struct REPHASEEntity;

struct REPHASEMaterialCache {
    float meshConfidenceThreshold;
    NSCache *cache;
};

struct REPHASESoundEventCommandState;

struct REPHASESoundPrepareState;

struct REPHASESpatialMixerDefinitionCache {
    int mixerDefinitionCounter;
    NSCache *cache;
    PHASESpatialPipeline *spatialPipeline;
};

struct RESoundEventPreparingData {
    long long _field1;
    unsigned long long _field2;
};

struct RenderCommandEncoder {
    id m_object;
    struct RenderEncoderImpCache *m_impCache;
};

struct RenderEncoderImpCache;

struct RenderFlags {
    unsigned int _field1;
};

struct RenderPipelineDescriptorData {
    unsigned int _field1;
    int _field2[8];
    int _field3;
    int _field4;
};

struct RenderTargetInfo {
    struct RenderPipelineDescriptorData _field1;
    _Bool _field2;
    unsigned int _field3;
};

struct STSGlobalState {
    unsigned long long _field1;
    CDStruct_14d5dc5e _field2;
};

struct SeekableInputStream {
    CDUnknownFunctionPointerType *_field1;
};

struct SeekableInputStreamBufferedReader;

struct SharedPtr<MTL::Buffer> {
    struct Buffer *_field1;
};

struct SharedPtr<re::CachedVertexFetchFunction> {
    struct CachedVertexFetchFunction *_field1;
};

struct Slice<re::MeshAssetPart> {
    struct MeshAssetPart *_field1;
    unsigned long long _field2;
};

struct StencilInfo {
    struct StencilStateInfo state;
    unsigned char referenceValue;
};

struct StencilStateInfo {
    struct StencilTestInfo frontFace;
    struct StencilTestInfo backFace;
};

struct StencilTestInfo {
    _Bool enabled;
    unsigned char readMask;
    unsigned char writeMask;
    unsigned char compareFunc;
    unsigned char failOp;
    unsigned char depthFailOp;
    unsigned char depthStencilPassOp;
    char _padding;
};

struct StringID {
    struct {
        unsigned int :1;
        unsigned int :63;
    } _field1;
    char *_field2;
};

struct TextureSource;

struct TextureTableCollection {
    union {
        struct {
            struct TextureSource *_field1;
            struct TextureSource *_field2;
            struct TextureSource *_field3;
            struct TextureSource *_field4;
            struct TextureSource *_field5;
            struct TextureSource *_field6;
            struct TextureSource *_field7;
            struct TextureSource *_field8;
            struct TextureSource *_field9;
            struct TextureSource *_field10;
            struct TextureSource *_field11;
            struct TextureSource *_field12;
        } _field1;
        struct TextureSource *_field2[12];
    } _field1;
};

struct UnfairLock {
    struct os_unfair_lock_s m_lock;
};

struct Vector3<float> {
    union {
        struct {
            float _field1;
            float _field2;
            float _field3;
        } _field1;
        float _field2[3];
    } _field1;
};

struct Vector4<float> {
    union {
        struct {
            float _field1;
            float _field2;
            float _field3;
            float _field4;
        } _field1;
        float _field2[4];
    } _field1;
};

struct VertexAttributeDescriptor {
    char *_field1;
    unsigned char _field2;
    unsigned char _field3;
    int _field4;
};

struct VertexBufferFormat;

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __shared_weak_count;

struct atomic<REAudioPlaybackState> {
    struct __cxx_atomic_impl<REAudioPlaybackState, std::__cxx_atomic_base_impl<REAudioPlaybackState>> {
        _Atomic unsigned long long __a_value;
    } __a_;
};

struct atomic<bool> {
    struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> {
        _Atomic _Bool __a_value;
    } __a_;
};

struct atomic<double> {
    struct __cxx_atomic_impl<double, std::__cxx_atomic_base_impl<double>> {
        _Atomic double __a_value;
    } __a_;
};

struct atomic<unsigned long long> {
    struct __cxx_atomic_impl<unsigned long long, std::__cxx_atomic_base_impl<unsigned long long>> {
        _Atomic unsigned long long __a_value;
    } __a_;
};

struct deque<REPHASESoundEventCommandState, std::allocator<REPHASESoundEventCommandState>> {
    struct __split_buffer<REPHASESoundEventCommandState *, std::allocator<REPHASESoundEventCommandState *>> {
        struct REPHASESoundEventCommandState **__first_;
        struct REPHASESoundEventCommandState **__begin_;
        struct REPHASESoundEventCommandState **__end_;
        struct __compressed_pair<REPHASESoundEventCommandState **, std::allocator<REPHASESoundEventCommandState *>> {
            struct REPHASESoundEventCommandState **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<REPHASESoundEventCommandState>> {
        unsigned long long __value_;
    } __size_;
};

struct float4x4 {
    MISSING_TYPE *_field1[4];
};

struct function<void (void *)> {
    struct __value_func<void (void *)> {
        struct type _field1;
        void *_field2;
    } _field1;
};

struct optional<double> {
    union {
        char __null_state_;
        double __val_;
    } ;
    _Bool __engaged_;
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct queue<REPHASESoundEventCommandState, std::deque<REPHASESoundEventCommandState>> {
    struct deque<REPHASESoundEventCommandState, std::allocator<REPHASESoundEventCommandState>> c;
};

struct recursive_mutex {
    struct _opaque_pthread_mutex_t {
        long long __sig;
        char __opaque[56];
    } __m_;
};

struct shared_ptr<re::AudioEngineRunnableManager> {
    struct AudioEngineRunnableManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<re::audio::REPHASEAudioScene> {
    struct REPHASEAudioScene *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<re::audio::REPHASEEntity> {
    struct REPHASEEntity *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<re::audio::REPHASESoundPrepareState> {
    struct REPHASESoundPrepareState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct type {
    unsigned char _field1[32];
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<OpaqueCMClock *, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<OpaqueCMClock *, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<OpaqueCMClock *, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<OpaqueCMClock *, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<OpaqueCMClock *, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<OpaqueCMClock *, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>*>>> {
        void **_field1;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<void, std::function<void (void *)>> {
    struct __compressed_pair<void *, std::function<void (void *)>> {
        void *_field1;
        struct function<void (void *)> _field2;
    } _field1;
};

struct unordered_map<unsigned long long, PhaseShapeAndMesh, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, PhaseShapeAndMesh>>> {
    struct __hash_table<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, REPHASESoundAsset, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, REPHASESoundAsset>>> {
    struct __hash_table<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundAsset>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundAsset>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, REPHASESoundAsset>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundAsset>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundAsset>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundAsset>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, REPHASESoundEvent *, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, REPHASESoundEvent *>>> {
    struct __hash_table<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, REPHASESoundEvent *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, RESoundEventPreparingData, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, RESoundEventPreparingData>>> {
    struct __hash_table<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, RESoundEventPreparingData>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>>> {
    struct __hash_table<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::shared_ptr<re::audio::REPHASEAudioScene>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_set<OpaqueCMClock *, std::hash<OpaqueCMClock *>, std::equal_to<OpaqueCMClock *>, std::allocator<OpaqueCMClock *>> {
    struct __hash_table<OpaqueCMClock *, std::hash<OpaqueCMClock *>, std::equal_to<OpaqueCMClock *>, std::allocator<OpaqueCMClock *>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<OpaqueCMClock *, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<OpaqueCMClock *, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<OpaqueCMClock *, void *>*>, std::allocator<std::__hash_node<OpaqueCMClock *, void *>>> {
            struct __hash_node_base<std::__hash_node<OpaqueCMClock *, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::hash<OpaqueCMClock *>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::equal_to<OpaqueCMClock *>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_set<unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<unsigned long long>> {
    struct __hash_table<unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<unsigned long long>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>*>>> _field1;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>, std::allocator<std::__hash_node<unsigned long long, void *>>> {
            struct __hash_node_base<std::__hash_node<unsigned long long, void *>*> {
                void *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::hash<unsigned long long>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::equal_to<unsigned long long>> {
            float _field1;
        } _field4;
    } _field1;
};

struct vector<float __attribute__((ext_vector_type(3))), std::allocator<float __attribute__((ext_vector_type(3)))>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<float * __attribute__((ext_vector_type(3))), std::allocator<float __attribute__((ext_vector_type(3)))>> {
        void *__value_;
    } __end_cap_;
};

struct vector<simd_float4x4, std::allocator<simd_float4x4>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<simd_float4x4 *, std::allocator<simd_float4x4>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
};

struct vector<simd_quatf, std::allocator<simd_quatf>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<simd_quatf *, std::allocator<simd_quatf>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
} CDStruct_c0454aff;

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
} CDStruct_33dcf794;

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
} CDStruct_14f26992;

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    MISSING_TYPE *columns[4];
} CDStruct_14d5dc5e;

typedef struct {
    unsigned int val[8];
} CDStruct_4c969caf;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
} CDStruct_8727d297;

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

typedef struct CDStruct_183601bc;

// Template types
typedef struct DynamicArray<re::AcousticAbsorptionMaterial> {
    struct Allocator *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned int _field4;
    struct AcousticAbsorptionMaterial *_field5;
} DynamicArray_6b16cae3;

typedef struct DynamicArray<re::AcousticScatteringMaterial> {
    struct Allocator *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned int _field4;
    struct AcousticScatteringMaterial *_field5;
} DynamicArray_0b120cb5;

typedef struct DynamicArray<re::AcousticSoundReductionMaterial> {
    struct Allocator *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned int _field4;
    struct AcousticSoundReductionMaterial *_field5;
} DynamicArray_df95d833;

typedef struct DynamicArray<re::MeshResourceDefinition::Level> {
    struct Allocator *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned int _field4;
    struct Level *_field5;
} DynamicArray_6717b1a4;

typedef struct DynamicArray<re::audio::PHASEOccluderData> {
    struct Allocator *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned int _field4;
    struct PHASEOccluderData *_field5;
} DynamicArray_799408e4;

typedef struct DynamicArray<re::audio::PHASEOccluderUpdateData> {
    struct Allocator *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned int _field4;
    struct PHASEOccluderUpdateData *_field5;
} DynamicArray_b9ce0c9c;

typedef struct FixedInlineArray<NS::SharedPtr<MTL::Buffer>, 8UL> {
    struct SharedPtr<MTL::Buffer> _field1[8];
} FixedInlineArray_09fae5e8;

typedef struct FixedInlineArray<unsigned long, 8UL> {
    unsigned long long _field1[8];
} FixedInlineArray_6014624d;

typedef struct HashTable<unsigned long long, re::SharedPtr<re::SharedObject>, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false> {
    struct Allocator *m_allocator;
    unsigned int *m_buckets;
    union Entry m_entries;
    unsigned int m_capacity;
    unsigned int m_count;
    unsigned int m_touchedEntries;
    unsigned int m_freeList;
    unsigned int m_version;
} HashTable_b0c6f559;

typedef struct Matrix4x4<float> {
    union {
        struct {
            float _field1;
            float _field2;
            float _field3;
            float _field4;
            float _field5;
            float _field6;
            float _field7;
            float _field8;
            float _field9;
            float _field10;
            float _field11;
            float _field12;
            float _field13;
            float _field14;
            float _field15;
            float _field16;
        } _field1;
        struct float4x4 _field2;
        struct {
            struct Vector4<float> _field1;
            struct Vector4<float> _field2;
            struct Vector4<float> _field3;
            struct Vector4<float> _field4;
        } _field3;
        struct Vector4<float> _field4[4];
        float _field5[4][4];
        float _field6[16];
    } _field1;
} Matrix4x4_12f7bfe5;

typedef struct Slice<re::MeshAssetPart> {
    struct MeshAssetPart *_field1;
    unsigned long long _field2;
} Slice_7f1aa05d;

typedef struct shared_ptr<re::AudioEngineRunnableManager> {
    struct AudioEngineRunnableManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_50bead45;

typedef struct shared_ptr<re::audio::REPHASEAudioScene> {
    struct REPHASEAudioScene *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_347937b1;

typedef struct shared_ptr<re::audio::REPHASEEntity> {
    struct REPHASEEntity *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_6586e3f4;

typedef struct shared_ptr<re::audio::REPHASESoundPrepareState> {
    struct REPHASESoundPrepareState *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_a4f68b3a;

typedef struct unordered_map<unsigned long long, PhaseShapeAndMesh, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, PhaseShapeAndMesh>>> {
    struct __hash_table<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, PhaseShapeAndMesh>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> {
            float __value_;
        } __p3_;
    } __table_;
} unordered_map_cc982a0d;

typedef struct unordered_set<unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<unsigned long long>> {
    struct __hash_table<unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<unsigned long long>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>*>>> _field1;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>, std::allocator<std::__hash_node<unsigned long long, void *>>> {
            struct __hash_node_base<std::__hash_node<unsigned long long, void *>*> {
                void *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::hash<unsigned long long>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::equal_to<unsigned long long>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_set_ed874b88;

#pragma mark Named Unions

union Entry {
    struct EntryWithoutHash *withoutHash;
    struct EntryWithHash *withHash;
};

