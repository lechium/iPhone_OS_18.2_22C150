//
//     Generated by classdump-c 4.2.0 (64 bit) (iOS port by DreamDevLost, Updated by Kevin Bradley.)(Debug version compiled Dec 27 2024 14:18:54).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSString;

@interface CUIThemeFacet : NSObject
{
    struct _renditionkeytoken *_renditionKeyList;	// 8 = 0x8
    unsigned long long _themeIndex;	// 16 = 0x10
    long long _renditionType;	// 24 = 0x18
    struct CGSize _thumbnailSize;	// 32 = 0x20
    struct CGPoint _hotSpot;	// 48 = 0x30
    int _isTintable;	// 64 = 0x40
    struct {
        unsigned int hasCheckedButtonGlyph:1;
        unsigned int isButtonGlyph:1;
        unsigned int reserved:14;
    } _fFlags;	// 68 = 0x44
}

+ (_Bool)assetExistsForRenditionKey:(id)arg1 fromTheme:(unsigned long long)arg2;	// IMP=0x001000000005a6f4
+ (id)cursorFacetWithName:(id)arg1 fromTheme:(unsigned long long)arg2;	// IMP=0x001000000005a267
+ (id)_facetWithKeyList:(const struct _renditionkeytoken *)arg1 andRenditionKeyClass:(Class)arg2 orRenditionKey:(id)arg3 fromTheme:(unsigned long long)arg4;	// IMP=0x0010000000059fa9
+ (id)facetWithRenditionKey:(id)arg1 fromTheme:(unsigned long long)arg2;	// IMP=0x0010000000059f8d
+ (id)facetWithElement:(long long)arg1 part:(long long)arg2 dimension1:(long long)arg3 dimension2:(long long)arg4 fromTheme:(unsigned long long)arg5;	// IMP=0x0010000000059eab
+ (id)facetWithElement:(long long)arg1 part:(long long)arg2 fromTheme:(unsigned long long)arg3;	// IMP=0x0010000000059e86
+ (id)_bundleIdentifierForThemeRef:(unsigned long long)arg1;	// IMP=0x0010000000059cf7
+ (void)themeUnregisterThemeRef:(unsigned long long)arg1;	// IMP=0x0010000000059abe
+ (unsigned long long)themeWithBytes:(const void *)arg1 length:(unsigned long long)arg2 error:(id *)arg3;	// IMP=0x00100000000598d0
+ (unsigned long long)themeWithContentsOfURL:(id)arg1 error:(id *)arg2;	// IMP=0x001000000005967a
+ (unsigned long long)themeForBundleIdentifier:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000059660
+ (unsigned long long)themeNamed:(id)arg1 forBundleIdentifier:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000059480
+ (void)initialize;	// IMP=0x0010000000059444
+ (id)_themeStoreForThemeIndex:(unsigned long long)arg1;	// IMP=0x00100000000588c1
+ (void)_invalidateArtworkCaches;	// IMP=0x001000000005889e
- (id)maskWithSize:(struct CGSize)arg1 keyAdjustment:(id)arg2;	// IMP=0x000000000005e870
- (id)highlightWithSize:(struct CGSize)arg1 keyAdjustment:(id)arg2;	// IMP=0x000000000005e7a4
- (id)imageWithSize:(struct CGSize)arg1 keyAdjustment:(id)arg2;	// IMP=0x000000000005e6fd
- (id)imageForSlice:(long long)arg1 withKeyAdjustment:(id)arg2;	// IMP=0x000000000005e618
- (id)maskForSlice:(long long)arg1 withKeyAdjustment:(id)arg2;	// IMP=0x000000000005e533
@property(readonly, copy) NSString *description;
- (long long)_sliceIndexForSlice:(long long)arg1 ofRendition:(id)arg2;	// IMP=0x000000000005e46d
- (void)_applyFixedAttributesToKey:(id)arg1;	// IMP=0x000000000005e451
- (struct CGSize)topLeftCapSize;	// IMP=0x000000000005e3ff
- (struct CGSize)thumbnailSize;	// IMP=0x000000000005e3af
- (id)thumbnail;	// IMP=0x000000000005e2c7
- (id)displayName;	// IMP=0x000000000005e251
- (id)properties;	// IMP=0x000000000005e226
- (_Bool)isTintable;	// IMP=0x000000000005e1e7
- (long long)renditionType;	// IMP=0x000000000005e1ad
- (id)renditionKey;	// IMP=0x000000000005e176
- (id)themeRendition;	// IMP=0x000000000005e118
- (unsigned long long)themeIndex;	// IMP=0x000000000005e10e
- (void)_setThemeIndex:(unsigned long long)arg1;	// IMP=0x000000000005e104
- (id)gradientWithKeyAdjustment:(id)arg1 angle:(double *)arg2 style:(unsigned long long *)arg3;	// IMP=0x000000000005dff6
- (struct CGSize)sizeForSegmentOfType:(int)arg1;	// IMP=0x000000000005de8b
- (struct CGSize)imageSize;	// IMP=0x000000000005ddac
- (id)blendModeAsCAFilterString;	// IMP=0x000000000005dd98
- (id)blendModeAsCAFilterStringWithKeyAjustment:(id)arg1;	// IMP=0x000000000005dc1e
- (int)blendMode;	// IMP=0x000000000005dc0a
- (int)blendModeWithKeyAdjustment:(id)arg1;	// IMP=0x000000000005db6d
- (double)alpha;	// IMP=0x000000000005db59
- (double)alphaWithKeyAdjustment:(id)arg1;	// IMP=0x000000000005dabc
- (id)image;	// IMP=0x000000000005daa8
- (id)imageForSliceIndex:(long long)arg1;	// IMP=0x000000000005da5b
- (id)imageForState:(long long)arg1 value:(long long)arg2 size:(unsigned long long)arg3;	// IMP=0x000000000005d980
- (id)imageForState:(long long)arg1 value:(long long)arg2;	// IMP=0x000000000005d93b
- (_Bool)isValidButtonImageSource;	// IMP=0x000000000005d913
- (_Bool)hasValueSlices;	// IMP=0x000000000005d727
- (id)imageForState:(long long)arg1 withValue:(long long)arg2;	// IMP=0x000000000005d715
- (id)imageForState:(long long)arg1;	// IMP=0x000000000005d6e0
- (id)renditionSliceInformationForRect:(struct CGRect)arg1 keyAdjustment:(id)arg2;	// IMP=0x000000000005d5df
- (id)renditionMetricsWithKeyAdjustment:(id)arg1;	// IMP=0x000000000005d545
- (void)_drawSlice:(long long)arg1 inFrame:(struct CGRect)arg2 withKeyAdjustment:(id)arg3 context:(struct CGContext *)arg4;	// IMP=0x000000000005d458
- (id)renditionForSpecificKeyWrapper:(id)arg1;	// IMP=0x000000000005d0e4
- (void)drawPulseInFrame:(struct CGRect)arg1 pulseValue:(double)arg2 isFocused:(int)arg3 focusRingColor:(struct CGColor *)arg4 keyAdjustment:(id)arg5 context:(struct CGContext *)arg6;	// IMP=0x000000000005cfd7
- (void)drawMaskInFrame:(struct CGRect)arg1 alpha:(double)arg2 operation:(int)arg3 isFocused:(int)arg4 focusRingColor:(struct CGColor *)arg5 keyAdjustment:(id)arg6 context:(struct CGContext *)arg7;	// IMP=0x000000000005cea9
- (void)drawMaskInFrame:(struct CGRect)arg1 alpha:(double)arg2 isFocused:(int)arg3 focusRingColor:(struct CGColor *)arg4 keyAdjustment:(id)arg5 context:(struct CGContext *)arg6;	// IMP=0x000000000005ce5b
- (void)drawHighlightInFrame:(struct CGRect)arg1 alpha:(double)arg2 operation:(int)arg3 keyAdjustment:(id)arg4 context:(struct CGContext *)arg5;	// IMP=0x000000000005cd37
- (void)drawHighlightInFrame:(struct CGRect)arg1 alpha:(double)arg2 keyAdjustment:(id)arg3 context:(struct CGContext *)arg4;	// IMP=0x000000000005cd0d
- (void)drawInFrame:(struct CGRect)arg1 alpha:(double)arg2 operation:(int)arg3 isFocused:(int)arg4 focusRingColor:(struct CGColor *)arg5 keyAdjustment:(id)arg6 context:(struct CGContext *)arg7;	// IMP=0x000000000005cbf2
- (void)drawInFrame:(struct CGRect)arg1 alpha:(double)arg2 isFocused:(int)arg3 focusRingColor:(struct CGColor *)arg4 keyAdjustment:(id)arg5 context:(struct CGContext *)arg6;	// IMP=0x000000000005cba4
- (void)drawGradientInFrame:(struct CGRect)arg1 angle:(double)arg2 alpha:(double)arg3 operation:(int)arg4 isFocused:(int)arg5 focusRingColor:(struct CGColor *)arg6 keyAdjustment:(id)arg7 context:(struct CGContext *)arg8 effects:(id)arg9;	// IMP=0x000000000005c83c
- (void)drawHighlightInFrame:(struct CGRect)arg1 alpha:(double)arg2 operation:(int)arg3 owner:(id)arg4 userInfo:(id)arg5 context:(struct CGContext *)arg6;	// IMP=0x000000000005c725
- (void)drawInFrame:(struct CGRect)arg1 alpha:(double)arg2 operation:(int)arg3 owner:(id)arg4 userInfo:(id)arg5 context:(struct CGContext *)arg6;	// IMP=0x000000000005c632
- (void)drawPulseInFrame:(struct CGRect)arg1 pulseValue:(double)arg2 owner:(id)arg3 userInfo:(id)arg4 context:(struct CGContext *)arg5;	// IMP=0x000000000005c53a
- (void)drawMaskInFrame:(struct CGRect)arg1 alpha:(double)arg2 owner:(id)arg3 userInfo:(id)arg4 context:(struct CGContext *)arg5;	// IMP=0x000000000005c418
- (void)drawHighlightInFrame:(struct CGRect)arg1 alpha:(double)arg2 owner:(id)arg3 userInfo:(id)arg4 context:(struct CGContext *)arg5;	// IMP=0x000000000005c3e8
- (void)drawInFrame:(struct CGRect)arg1 alpha:(double)arg2 owner:(id)arg3 userInfo:(id)arg4 context:(struct CGContext *)arg5;	// IMP=0x000000000005c3b8
- (_Bool)hitTestAtPoint:(struct CGPoint)arg1 inFrame:(struct CGRect)arg2 owner:(id)arg3 userInfo:(id)arg4;	// IMP=0x000000000005c203
- (_Bool)_canGetRenditionForKey:(id)arg1 withDrawingLayer:(long long)arg2;	// IMP=0x000000000005c194
- (void)drawMaskInFrame:(struct CGRect)arg1 owner:(id)arg2 userInfo:(id)arg3 context:(struct CGContext *)arg4;	// IMP=0x000000000005c17a
- (void)drawHighlightInFrame:(struct CGRect)arg1 owner:(id)arg2 userInfo:(id)arg3 context:(struct CGContext *)arg4;	// IMP=0x000000000005c160
- (void)drawInFrame:(struct CGRect)arg1 owner:(id)arg2 userInfo:(id)arg3 context:(struct CGContext *)arg4;	// IMP=0x000000000005c146
- (void)updateSegmentBezelLeadingCapLayer:(id)arg1 bezelFillLayer:(id)arg2 trailingBezelCapLayer:(id)arg3 forSegmentType:(int)arg4 segmentBounds:(struct CGRect)arg5 leadingSeparatorWidth:(double)arg6 trailingSeparatorWidth:(double)arg7 renditionKey:(id)arg8 effects:(id)arg9;	// IMP=0x000000000005bd74
- (void)drawSegmentInFrame:(struct CGRect)arg1 isFocused:(int)arg2 focusRingColor:(struct CGColor *)arg3 segmentType:(int)arg4 context:(struct CGContext *)arg5 effects:(id)arg6;	// IMP=0x000000000005bc66
- (void)drawAnimationFrameMappedFrom0_1RangedValue:(double)arg1 destinationFrame:(struct CGRect)arg2 isFocused:(int)arg3 focusRingColor:(struct CGColor *)arg4 context:(struct CGContext *)arg5 effects:(id)arg6;	// IMP=0x000000000005bbe4
- (void)drawAnimationFrameMappedFrom0_1RangedValue:(double)arg1 destinationFrame:(struct CGRect)arg2 isFocused:(int)arg3 focusRingColor:(struct CGColor *)arg4 context:(struct CGContext *)arg5;	// IMP=0x000000000005bbcc
- (void)drawAbsoluteAnimationFrame:(double)arg1 destinationFrame:(struct CGRect)arg2 isFocused:(int)arg3 focusRingColor:(struct CGColor *)arg4 context:(struct CGContext *)arg5;	// IMP=0x000000000005bb4f
- (void)drawAsOnePartWithSlice:(int)arg1 inFrame:(struct CGRect)arg2 isFocused:(int)arg3 focusRingColor:(struct CGColor *)arg4 context:(struct CGContext *)arg5 effects:(id)arg6;	// IMP=0x000000000005ba87
- (void)drawInFrame:(struct CGRect)arg1 alpha:(double)arg2 operation:(int)arg3 isFocused:(int)arg4 focusRingColor:(struct CGColor *)arg5 context:(struct CGContext *)arg6 effects:(id)arg7;	// IMP=0x000000000005b8fd
- (void)drawInFrame:(struct CGRect)arg1 isFocused:(int)arg2 focusRingColor:(struct CGColor *)arg3 context:(struct CGContext *)arg4 effects:(id)arg5;	// IMP=0x000000000005b874
- (void)drawInFrame:(struct CGRect)arg1 alpha:(double)arg2 isFocused:(int)arg3 focusRingColor:(struct CGColor *)arg4 context:(struct CGContext *)arg5;	// IMP=0x000000000005b825
- (void)drawInFrame:(struct CGRect)arg1 alpha:(double)arg2 isFocused:(int)arg3 focusRingColor:(struct CGColor *)arg4 context:(struct CGContext *)arg5 effects:(id)arg6;	// IMP=0x000000000005b7d7
- (void)drawInFrame:(struct CGRect)arg1 isFocused:(int)arg2 focusRingColor:(struct CGColor *)arg3 context:(struct CGContext *)arg4;	// IMP=0x000000000005b74e
- (void)drawInFrame:(struct CGRect)arg1 isFocused:(int)arg2 context:(struct CGContext *)arg3;	// IMP=0x000000000005b616
- (void)updateLayer:(id)arg1 effects:(id)arg2;	// IMP=0x000000000005ab88
- (void)updateLayer:(id)arg1;	// IMP=0x000000000005ab74
- (id)makeLayer;	// IMP=0x000000000005ab27
- (struct CGImage *)copyLayerImageContentsAndCenter:(struct CGRect *)arg1;	// IMP=0x000000000005aa45
- (struct CGImage *)copyLayerImageContentsAndCenter:(struct CGRect *)arg1 renditionKey:(id)arg2;	// IMP=0x000000000005a7df
- (void)dealloc;	// IMP=0x000000000005a6ba
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x000000000005a6af
- (void)encodeWithCoder:(id)arg1;	// IMP=0x000000000005a5c8
- (id)initWithCoder:(id)arg1;	// IMP=0x000000000005a4da
- (id)init;	// IMP=0x000000000005a466
- (id)initWithRenditionKey:(id)arg1 fromTheme:(unsigned long long)arg2;	// IMP=0x000000000005a3b5
- (_Bool)_isButtonGlyph;	// IMP=0x0000000000058cc7
- (void)_setIsButtonGlyph:(_Bool)arg1;	// IMP=0x0000000000058cbd
- (void)_setHasCheckedButtonGlyph:(_Bool)arg1;	// IMP=0x0000000000058cab
- (struct CGSize)_thumbnailSizeForRendition:(id)arg1;	// IMP=0x0000000000058b99
- (id)_rendition;	// IMP=0x0000000000058b3b
- (id)_renditionForSpecificKey:(id)arg1;	// IMP=0x0000000000058a89
- (void)_updateSpecificRenditionKey:(id)arg1 isFocused:(_Bool *)arg2 owner:(id)arg3 userInfo:(id)arg4;	// IMP=0x0000000000058906
- (struct CGPoint)_hotSpot;	// IMP=0x00000000000588f6
- (id)_themeStore;	// IMP=0x00000000000588ce

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
// Preceding property had unknown attributes: ?
// Original attribute string: T@"NSString",?,R,C

@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

