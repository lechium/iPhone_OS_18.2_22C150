//
//     Generated by classdump-c 4.2.0 (64 bit) (iOS port by DreamDevLost, Updated by Kevin Bradley.)(Debug version compiled Dec 27 2024 14:18:54).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class CUICatalog, CUINamedLookup, CUIVectorGlyphHierarchicalLayer, CUIVectorGlyphLayer, CUIVectorGlyphMulticolorLayer, NSDictionary, NSValue;

@interface CUINamedVectorGlyph
{
    double _pointSize;	// 56 = 0x38
    double _lookedupScaleFactor;	// 64 = 0x40
    struct CGImage *_cgImageRef;	// 72 = 0x48
    double _fontMatchingScaleFactor;	// 80 = 0x50
    CUICatalog *_catalog;	// 88 = 0x58
    long long _layoutDirection;	// 96 = 0x60
    unsigned int _generatedImage:1;	// 104 = 0x68
    unsigned int _flippable:1;	// 104 = 0x68
    unsigned int _canUsePathConcatenation:1;	// 104 = 0x68
    short _containsNamedColorStyles;	// 106 = 0x6a
    double _glyphSize;	// 112 = 0x70
    double _glyphWeight;	// 120 = 0x78
    CUINamedLookup *_ultralightInterpolationSource;	// 128 = 0x80
    CUINamedLookup *_blackInterpolationSource;	// 136 = 0x88
    CUIVectorGlyphLayer *_monochromeLayerGroup;	// 144 = 0x90
    CUIVectorGlyphMulticolorLayer *_multicolorLayerGroup;	// 152 = 0x98
    CUIVectorGlyphHierarchicalLayer *_hierarchicalLayerGroup;	// 160 = 0xa0
    NSValue *_rotationAnchor;	// 168 = 0xa8
    NSValue *_metricCenter;	// 176 = 0xb0
    NSDictionary *_symbolDefaults;	// 184 = 0xb8
    double _variableMinValue;	// 192 = 0xc0
    double _variableMaxValue;	// 200 = 0xc8
    struct {
        id _field1;
        id _field2;
        id _field3;
    } *_lockedRenditions;	// 208 = 0xd0
}

+ (id)_layerHierarchyStyleNames;	// IMP=0x001000000000f976
+ (id)_knockoutStyleNames;	// IMP=0x001000000000f95d
+ (id)_colorStyleNames;	// IMP=0x001000000000f917
+ (unsigned int)_backgroundImageNamesAtom;	// IMP=0x001000000000f8d4
+ (unsigned int)_hasImageFillsAtom;	// IMP=0x001000000000f891
+ (unsigned int)_variableColorContinuousAtom;	// IMP=0x001000000000f84e
+ (unsigned int)_rotatesClockwiseAtom;	// IMP=0x001000000000f80b
+ (unsigned int)_wiggleAngleAtom;	// IMP=0x001000000000f7c8
+ (unsigned int)_wiggleStyleAtom;	// IMP=0x001000000000f785
- (void).cxx_destruct;	// IMP=0x0000000000010ba4
@property double variableMaxValue; // @synthesize variableMaxValue=_variableMaxValue;
@property double variableMinValue; // @synthesize variableMinValue=_variableMinValue;
- (id)debugDescription;	// IMP=0x0000000000010873
- (struct CGSVGAttributeMap *)attributesForLayerNamed:(id)arg1;	// IMP=0x0000000000010833
- (struct CGSVGAttributeMap *)attributesForLayerNamed:(id)arg1 inRendition:(id)arg2;	// IMP=0x0000000000010644
- (double)strokeWidthForLayerNamed:(id)arg1;	// IMP=0x00000000000104dd
- (double)strokeWidthForLayerNamed:(id)arg1 inRendition:(id)arg2;	// IMP=0x0000000000010470
- (struct CGSVGAttributeMap *)styleForLayerName:(id)arg1;	// IMP=0x0000000000010411
- (id)pathForLayerNamed:(id)arg1;	// IMP=0x000000000000ffa7
- (id)monochromeLayerNamesInRendition:(id)arg1;	// IMP=0x000000000000fde0
- (id)_layerNamesForRenderingMode:(int)arg1 inRendition:(id)arg2;	// IMP=0x000000000000f9df
- (id)_stylePrefixForRenderingMode:(int)arg1;	// IMP=0x000000000000f9bc
- (id)paletteLayers;	// IMP=0x000000000000f773
- (id)hierarchicalLayers;	// IMP=0x000000000000f68d
- (id)multicolorLayers;	// IMP=0x000000000000f5a7
- (id)monochromeLayers;	// IMP=0x000000000000f4c1
- (id)_createShapeGroupSubpaths;	// IMP=0x000000000000f1d2
- (struct CGSVGNode *)_getOutlineNodeForDocument:(struct CGSVGDocument *)arg1;	// IMP=0x000000000000f189
- (void)_legacy_drawHierarchicalLayerNamed:(id)arg1 inContext:(struct CGContext *)arg2 scaleFactor:(double)arg3 targetSize:(struct CGSize)arg4 colorResolver:(CDUnknownBlockType)arg5;	// IMP=0x000000000000ed4e
- (void)_legacy_drawMulticolorLayerNamed:(id)arg1 inContext:(struct CGContext *)arg2 scaleFactor:(double)arg3 targetSize:(struct CGSize)arg4 colorResolver:(CDUnknownBlockType)arg5;	// IMP=0x000000000000eba8
- (void)_legacy_drawMonochromeLayerNamed:(id)arg1 inContext:(struct CGContext *)arg2 scaleFactor:(double)arg3 targetSize:(struct CGSize)arg4 onFillColor:(struct CGColor *)arg5 offFillColor:(struct CGColor *)arg6;	// IMP=0x000000000000eb0d
- (void)_drawPaletteLayersInContext:(struct CGContext *)arg1 scaleFactor:(double)arg2 targetSize:(struct CGSize)arg3 colorResolver:(CDUnknownBlockType)arg4;	// IMP=0x000000000000e39f
- (void)_drawHierarchicalLayersInContext:(struct CGContext *)arg1 scaleFactor:(double)arg2 targetSize:(struct CGSize)arg3 colorResolver:(CDUnknownBlockType)arg4;	// IMP=0x000000000000df2a
- (void)_drawMulticolorLayersInContext:(struct CGContext *)arg1 scaleFactor:(double)arg2 targetSize:(struct CGSize)arg3 colorResolver:(CDUnknownBlockType)arg4;	// IMP=0x000000000000db69
- (struct CGRect)interiorAlignmentRectForTargetSize:(struct CGSize)arg1 scale:(double)arg2;	// IMP=0x000000000000d3c4
@property(readonly, nonatomic) struct CGRect interiorAlignmentRect;
@property(readonly, nonatomic) struct CGRect interiorAlignmentRectUnrounded;
- (id)graphicVariantWithOptions:(id)arg1;	// IMP=0x000000000000d2af
- (_Bool)isKnockoutEnabledForPaletteLayerAtIndex:(long long)arg1 opacity:(double *)arg2;	// IMP=0x000000000000d29d
- (void)drawInContext:(struct CGContext *)arg1 withPaletteColors:(id)arg2;	// IMP=0x000000000000d030
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)arg1 forTargetSize:(struct CGSize)arg2 withPaletteColors:(id)arg3;	// IMP=0x000000000000cdc6
- (struct CGImage *)imageWithPaletteColors:(id)arg1;	// IMP=0x000000000000cb20
- (void)drawPaletteLayerAtIndex:(unsigned long long)arg1 inContext:(struct CGContext *)arg2 withColorResolver:(CDUnknownBlockType)arg3;	// IMP=0x000000000000c965
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)arg1 forTargetSize:(struct CGSize)arg2 withPaletteColorResolver:(CDUnknownBlockType)arg3;	// IMP=0x000000000000c831
- (struct CGImage *)imageWithPaletteColorResolver:(CDUnknownBlockType)arg1;	// IMP=0x000000000000c7d0
- (id)paletteLevels;	// IMP=0x000000000000c4f6
- (id)paletteLayerThresholds;	// IMP=0x000000000000c4e4
- (unsigned long long)numberOfPaletteLayers;	// IMP=0x000000000000c4d2
- (_Bool)isKnockoutEnabledForHierarchicalLayerAtIndex:(long long)arg1 opacity:(double *)arg2;	// IMP=0x000000000000c27c
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)arg1 forTargetSize:(struct CGSize)arg2 hierarchicalPrimaryColor:(struct CGColor *)arg3;	// IMP=0x000000000000c118
- (struct CGImage *)imageWithHierarchicalPrimaryColor:(struct CGColor *)arg1;	// IMP=0x000000000000bfd6
- (void)drawHierarchyLayerAtIndex:(unsigned long long)arg1 inContext:(struct CGContext *)arg2 withColorResolver:(CDUnknownBlockType)arg3;	// IMP=0x000000000000bc1d
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)arg1 forTargetSize:(struct CGSize)arg2 withHierarchyColorResolver:(CDUnknownBlockType)arg3;	// IMP=0x000000000000bad5
- (struct CGImage *)imageWithHierarchyColorResolver:(CDUnknownBlockType)arg1;	// IMP=0x000000000000ba60
- (id)hierarchyLevels;	// IMP=0x000000000000b73b
- (id)hierarchyLayers;	// IMP=0x000000000000b441
- (id)hierarchicalLayerThresholds;	// IMP=0x000000000000b1c6
- (unsigned long long)numberOfHierarchyLayers;	// IMP=0x000000000000af45
- (_Bool)isKnockoutEnabledForMulticolorLayerAtIndex:(long long)arg1 opacity:(double *)arg2;	// IMP=0x000000000000ace9
- (id)multicolorLayerColorNames;	// IMP=0x000000000000aab9
- (id)multicolorColorNames;	// IMP=0x000000000000a889
- (_Bool)containsNamedColorStyle:(id)arg1;	// IMP=0x000000000000a537
- (_Bool)containsNamedColorStyles;	// IMP=0x000000000000a3ed
- (void)_setContainsNamedColorStyles:(short)arg1;	// IMP=0x000000000000a3dc
- (void)drawMulticolorLayerAtIndex:(unsigned long long)arg1 inContext:(struct CGContext *)arg2 withColorResolver:(CDUnknownBlockType)arg3;	// IMP=0x000000000000a1ff
- (id)makeLayerWithColorResolver:(CDUnknownBlockType)arg1;	// IMP=0x000000000000a117
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)arg1 forTargetSize:(struct CGSize)arg2 withColorResolver:(CDUnknownBlockType)arg3;	// IMP=0x0000000000009f66
- (struct CGImage *)imageWithColorResolver:(CDUnknownBlockType)arg1;	// IMP=0x0000000000009ee1
- (id)multicolorLayerThresholds;	// IMP=0x0000000000009b1f
- (unsigned long long)numberOfMulticolorLayers;	// IMP=0x0000000000009a00
- (struct CGPath *)maskShape;	// IMP=0x0000000000009135
- (struct CGPath *)CGPath;	// IMP=0x0000000000008d85
- (void)drawInContext:(struct CGContext *)arg1;	// IMP=0x0000000000008c54
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)arg1 forTargetSize:(struct CGSize)arg2;	// IMP=0x000000000000876b
- (struct CGImage *)image;	// IMP=0x00000000000085dd
- (id)templateLayerThresholds;	// IMP=0x000000000000811e
- (unsigned long long)numberOfTemplateLayers;	// IMP=0x0000000000007ff8
- (_Bool)hasImageFills;	// IMP=0x0000000000007fab
- (id)_symbolDefaults;	// IMP=0x0000000000007adb
- (id)symbolDefaults;	// IMP=0x00000000000079c1
- (struct CGImage *)fillImageWithName:(id)arg1;	// IMP=0x00000000000077d2
- (id)fillImageNames;	// IMP=0x000000000000775e
@property(readonly, nonatomic) struct CGPoint rotationAnchor;
@property(readonly, nonatomic) struct CGPoint metricCenter;
- (struct CGPoint)_getMetricCenterInRendition:(id)arg1;	// IMP=0x0000000000007182
- (id)_getAnchor:(id)arg1 inRendition:(id)arg2;	// IMP=0x00000000000070d6
- (_Bool)_containsWideGamutColor;	// IMP=0x0000000000006fc2
- (_Bool)generatedImage;	// IMP=0x0000000000006fb0
@property(readonly, nonatomic) float templateVersion;
@property(nonatomic) double fontMatchingScaleFactor;
@property(readonly, nonatomic) struct CGRect contentBounds;
@property(readonly, nonatomic) struct CGRect contentBoundsUnrounded;
- (struct CGRect)alignmentRectForTargetSize:(struct CGSize)arg1 scale:(double)arg2;	// IMP=0x00000000000067ab
@property(readonly, nonatomic) struct CGRect alignmentRect;
@property(readonly, nonatomic) struct CGRect alignmentRectUnrounded;
- (void)_setLayoutDirection:(long long)arg1;	// IMP=0x00000000000060bc
- (long long)layoutDirection;	// IMP=0x00000000000060ab
- (id)knownAvailableVectorSizes;	// IMP=0x0000000000006080
- (void)_setFlippable:(_Bool)arg1;	// IMP=0x0000000000006066
@property(readonly, nonatomic) _Bool isFlippable;
- (struct CGSize)referenceCanvasSize;	// IMP=0x0000000000005f2c
- (double)referencePointSize;	// IMP=0x0000000000005f01
@property(readonly, nonatomic) double capHeight;
@property(readonly, nonatomic) double capHeightUnrounded;
@property(readonly, nonatomic) double baselineOffset;
@property(readonly, nonatomic) double baselineOffsetUnrounded;
- (double)_requestedPointSizeRatio;	// IMP=0x0000000000005b92
- (void)_setPointSize:(double)arg1;	// IMP=0x0000000000005b80
- (double)pointSize;	// IMP=0x0000000000005b6e
- (void)_setGlyphWeight:(double)arg1;	// IMP=0x0000000000005b5c
- (double)glyphContinuousWeight;	// IMP=0x0000000000005b4a
- (long long)glyphWeight;	// IMP=0x0000000000005b09
- (void)_setGlyphSize:(double)arg1;	// IMP=0x0000000000005af7
- (double)glyphContinuousSize;	// IMP=0x0000000000005ae5
- (long long)glyphSize;	// IMP=0x0000000000005aa4
- (void)_setScale:(double)arg1;	// IMP=0x0000000000005a92
- (double)scale;	// IMP=0x0000000000005a80
- (id)_blackRendition;	// IMP=0x0000000000005a4d
- (id)_ultralightRendition;	// IMP=0x0000000000005a1a
- (id)_regularRendition;	// IMP=0x00000000000059f3
- (_Bool)canBeInterpolatedWith:(id)arg1;	// IMP=0x00000000000057c3
@property(readonly, nonatomic, getter=isInterpolatable) _Bool interpolatable;
@property(readonly, nonatomic) long long preferredRenderingMode;
- (struct CGSVGDocument *)referenceGlyph;	// IMP=0x000000000000573c
- (void)setRepresentsOnDemandContent:(_Bool)arg1;	// IMP=0x00000000000056cd
- (void)_setImage:(struct CGImage *)arg1;	// IMP=0x0000000000005690
- (struct CGImage *)_cgImageRef;	// IMP=0x000000000000567f
- (void)_setCanUsePathConcatenation:(_Bool)arg1;	// IMP=0x0000000000005664
- (_Bool)_canUsePathConcatenation;	// IMP=0x000000000000564f
- (void)_setBlackInterpolationSource:(id)arg1;	// IMP=0x0000000000005610
- (id)_blackInterpolationSource;	// IMP=0x00000000000055ff
- (void)_setUltralightInterpolationSource:(id)arg1;	// IMP=0x00000000000055c0
- (id)_ultralightInterpolationSource;	// IMP=0x00000000000055af
- (void)_setCatalog:(id)arg1;	// IMP=0x000000000000559b
- (id)_catalog;	// IMP=0x000000000000558a
- (unsigned long long)hash;	// IMP=0x00000000000053b3
- (_Bool)isEqual:(id)arg1;	// IMP=0x00000000000052b5
- (void)dealloc;	// IMP=0x00000000000051e8
- (void)_lookupCatalogImageForIdiom:(long long)arg1 locale:(id)arg2;	// IMP=0x0000000000004f16
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x0000000000004c2d
- (id)initWithName:(id)arg1 scaleFactor:(double)arg2 deviceIdiom:(long long)arg3 pointSize:(double)arg4 fromCatalog:(id)arg5 usingRenditionKey:(id)arg6 themeRef:(unsigned long long)arg7 locale:(id)arg8;	// IMP=0x0000000000004a0a
- (id)initWithName:(id)arg1 scaleFactor:(double)arg2 deviceIdiom:(long long)arg3 pointSize:(double)arg4 fromCatalog:(id)arg5 usingRenditionKey:(id)arg6 fromTheme:(unsigned long long)arg7;	// IMP=0x0000000000004999
- (id)intWithName:(id)arg1 scaleFactor:(double)arg2 deviceIdiom:(long long)arg3 pointSize:(double)arg4 weight:(long long)arg5 glyphSize:(long long)arg6 interpolatedFromRegular:(id)arg7 ultralight:(id)arg8 black:(id)arg9 fromCatalog:(id)arg10 themeRef:(unsigned long long)arg11;	// IMP=0x0000000000004925
- (id)initWithName:(id)arg1 scaleFactor:(double)arg2 deviceIdiom:(long long)arg3 pointSize:(double)arg4 continuousWeight:(double)arg5 continuousSize:(double)arg6 interpolatedFromRegular:(id)arg7 ultralight:(id)arg8 black:(id)arg9 fromCatalog:(id)arg10 themeRef:(unsigned long long)arg11 locale:(id)arg12;	// IMP=0x000000000000466b
- (id)initWithName:(id)arg1 scaleFactor:(double)arg2 deviceIdiom:(long long)arg3 pointSize:(double)arg4 continuousWeight:(double)arg5 continuousSize:(double)arg6 interpolatedFromRegular:(id)arg7 ultralight:(id)arg8 black:(id)arg9 fromCatalog:(id)arg10 themeRef:(unsigned long long)arg11;	// IMP=0x00000000000045d4
- (id)_partialLocale;	// IMP=0x000000000000455c
- (id)gradientTextureWithBufferAllocator:(id)arg1;	// IMP=0x000000000004cc37
- (id)edgeDefinitionTextureWithBufferAllocator:(id)arg1;	// IMP=0x000000000004cbfe
- (struct CGPoint)_interpolatedAnchorWithWeight:(double)arg1 glyphSize:(double)arg2 fromUltralight:(struct CGPoint)arg3 regular:(struct CGPoint)arg4 black:(struct CGPoint)arg5;	// IMP=0x0000000000092f01
- (double)_interpolatedStrokeWidthWithWeight:(double)arg1 glyphSize:(double)arg2 fromUltralight:(double)arg3 regular:(double)arg4 black:(double)arg5;	// IMP=0x0000000000092e6f
- (CDStruct_3c058996)_interpolatedAlignmentRectInsetsWithWeight:(double)arg1 glyphSize:(double)arg2 fromUltralight:(CDStruct_3c058996)arg3 regular:(CDStruct_3c058996)arg4 black:(CDStruct_3c058996)arg5;	// IMP=0x0000000000092da3
- (struct CGSize)_interpolatedCanvasSizeWithWeight:(double)arg1 glyphSize:(double)arg2 fromUltralight:(struct CGSize)arg3 regular:(struct CGSize)arg4 black:(struct CGSize)arg5;	// IMP=0x0000000000092cde
- (double)_interpolatedCapHeightWithWeight:(double)arg1 glyphSize:(double)arg2 fromUltralight:(double)arg3 regular:(double)arg4 black:(double)arg5;	// IMP=0x0000000000092c82
- (double)_interpolatedBaselineOffsetWithWeight:(double)arg1 glyphSize:(double)arg2 fromUltralight:(double)arg3 regular:(double)arg4 black:(double)arg5;	// IMP=0x0000000000092bc5
- (id)_interpolatedPathWithWeight:(double)arg1 glyphSize:(double)arg2 fromUltralightSmall:(id)arg3 regularSmall:(id)arg4 blackSmall:(id)arg5;	// IMP=0x0000000000092ad7

@end

