//
//     Generated by classdump-c 4.2.0 (64 bit) (iOS port by DreamDevLost, Updated by Kevin Bradley.)(Debug version compiled Dec 27 2024 14:18:54).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct Alias {
    struct shared_ptr<skit::internal::AliasImpl> pimpl;
};

struct AliasImpl;

struct Analyzer;

struct ContextImpl;

struct ContextV2 {
    struct shared_ptr<skit::internal::ContextImpl> pimpl;
};

struct IndexReader {
    struct shared_ptr<skit::internal::IndexReaderImpl> pimpl;
};

struct IndexReaderImpl;

struct IndexWriter {
    struct unique_ptr<skit::internal::IndexWriterImpl, std::default_delete<skit::internal::IndexWriterImpl>> pimpl;
};

struct IndexWriterImpl;

struct Indexer {
    struct ContextV2 context;
    struct IndexWriter index_writer;
    long long index_locale;
    struct basic_string<char16_t, std::char_traits<char16_t>, std::allocator<char16_t>> index_locale_id;
    struct shared_ptr<semskitbridge::Tokenizer> tokenizer;
    struct shared_ptr<semskitbridge::Analyzer> analyzer;
    struct Alias alias;
    struct TrialFactors trial_factors;
    unsigned short index_features;
};

struct OntologyEdgeName;

struct OntologyNodeName;

struct Searcher {
    struct ContextV2 context;
    struct IndexReader index_reader;
    struct Alias alias;
};

struct Tokenizer;

struct TrialFactors {
    _Bool use_contact_aliases;
    _Bool use_contact_emoji_matches;
    _Bool use_contact_diacritics_stripping;
    _Bool use_contact_prefix_matching;
    _Bool use_contact_phonetic_search;
    _Bool use_token_lemmatization;
    int phonetic_search_n_gram_order;
    _Bool use_media_threshold_filtering;
};

struct __raw {
    unsigned long long __words[3];
};

struct __shared_weak_count;

struct atomic<bool> {
    struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> {
        _Atomic _Bool __a_value;
    } __a_;
};

struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep {
            union {
                struct __short {
                    CDStruct_696e8f29 ;
                    char __padding_[0];
                    char __data_[23];
                } __s;
                struct __long {
                    CDStruct_1c4f21e2 ;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __raw __r;
            } ;
        } __value_;
    } __r_;
};

struct basic_string<char16_t, std::char_traits<char16_t>, std::allocator<char16_t>> {
    struct __compressed_pair<std::basic_string<char16_t>::__rep, std::allocator<char16_t>> {
        struct __rep {
            union {
                struct __short {
                    CDStruct_696e8f29 ;
                    char __padding_[1];
                    unsigned short __data_[11];
                } __s;
                struct __long {
                    CDStruct_1c4f21e2 ;
                    unsigned long long __size_;
                    unsigned short *__data_;
                } __l;
                struct __raw __r;
            } ;
        } __value_;
    } __r_;
};

struct optional<std::tuple<const siri::ontology::OntologyNodeName *, const siri::ontology::OntologyEdgeName *, NSString *const>> {
    union {
        char _field1;
        struct tuple<const siri::ontology::OntologyNodeName *, const siri::ontology::OntologyEdgeName *, NSString *const> _field2;
    } _field1;
    _Bool _field2;
};

struct path {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> __pn_;
};

struct shared_ptr<semskitbridge::Analyzer> {
    struct Analyzer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<semskitbridge::Searcher> {
    struct Searcher *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<semskitbridge::Tokenizer> {
    struct Tokenizer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<skit::internal::AliasImpl> {
    struct AliasImpl *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<skit::internal::ContextImpl> {
    struct ContextImpl *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<skit::internal::IndexReaderImpl> {
    struct IndexReaderImpl *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct tuple<const siri::ontology::OntologyNodeName *, const siri::ontology::OntologyEdgeName *, NSString *const> {
    struct __tuple_impl<std::__tuple_indices<0, 1, 2>, const siri::ontology::OntologyNodeName *, const siri::ontology::OntologyEdgeName *, NSString *const> {
        struct OntologyNodeName *_field1;
        struct OntologyEdgeName *_field2;
        id _field3;
    } _field1;
};

struct unique_ptr<semskitbridge::Indexer, std::default_delete<semskitbridge::Indexer>> {
    struct __compressed_pair<semskitbridge::Indexer *, std::default_delete<semskitbridge::Indexer>> {
        struct Indexer *__value_;
    } __ptr_;
};

struct unique_ptr<skit::internal::IndexWriterImpl, std::default_delete<skit::internal::IndexWriterImpl>> {
    struct __compressed_pair<skit::internal::IndexWriterImpl *, std::default_delete<skit::internal::IndexWriterImpl>> {
        struct IndexWriterImpl *__value_;
    } __ptr_;
};

struct vector<std::pair<semskitbridge::SearchGroup, std::vector<std::byte>>, std::allocator<std::pair<semskitbridge::SearchGroup, std::vector<std::byte>>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<semskitbridge::SearchGroup, std::vector<std::byte>>*, std::allocator<std::pair<semskitbridge::SearchGroup, std::vector<std::byte>>>> {
        void *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned int __is_long_:1;
    unsigned int __cap_:63;
} CDStruct_1c4f21e2;

typedef struct {
    unsigned int __is_long_:1;
    unsigned int __size_:7;
} CDStruct_696e8f29;

// Template types
typedef struct optional<std::tuple<const siri::ontology::OntologyNodeName *, const siri::ontology::OntologyEdgeName *, NSString *const>> {
    union {
        char _field1;
        struct tuple<const siri::ontology::OntologyNodeName *, const siri::ontology::OntologyEdgeName *, NSString *const> _field2;
    } _field1;
    _Bool _field2;
} optional_039dfea1;

typedef struct shared_ptr<semskitbridge::Searcher> {
    struct Searcher *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_16f0ca65;

