//
//     Generated by classdump-c 4.2.0 (64 bit) (iOS port by DreamDevLost, Updated by Kevin Bradley.)(Debug version compiled Dec 27 2024 14:18:54).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import "HAPAccessoryServerBTLE.h"

@class HAPAccessoryProtocolInfo, HAPAuthSession, HAPBLEAccessoryCache, HAPCharacteristic, HAPPairSetupSession, HAPSecuritySession, HMFTimer, NSError, NSMapTable, NSMutableArray, NSMutableSet, NSOperationQueue, NSString, _HAPBTLEDiscoveryContext;

__attribute__((visibility("hidden")))
@interface _HAPAccessoryServerBTLE200 : HAPAccessoryServerBTLE
{
    _Bool _hasValidCache;	// 32 = 0x20
    _Bool _hasBeenDiscovered;	// 33 = 0x21
    _Bool _verified;	// 34 = 0x22
    _Bool _badPairSetupCode;	// 35 = 0x23
    _Bool _pairing;	// 36 = 0x24
    _Bool _authenticated;	// 37 = 0x25
    unsigned char _featureFlags;	// 38 = 0x26
    HAPSecuritySession *_securitySession;	// 40 = 0x28
    long long _connectionState;	// 48 = 0x30
    HAPBLEAccessoryCache *_accessoryCache;	// 56 = 0x38
    CDUnknownBlockType _connectionCompletionHandler;	// 64 = 0x40
    HMFTimer *_connectionIdleTimer;	// 72 = 0x48
    _HAPBTLEDiscoveryContext *_discoveryContext;	// 80 = 0x50
    long long _discoveryRetries;	// 88 = 0x58
    HAPCharacteristic *_identifyCharacteristic;	// 96 = 0x60
    HAPPairSetupSession *_pairSetupSession;	// 104 = 0x68
    double _pairSetupBackoffTimeInterval;	// 112 = 0x70
    CDUnknownBlockType _setupCodeCompletionHandler;	// 120 = 0x78
    NSError *_pairingDisconnectionError;	// 128 = 0x80
    HAPAuthSession *_authSession;	// 136 = 0x88
    HAPAccessoryProtocolInfo *_authenticatedProtocolInfo;	// 144 = 0x90
    HAPCharacteristic *_pairingFeaturesCharacteristic;	// 152 = 0x98
    HAPCharacteristic *_pairSetupCharacteristic;	// 160 = 0xa0
    HAPCharacteristic *_pairVerifyCharacteristic;	// 168 = 0xa8
    NSOperationQueue *_pairVerifyOperationQueue;	// 176 = 0xb0
    HAPCharacteristic *_pairingsCharacteristic;	// 184 = 0xb8
    NSMutableArray *_pendingRequests;	// 192 = 0xc0
    NSOperationQueue *_requestOperationQueue;	// 200 = 0xc8
    NSMutableArray *_pendingResponses;	// 208 = 0xd0
    NSMapTable *_characteristicWriteCompletionHandlers;	// 216 = 0xd8
    NSMapTable *_characteristicEnableEventCompletionHandlers;	// 224 = 0xe0
    NSMutableSet *_discoveredAccessoryCharacteristicsPendingRead;	// 232 = 0xe8
    NSMutableArray *_operationsReceivedDuringConnectionStateChange;	// 240 = 0xf0
}

+ (id)logCategory;	// IMP=0x00100000000e541f
+ (_Bool)parseCharacteristicConfigurationResponse:(id)arg1 error:(id *)arg2;	// IMP=0x00100000000e500b
+ (id)configurationRequestForCharacteristic:(id)arg1 isBroadcasted:(_Bool)arg2 interval:(unsigned long long)arg3 error:(id *)arg4;	// IMP=0x00100000000e4de1
+ (_Bool)parseProtocolConfigurationResponse:(id)arg1 key:(id *)arg2 stateNumber:(id *)arg3 error:(id *)arg4;	// IMP=0x00100000000e4546
+ (id)configurationRequestForService:(id)arg1 configRequestType:(unsigned char)arg2 error:(id *)arg3;	// IMP=0x00100000000e4139
+ (_Bool)parseWriteResponse:(id)arg1 value:(id *)arg2 error:(id *)arg3;	// IMP=0x00100000000e3e6f
+ (id)executeWriteRequestForCharacteristic:(id)arg1 options:(long long)arg2 error:(id *)arg3;	// IMP=0x00100000000e3c96
+ (id)prepareWriteRequestForCharacteristic:(id)arg1 value:(id)arg2 authorizationData:(id)arg3 contextData:(id)arg4 options:(long long)arg5 error:(id *)arg6;	// IMP=0x00100000000e39bf
+ (id)writeRequestForCharacteristic:(id)arg1 value:(id)arg2 authorizationData:(id)arg3 contextData:(id)arg4 options:(long long)arg5 error:(id *)arg6;	// IMP=0x00100000000e36d7
+ (id)extractNotificationContextFromBodyData:(id)arg1 error:(id *)arg2;	// IMP=0x00100000000e357b
+ (id)extractSerializedRequestValueFromBodyData:(id)arg1 error:(id *)arg2;	// IMP=0x00100000000e342c
+ (_Bool)parseReadResponse:(id)arg1 value:(id *)arg2 notificationContext:(id *)arg3 error:(id *)arg4;	// IMP=0x00100000000e2e96
+ (id)readRequestForCharacteristic:(id)arg1 options:(long long)arg2 error:(id *)arg3;	// IMP=0x00100000000e2ce2
+ (_Bool)isHAPDescriptor:(id)arg1;	// IMP=0x00100000000e2c63
+ (_Bool)isHAPService:(id)arg1;	// IMP=0x00100000000e2600
+ (id)parseServiceSignatureResponse:(id)arg1 serviceInstanceID:(id)arg2 serviceType:(id)arg3 error:(id *)arg4;	// IMP=0x00100000000e2101
+ (id)parseSignatureResponse:(id)arg1 error:(id *)arg2;	// IMP=0x00100000000e12b1
+ (id)signatureRequestForService:(id)arg1 characteristic:(id)arg2 requiresAuthentication:(_Bool)arg3 error:(id *)arg4;	// IMP=0x00100000000e1245
+ (id)signatureRequestForCharacteristic:(id)arg1 requiresAuthentication:(_Bool)arg2 error:(id *)arg3;	// IMP=0x00100000000e11da
- (void).cxx_destruct;	// IMP=0x00000000000ced4f
@property(retain, nonatomic) NSMutableArray *operationsReceivedDuringConnectionStateChange; // @synthesize operationsReceivedDuringConnectionStateChange=_operationsReceivedDuringConnectionStateChange;
@property(retain, nonatomic) NSMutableSet *discoveredAccessoryCharacteristicsPendingRead; // @synthesize discoveredAccessoryCharacteristicsPendingRead=_discoveredAccessoryCharacteristicsPendingRead;
@property(nonatomic) unsigned char featureFlags; // @synthesize featureFlags=_featureFlags;
@property(readonly, nonatomic) NSMapTable *characteristicEnableEventCompletionHandlers; // @synthesize characteristicEnableEventCompletionHandlers=_characteristicEnableEventCompletionHandlers;
@property(readonly, nonatomic) NSMapTable *characteristicWriteCompletionHandlers; // @synthesize characteristicWriteCompletionHandlers=_characteristicWriteCompletionHandlers;
@property(readonly, nonatomic) NSMutableArray *pendingResponses; // @synthesize pendingResponses=_pendingResponses;
@property(readonly, nonatomic) NSOperationQueue *requestOperationQueue; // @synthesize requestOperationQueue=_requestOperationQueue;
@property(readonly, nonatomic) NSMutableArray *pendingRequests; // @synthesize pendingRequests=_pendingRequests;
@property(nonatomic) __weak HAPCharacteristic *pairingsCharacteristic; // @synthesize pairingsCharacteristic=_pairingsCharacteristic;
@property(readonly, nonatomic) NSOperationQueue *pairVerifyOperationQueue; // @synthesize pairVerifyOperationQueue=_pairVerifyOperationQueue;
@property(nonatomic) __weak HAPCharacteristic *pairVerifyCharacteristic; // @synthesize pairVerifyCharacteristic=_pairVerifyCharacteristic;
@property(nonatomic) __weak HAPCharacteristic *pairSetupCharacteristic; // @synthesize pairSetupCharacteristic=_pairSetupCharacteristic;
@property(nonatomic) __weak HAPCharacteristic *pairingFeaturesCharacteristic; // @synthesize pairingFeaturesCharacteristic=_pairingFeaturesCharacteristic;
@property(retain, nonatomic) HAPAccessoryProtocolInfo *authenticatedProtocolInfo; // @synthesize authenticatedProtocolInfo=_authenticatedProtocolInfo;
@property(retain, nonatomic) HAPAuthSession *authSession; // @synthesize authSession=_authSession;
@property(nonatomic) _Bool authenticated; // @synthesize authenticated=_authenticated;
@property(retain, nonatomic) NSError *pairingDisconnectionError; // @synthesize pairingDisconnectionError=_pairingDisconnectionError;
@property(nonatomic, getter=isPairing) _Bool pairing; // @synthesize pairing=_pairing;
@property(copy, nonatomic) CDUnknownBlockType setupCodeCompletionHandler; // @synthesize setupCodeCompletionHandler=_setupCodeCompletionHandler;
@property(nonatomic, getter=isBadSetupCode) _Bool badPairSetupCode; // @synthesize badPairSetupCode=_badPairSetupCode;
@property(nonatomic) double pairSetupBackoffTimeInterval; // @synthesize pairSetupBackoffTimeInterval=_pairSetupBackoffTimeInterval;
@property(retain, nonatomic) HAPPairSetupSession *pairSetupSession; // @synthesize pairSetupSession=_pairSetupSession;
@property(nonatomic) __weak HAPCharacteristic *identifyCharacteristic; // @synthesize identifyCharacteristic=_identifyCharacteristic;
@property(nonatomic, getter=isVerified) _Bool verified; // @synthesize verified=_verified;
@property(nonatomic) long long discoveryRetries; // @synthesize discoveryRetries=_discoveryRetries;
@property(retain, nonatomic) _HAPBTLEDiscoveryContext *discoveryContext; // @synthesize discoveryContext=_discoveryContext;
@property(retain, nonatomic) HMFTimer *connectionIdleTimer; // @synthesize connectionIdleTimer=_connectionIdleTimer;
@property(copy, nonatomic) CDUnknownBlockType connectionCompletionHandler; // @synthesize connectionCompletionHandler=_connectionCompletionHandler;
@property(retain, nonatomic) HAPBLEAccessoryCache *accessoryCache; // @synthesize accessoryCache=_accessoryCache;
- (void)disconnect;	// IMP=0x00000000000ce8d2
- (void)timerDidFire:(id)arg1;	// IMP=0x00000000000ce5a3
- (void)securitySession:(id)arg1 didCloseWithError:(id)arg2;	// IMP=0x00000000000ce4c5
- (void)_updateLastKeyBagIdentityIndexFailingPVWithError:(id)arg1;	// IMP=0x00000000000ce303
- (_Bool)_shouldIgnoreRetryDiscoveryError:(id)arg1;	// IMP=0x00000000000ce238
- (void)securitySessionDidOpen:(id)arg1;	// IMP=0x00000000000ce180
- (void)securitySessionIsOpening:(id)arg1;	// IMP=0x00000000000ce0c8
- (void)securitySession:(id)arg1 didReceiveSetupExchangeData:(id)arg2;	// IMP=0x00000000000cdfea
- (id)securitySession:(id)arg1 didReceiveRequestForPeerPairingIdentityWithIdentifier:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000cdb54
- (id)securitySession:(id)arg1 didReceiveLocalPairingIdentityRequestWithError:(id *)arg2;	// IMP=0x00000000000cda32
- (void)submitPairVerifyMetricWithError:(id)arg1;	// IMP=0x00000000000cd917
- (void)authSession:(id)arg1 authComplete:(id)arg2;	// IMP=0x00000000000cd85f
- (void)authSession:(id)arg1 confirmUUID:(id)arg2 token:(id)arg3;	// IMP=0x00000000000cd752
- (void)authSession:(id)arg1 authenticateUUID:(id)arg2 token:(id)arg3;	// IMP=0x00000000000cd645
- (void)authSession:(id)arg1 validateUUID:(id)arg2 token:(id)arg3;	// IMP=0x00000000000cd538
- (void)authSession:(id)arg1 sendAuthExchangeData:(id)arg2;	// IMP=0x00000000000cd480
- (void)_notifyDelegatesOfConnectionState:(_Bool)arg1 withError:(id)arg2;	// IMP=0x00000000000cd3ad
- (void)_notifyDelegatesPairingStopped:(id)arg1;	// IMP=0x00000000000cd2df
- (void)_continuePairingAfterMFiCertValidation;	// IMP=0x00000000000cd272
- (void)tearDownSessionOnAuthCompletion;	// IMP=0x00000000000cd201
- (void)provisionToken:(id)arg1;	// IMP=0x00000000000cd083
- (void)continueAuthAfterValidation:(_Bool)arg1;	// IMP=0x00000000000ccede
- (void)authenticateAccessory;	// IMP=0x00000000000cce6d
- (_Bool)_validateProtocolInfo:(id)arg1;	// IMP=0x00000000000ccb0e
- (void)getAccessoryInfo:(CDUnknownBlockType)arg1;	// IMP=0x00000000000cca12
- (_Bool)pairSetupSession:(id)arg1 didReceiveBackoffRequestWithTimeInterval:(double)arg2;	// IMP=0x00000000000cc947
- (void)pairSetupSessionDidReceiveInvalidSetupCode:(id)arg1;	// IMP=0x00000000000cc88f
- (void)pairSetupSession:(id)arg1 didReceiveSetupCodeRequestWithCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000cc7b1
- (void)pairSetupSession:(id)arg1 didReceiveProductData:(id)arg2;	// IMP=0x00000000000cc6d3
- (void)pairSetupSession:(id)arg1 didStopWithError:(id)arg2;	// IMP=0x00000000000cc5f5
- (_Bool)pairSetupSession:(id)arg1 didPairWithPeer:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000cc01f
- (id)pairSetupSession:(id)arg1 didReceiveLocalPairingIdentityRequestWithError:(id *)arg2;	// IMP=0x00000000000cbe32
- (void)pairSetupSession:(id)arg1 didReceiveSetupExchangeData:(id)arg2;	// IMP=0x00000000000cbd54
- (void)controlOutputStreamDidComplete:(id)arg1;	// IMP=0x00000000000cbcab
- (void)controlOutputStream:(id)arg1 didCloseWithError:(id)arg2;	// IMP=0x00000000000cbbd8
- (void)controlOutputStreamDidOpen:(id)arg1;	// IMP=0x00000000000cbbd2
- (void)controlOutputStream:(id)arg1 didReceiveRequestToSendControlPacket:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000cbac7
- (void)peripheral:(id)arg1 didUpdateNotificationStateForCharacteristic:(id)arg2 error:(id)arg3;	// IMP=0x00000000000cb9b7
- (void)peripheral:(id)arg1 didWriteValueForCharacteristic:(id)arg2 error:(id)arg3;	// IMP=0x00000000000cb8a7
- (void)peripheral:(id)arg1 didUpdateValueForCharacteristic:(id)arg2 error:(id)arg3;	// IMP=0x00000000000cb797
- (void)peripheral:(id)arg1 didUpdateValueForDescriptor:(id)arg2 error:(id)arg3;	// IMP=0x00000000000cb687
- (void)peripheral:(id)arg1 didDiscoverDescriptorsForCharacteristic:(id)arg2 error:(id)arg3;	// IMP=0x00000000000cb577
- (void)peripheral:(id)arg1 didDiscoverCharacteristicsForService:(id)arg2 error:(id)arg3;	// IMP=0x00000000000cb467
- (void)peripheral:(id)arg1 didModifyServices:(id)arg2;	// IMP=0x00000000000cb389
- (void)peripheral:(id)arg1 didDiscoverServices:(id)arg2;	// IMP=0x00000000000cb188
- (void)_notifyDelegateOfSentPlaintextData:(id)arg1 forCharacteristic:(id)arg2;	// IMP=0x00000000000cb03b
- (void)_notifyDelegateOfSentEncryptedAuthenticatedData:(id)arg1 forCharacteristic:(id)arg2;	// IMP=0x00000000000caeee
- (void)_notifyDelegateOfReceivedPlaintextData:(id)arg1 forCharacteristic:(id)arg2;	// IMP=0x00000000000cada1
- (void)_notifyDelegateOfReceivedEncryptedAuthenticatedData:(id)arg1 forCharacteristic:(id)arg2;	// IMP=0x00000000000cac2c
- (_Bool)_validateGeneratedBroadcastKey:(id)arg1;	// IMP=0x00000000000ca858
- (void)_generateBroadcastKey:(unsigned char)arg1 queue:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000ca718
- (void)generateBroadcastKey:(unsigned char)arg1 queue:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000ca631
- (unsigned long long)numActiveSessionClients;	// IMP=0x00000000000ca629
- (unsigned long long)sessionCheckInterval;	// IMP=0x00000000000ca621
- (_Bool)doesPeriodicSessionChecks;	// IMP=0x00000000000ca619
- (_Bool)isBLELinkConnected;	// IMP=0x00000000000ca5ff
- (void)_handleConnectionIdleTimeout;	// IMP=0x00000000000ca320
- (void)_suspendConnectionIdleTimer;	// IMP=0x00000000000ca20d
- (void)_resumeConnectionIdleTimer;	// IMP=0x00000000000ca0fa
- (void)_kickConnectionIdleTimer;	// IMP=0x00000000000ca0bd
- (void)handleDisconnectionWithError:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c9f1f
- (_Bool)isReadyForOperation:(long long)arg1;	// IMP=0x00000000000c9e49
- (void)_handleConnectionWithError:(id)arg1;	// IMP=0x00000000000c9c1d
- (void)handleConnectionWithPeripheral:(id)arg1 withError:(id)arg2;	// IMP=0x00000000000c9b3f
- (void)_restartConnectionIdleTimer:(double)arg1;	// IMP=0x00000000000c994f
- (void)_updateConnectionIdleTime:(unsigned char)arg1;	// IMP=0x00000000000c98e1
- (void)updateConnectionIdleTime:(unsigned char)arg1;	// IMP=0x00000000000c9867
- (void)_disconnectWithDisconnectionError:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c92b6
- (void)_cancelConnectionWithError:(id)arg1;	// IMP=0x00000000000c8fd4
- (void)connectWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000c8ee2
- (id)_decryptData:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000c8c7c
- (id)_encryptDataAndGenerateAuthTag:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000c8a23
- (id)protocolInfoServiceSignatureCharacteristics;	// IMP=0x00000000000c8956
- (void)_handleSecuritySessionSetupExchangeData:(id)arg1;	// IMP=0x00000000000c85ce
- (void)_establishSecureSession;	// IMP=0x00000000000c822b
- (void)setSecuritySessionOpen:(_Bool)arg1;	// IMP=0x00000000000c8183
- (_Bool)isSecuritySessionOpen;	// IMP=0x00000000000c813f
@property(retain, nonatomic) HAPSecuritySession *securitySession; // @synthesize securitySession=_securitySession;
- (void)_invokeOperationsReceivedDuringConnectionStateChangeWithError:(id)arg1;	// IMP=0x00000000000c7d88
- (void)evaluateConnectionStateForOperation:(long long)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c7cd0
- (void)_cancelAllQueuedOperationsWithError:(id)arg1;	// IMP=0x00000000000c7ac7
- (void)_resumeAllOperations;	// IMP=0x00000000000c7971
- (void)_suspendAllOperations;	// IMP=0x00000000000c7818
- (unsigned long long)_outstandingRequests;	// IMP=0x00000000000c76a9
- (void)_enqueueRequest:(id)arg1 shouldPrioritize:(_Bool)arg2;	// IMP=0x00000000000c7332
- (void)_sendProtocolInfoServiceExchangeData:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c6e66
- (void)_handleResponseData:(id)arg1 fromCharacteristic:(id)arg2 error:(id)arg3;	// IMP=0x00000000000c5d9c
- (void)_requestResponseForRequest:(id)arg1;	// IMP=0x00000000000c5b86
- (void)_handleWriteCompletionForCharacteristic:(id)arg1 error:(id)arg2;	// IMP=0x00000000000c59b1
- (void)_sendData:(id)arg1 toCharacteristic:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c55cd
- (void)_sendControlPacket:(id)arg1 forRequest:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c51f7
- (unsigned long long)_maximumControlWriteLengthForRequest:(id)arg1;	// IMP=0x00000000000c4de8
- (void)_reallySendRequest:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c4d0a
- (void)_sendRequest:(id)arg1 shouldPrioritize:(_Bool)arg2 responseHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c4abb
- (id)_pendingResponseForRequest:(id)arg1;	// IMP=0x00000000000c48e8
- (id)_pendingRequestForCharacteristic:(id)arg1;	// IMP=0x00000000000c4715
- (void)identifyWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000000000c4517
- (unsigned long long)_getPairSetupType;	// IMP=0x00000000000c44a6
- (void)_sendPairingRequestData:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c4239
- (void)listPairingsWithCompletionQueue:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c415b
- (_Bool)removePairingForCurrentControllerOnQueue:(id)arg1 completion:(CDUnknownBlockType)arg2 serverPairingCompletion:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c3d89
- (_Bool)removePairingForCurrentControllerOnQueue:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c3d74
- (void)removePairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c3c69
- (void)addPairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c3b59
- (void)_pairingCompletedWithError:(id)arg1;	// IMP=0x00000000000c33ea
- (_Bool)tryPairingPassword:(id)arg1 onboardingSetupPayloadString:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000c3330
- (void)_handlePairingSetupCodeRequestWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000c30a6
- (void)_handlePairSetupSessionExchangeData:(id)arg1;	// IMP=0x00000000000c2e10
- (_Bool)stopPairingWithError:(id *)arg1;	// IMP=0x00000000000c2d9d
- (void)continuePairingAfterAuthPrompt;	// IMP=0x00000000000c2d2c
- (_Bool)_parsePairingFeaturesCharacteristic:(id)arg1 authMethod:(unsigned long long *)arg2 error:(id *)arg3;	// IMP=0x00000000000c2abf
- (void)_getPairingFeaturesWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000c27b9
- (void)_checkForAuthPrompt:(_Bool)arg1;	// IMP=0x00000000000c2765
- (void)startPairingWithRequest:(id)arg1;	// IMP=0x00000000000c2679
- (void)_enableBroadcastEvent:(_Bool)arg1 interval:(unsigned long long)arg2 forCharacteristic:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000c2236
- (void)_configureCharacteristics:(id)arg1 queue:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c1c70
- (void)configureCharacteristics:(id)arg1 queue:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c1b65
- (void)_configureBroadcastKeyGeneration:(unsigned char)arg1 service:(id)arg2 withCompletion:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c182a
- (void)_handleEventIndicationForCharacteristic:(id)arg1;	// IMP=0x00000000000c1668
- (void)_handleHAPNotificationStateUpdateForCharacteristic:(id)arg1 error:(id)arg2;	// IMP=0x00000000000c1493
- (void)_enableEvent:(_Bool)arg1 toCharacteristic:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c1233
- (void)_performEnableEvent:(_Bool)arg1 toCharacteristic:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c10cf
- (void)_enableEvent:(_Bool)arg1 forCharacteristic:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;	// IMP=0x00000000000c09c1
- (void)_enableEvents:(_Bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;	// IMP=0x00000000000bf865
- (void)enableEvents:(_Bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;	// IMP=0x00000000000bf0f6
- (void)markNotifyingCharacteristicUpdatedforCharacteristic:(id)arg1;	// IMP=0x00000000000bee0c
- (void)_performTimedWriteExecuteForCharacteristic:(id)arg1 value:(id)arg2 options:(long long)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000bea3e
- (void)_performTimedWritePrepareWithValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 contextData:(id)arg4 options:(long long)arg5 completionHandler:(CDUnknownBlockType)arg6;	// IMP=0x00000000000be614
- (void)_performTimedWriteValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 contextData:(id)arg4 options:(long long)arg5 completionHandler:(CDUnknownBlockType)arg6;	// IMP=0x00000000000be4cc
- (void)_performWriteValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 contextData:(id)arg4 options:(long long)arg5 completionHandler:(CDUnknownBlockType)arg6;	// IMP=0x00000000000be099
- (void)_writeValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 contextData:(id)arg4 options:(long long)arg5 completionHandler:(CDUnknownBlockType)arg6;	// IMP=0x00000000000bdc87
- (void)writeCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000bdacd
- (void)_readValueForCharacteristic:(id)arg1 options:(long long)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000bd5ce
- (void)_updatePropertiesFromCharacteristic:(id)arg1;	// IMP=0x00000000000bd492
- (void)_readCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000bd0f2
- (void)readCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000bcf3a
- (id)_parseCharacteristic:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000bbf00
- (id)_parseService:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000baa9c
- (_Bool)shouldVerifyHAPService:(id)arg1;	// IMP=0x00000000000ba85b
- (_Bool)shouldVerifyHAPCharacteristic:(id)arg1;	// IMP=0x00000000000ba3be
- (_Bool)isHAPCharacteristic:(id)arg1;	// IMP=0x00000000000ba16d
- (void)_handleReadServiceSignature:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b9fc4
- (void)_handleReadCharacteristicSignature:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b9e1b
- (void)_readServiceSignature:(id)arg1;	// IMP=0x00000000000b8be4
- (void)_readCharacteristicSignature:(id)arg1;	// IMP=0x00000000000b7d23
- (id)_getProtocolInfoService;	// IMP=0x00000000000b7b60
- (id)_getServiceInstanceID:(id)arg1;	// IMP=0x00000000000b7906
- (id)_getCharacteristicInstanceID:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000b767f
- (void)_readCharacteristicSignatures;	// IMP=0x00000000000b7312
- (void)_handleUpdateValueForCharacteristic:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b6d41
- (void)_handleReadDescriptorValue:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b6ae4
- (void)_readDescriptorValue:(id)arg1;	// IMP=0x00000000000b68c4
- (void)_handleReadCharacteristicValue:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b6780
- (void)_readCharacteristicValue:(id)arg1;	// IMP=0x00000000000b655f
- (void)_handleDiscoveredDescriptors:(id)arg1;	// IMP=0x00000000000b63f3
- (void)_handleDiscoveredCharacteristic:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b6164
- (void)_discoverCharacteristic:(id)arg1;	// IMP=0x00000000000b5fd3
- (void)_handleReadServiceInstanceId:(id)arg1;	// IMP=0x00000000000b5d5e
- (void)_handleDiscoveredCharacteristicsForService:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b595e
- (void)_discoverCharacteristicsForService:(id)arg1;	// IMP=0x00000000000b57d1
- (void)_handleDiscoveredServices:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b51d1
- (void)_discoverServices;	// IMP=0x00000000000b5192
- (void)_cacheServices:(id)arg1;	// IMP=0x00000000000b4d2a
- (id)_serviceCacheFromHAPService:(id)arg1 serviceOrder:(unsigned long long)arg2;	// IMP=0x00000000000b498e
- (id)_hapServicesFromCache;	// IMP=0x00000000000b3d2a
- (id)_getCachedService:(id)arg1;	// IMP=0x00000000000b3b31
- (id)_getCBService:(id)arg1 instanceOrder:(unsigned long long)arg2;	// IMP=0x00000000000b36e7
- (id)_getCBCharacteristic:(id)arg1 instanceId:(id)arg2 service:(id)arg3;	// IMP=0x00000000000b33bd
- (void)_handleCompletedDiscovery;	// IMP=0x00000000000b1ffa
- (void)_retryDiscovery;	// IMP=0x00000000000b1e58
- (_Bool)_cancelDiscoveryWithError:(id)arg1;	// IMP=0x00000000000b1836
- (void)_discoverWithType:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000b1421
- (void)_readPendingDiscoveredCharacteristicTypesWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000000000b0e47
- (void)discoverAccessoriesAndReadCharacteristicTypes:(id)arg1;	// IMP=0x00000000000b0d8f
- (void)discoverAccessories;	// IMP=0x00000000000b0d7b
- (void)_removePairingOfAccessoryServerCancelledMidPairing;	// IMP=0x00000000000b0c78
- (id)_characteristicForCBCharacteristic:(id)arg1;	// IMP=0x00000000000b0a51
- (id)_serviceForCBService:(id)arg1;	// IMP=0x00000000000b0738
- (_Bool)_delegateRespondsToSelector:(SEL)arg1;	// IMP=0x00000000000b0684
- (void)_createPrimaryAccessoryFromAdvertisementData;	// IMP=0x00000000000b04fd
- (unsigned long long)hapBLEProtocolVersion;	// IMP=0x00000000000b04f2
@property(nonatomic) long long connectionState; // @synthesize connectionState=_connectionState;
- (void)setHasBeenDiscovered:(_Bool)arg1;	// IMP=0x00000000000b0438
@property(readonly, nonatomic) _Bool hasBeenDiscovered; // @synthesize hasBeenDiscovered=_hasBeenDiscovered;
@property(nonatomic) _Bool hasValidCache; // @synthesize hasValidCache=_hasValidCache;
@property(readonly, copy) NSString *description;
@property(readonly, copy) NSString *debugDescription;
// Preceding property had unknown attributes: ?
// Original attribute string: T@"NSString",?,R,C

- (id)descriptionWithPointer:(_Bool)arg1;	// IMP=0x00000000000b0235
- (void)dealloc;	// IMP=0x00000000000b01c8
- (void)_resetWithError:(id)arg1;	// IMP=0x00000000000af94c
- (id)initWithPeripheral:(id)arg1 name:(id)arg2 pairingUsername:(id)arg3 statusFlags:(id)arg4 stateNumber:(id)arg5 stateChanged:(_Bool)arg6 connectReason:(unsigned char)arg7 configNumber:(id)arg8 category:(id)arg9 setupHash:(id)arg10 connectionIdleTime:(unsigned char)arg11 browser:(id)arg12 keyStore:(id)arg13 whbStableIdentifier:(id)arg14;	// IMP=0x00000000000af016

// Remaining properties
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

