//
//     Generated by classdump-c 4.2.0 (64 bit) (iOS port by DreamDevLost, Updated by Kevin Bradley.)(Debug version compiled Dec 27 2024 14:18:54).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class NSArray;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct BeamSearch;

struct BeamSearchOptions {
    unsigned long long maxSeqLen;
    _Bool terminateAtEOS;
    struct optional<int> maxSteps;
    struct optional<std::vector<std::string>> excludeTokens;
    NSArray *denyListRules;
    float lengthNormalizationAlpha;
    float lengthNormFactor;
    unsigned long long scorerType;
    int beamWidth;
    int topKPerStep;
    float lengthNormalizationAlpha;
};

struct CustomVocabulary;

struct EspressoNet;

struct EspressoTensor {
    CDUnknownFunctionPointerType *_vptr$Tensor;
    int type_;
    struct TensorShape shape_;
    struct shared_ptr<ik::TensorStorage> storage_;
};

struct ModelOutput {
    vector_8ca568ff _field1;
    shared_ptr_996236a7 _field2;
    _Bool _field3;
};

struct TensorShape {
    struct vector<unsigned long, std::allocator<unsigned long>> sizes_;
};

struct TensorStorage;

struct __shared_weak_count;

struct __tree_end_node<std::__tree_node_base<void *>*> {
    void *__left_;
};

struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep {
            union {
                struct __short {
                    struct {
                        unsigned int :1;
                        unsigned int :7;
                    } _field1;
                    char _field2[0];
                    char _field3[23];
                } _field1;
                struct __long {
                    struct {
                        unsigned int :1;
                        unsigned int :63;
                    } _field1;
                    unsigned long long _field2;
                    char *_field3;
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct map<std::string, std::vector<float>, std::less<std::string>, std::allocator<std::pair<const std::string, std::vector<float>>>> {
    struct __tree<std::__value_type<std::string, std::vector<float>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<float>>, std::less<std::string>>, std::allocator<std::__value_type<std::string, std::vector<float>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::vector<float>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<float>>, std::less<std::string>>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, std::vector<unsigned long>, std::less<std::string>, std::allocator<std::pair<const std::string, std::vector<unsigned long>>>> {
    struct __tree<std::__value_type<std::string, std::vector<unsigned long>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<unsigned long>>, std::less<std::string>>, std::allocator<std::__value_type<std::string, std::vector<unsigned long>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::vector<unsigned long>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<unsigned long>>, std::less<std::string>>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct optional<int> {
    union {
        char __null_state_;
        int __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::vector<std::string>> {
    union {
        char __null_state_;
        struct vector<std::string, std::allocator<std::string>> __val_;
    } ;
    _Bool __engaged_;
};

struct shared_ptr<csu::BeamSearch> {
    struct BeamSearch *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<csu::CustomVocabulary> {
    struct CustomVocabulary *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ik::EspressoNet> {
    struct EspressoNet *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ik::TensorStorage> {
    struct TensorStorage *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<std::unordered_map<std::string, std::vector<float>>> {
    void *_field1;
    struct __shared_weak_count *_field2;
};

struct unique_ptr<ik::EspressoNet, std::default_delete<ik::EspressoNet>> {
    struct __compressed_pair<ik::EspressoNet *, std::default_delete<ik::EspressoNet>> {
        struct EspressoNet *__value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, ik::EspressoTensor>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, ik::EspressoTensor>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, ik::EspressoTensor>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, ik::EspressoTensor>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, ik::EspressoTensor>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, ik::EspressoTensor>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, ik::Tensor>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, ik::Tensor>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, ik::Tensor>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, ik::Tensor>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, ik::Tensor>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, ik::Tensor>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<std::string, ik::EspressoTensor, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, ik::EspressoTensor>>> {
    struct __hash_table<std::__hash_value_type<std::string, ik::EspressoTensor>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, ik::EspressoTensor>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, ik::EspressoTensor>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, ik::EspressoTensor>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, ik::EspressoTensor>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, ik::EspressoTensor>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, ik::EspressoTensor>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, ik::EspressoTensor>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, ik::EspressoTensor>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, ik::EspressoTensor>, std::hash<std::string>, std::equal_to<std::string>>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, ik::EspressoTensor>, std::equal_to<std::string>, std::hash<std::string>>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::string, ik::Tensor, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, ik::Tensor>>> {
    struct __hash_table<std::__hash_value_type<std::string, ik::Tensor>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, ik::Tensor>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, ik::Tensor>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, ik::Tensor>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, ik::Tensor>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, ik::Tensor>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, ik::Tensor>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, ik::Tensor>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, ik::Tensor>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, ik::Tensor>, std::hash<std::string>, std::equal_to<std::string>>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, ik::Tensor>, std::equal_to<std::string>, std::hash<std::string>>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<float, std::allocator<float>> {
    float *__begin_;
    float *__end_;
    struct __compressed_pair<float *, std::allocator<float>> {
        float *__value_;
    } __end_cap_;
};

struct vector<std::pair<NSString *, unsigned long>, std::allocator<std::pair<NSString *, unsigned long>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<NSString *, unsigned long>*, std::allocator<std::pair<NSString *, unsigned long>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::string, std::allocator<std::string>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::string *, std::allocator<std::string>> {
        void *__value_;
    } __end_cap_;
};

struct vector<unsigned long, std::allocator<unsigned long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> {
        unsigned long long *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep {
            union {
                struct __short {
                    struct {
                        unsigned int :1;
                        unsigned int :7;
                    } _field1;
                    char _field2[0];
                    char _field3[23];
                } _field1;
                struct __long {
                    struct {
                        unsigned int :1;
                        unsigned int :63;
                    } _field1;
                    unsigned long long _field2;
                    char *_field3;
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
} basic_string_6b4a5e99;

typedef struct map<std::string, std::vector<float>, std::less<std::string>, std::allocator<std::pair<const std::string, std::vector<float>>>> {
    struct __tree<std::__value_type<std::string, std::vector<float>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<float>>, std::less<std::string>>, std::allocator<std::__value_type<std::string, std::vector<float>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::vector<float>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<float>>, std::less<std::string>>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
} map_33c06f8b;

typedef struct map<std::string, std::vector<unsigned long>, std::less<std::string>, std::allocator<std::pair<const std::string, std::vector<unsigned long>>>> {
    struct __tree<std::__value_type<std::string, std::vector<unsigned long>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<unsigned long>>, std::less<std::string>>, std::allocator<std::__value_type<std::string, std::vector<unsigned long>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::vector<unsigned long>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<unsigned long>>, std::less<std::string>>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
} map_0c0ea2fa;

typedef struct shared_ptr<csu::BeamSearch> {
    struct BeamSearch *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_2fd4f744;

typedef struct shared_ptr<csu::CustomVocabulary> {
    struct CustomVocabulary *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_79c86160;

typedef struct shared_ptr<ik::EspressoNet> {
    struct EspressoNet *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_e1ce2731;

typedef struct shared_ptr<std::unordered_map<std::string, std::vector<float>>> {
    void *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_996236a7;

typedef struct vector<float, std::allocator<float>> {
    float *__begin_;
    float *__end_;
    struct __compressed_pair<float *, std::allocator<float>> {
        float *__value_;
    } __end_cap_;
} vector_8ca568ff;

