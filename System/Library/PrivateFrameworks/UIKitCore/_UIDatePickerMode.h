//
//     Generated by classdump-c 4.2.0 (64 bit) (iOS port by DreamDevLost, Updated by Kevin Bradley.)(Debug version compiled Dec 27 2024 14:18:54).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSArray, NSDate, NSDateComponents, NSNumberFormatter, NSString, UIColor, UIFont, _UIDatePickerView;

__attribute__((visibility("hidden")))
@interface _UIDatePickerMode : NSObject
{
    NSDateComponents *_selectedDateComponents;	// 8 = 0x8
    NSDateComponents *_baseDateComponents;	// 16 = 0x10
    unsigned long long *_elements;	// 24 = 0x18
    long long _yearsSinceBaseDate;	// 32 = 0x20
    struct _NSRange _maxDayRange;	// 40 = 0x28
    struct _NSRange _maxMonthRange;	// 56 = 0x38
    NSString *_localizedFormatString;	// 72 = 0x48
    NSArray *_dateFormatters;	// 80 = 0x50
    UIColor *_todayTextColor;	// 88 = 0x58
    UIFont *_amPmFont;	// 96 = 0x60
    UIFont *_font;	// 104 = 0x68
    UIFont *_defaultTimeFont;	// 112 = 0x70
    NSString *_amString;	// 120 = 0x78
    NSString *_pmString;	// 128 = 0x80
    NSDateComponents *_todayDateComponents;	// 136 = 0x88
    NSNumberFormatter *_formatter;	// 144 = 0x90
    _UIDatePickerView *_datePickerView;	// 152 = 0x98
    _Bool _isUsingJapaneseCalendar;	// 160 = 0xa0
    unsigned long long _numberOfComponents;	// 168 = 0xa8
    long long _minuteInterval;	// 176 = 0xb0
    double _todaySinceReferenceDate;	// 184 = 0xb8
    NSDate *_minimumDate;	// 192 = 0xc0
    NSDateComponents *_minimumDateComponents;	// 200 = 0xc8
    NSDate *_maximumDate;	// 208 = 0xd0
    NSDateComponents *_maximumDateComponents;	// 216 = 0xd8
    NSDate *_baseDate;	// 224 = 0xe0
    NSDate *_originatingDate;	// 232 = 0xe8
}

+ (unsigned long long)extractableCalendarUnits;	// IMP=0x00600000012a766d
+ (id)_datePickerModeWithFormatString:(id)arg1 datePickerView:(id)arg2;	// IMP=0x00600000012a5bfc
+ (id)_datePickerModeWithMode:(long long)arg1 datePickerView:(id)arg2;	// IMP=0x00600000012a5b04
+ (long long)datePickerMode;	// IMP=0x00600000012a5a84
+ (id)newDateFromGregorianYear:(long long)arg1 month:(long long)arg2 day:(long long)arg3 timeZone:(id)arg4;	// IMP=0x00600000012a5982
+ (void)initialize;	// IMP=0x00600000012a58d8
- (void).cxx_destruct;	// IMP=0x00000000012aaaf3
@property(retain, nonatomic) NSDate *originatingDate; // @synthesize originatingDate=_originatingDate;
@property(nonatomic) long long yearsSinceBaseDate; // @synthesize yearsSinceBaseDate=_yearsSinceBaseDate;
@property(retain, nonatomic) NSDate *baseDate; // @synthesize baseDate=_baseDate;
@property(retain, nonatomic) NSString *localizedFormatString; // @synthesize localizedFormatString=_localizedFormatString;
@property(nonatomic) __weak _UIDatePickerView *datePickerView; // @synthesize datePickerView=_datePickerView;
@property(retain, nonatomic) NSDateComponents *selectedDateComponents; // @synthesize selectedDateComponents=_selectedDateComponents;
@property(readonly, nonatomic) NSDateComponents *maximumDateComponents; // @synthesize maximumDateComponents=_maximumDateComponents;
@property(readonly, nonatomic) NSDate *maximumDate; // @synthesize maximumDate=_maximumDate;
@property(readonly, nonatomic) NSDateComponents *minimumDateComponents; // @synthesize minimumDateComponents=_minimumDateComponents;
@property(readonly, nonatomic) NSDate *minimumDate; // @synthesize minimumDate=_minimumDate;
@property(nonatomic) double todaySinceReferenceDate; // @synthesize todaySinceReferenceDate=_todaySinceReferenceDate;
@property(nonatomic) long long minuteInterval; // @synthesize minuteInterval=_minuteInterval;
@property(nonatomic) unsigned long long numberOfComponents; // @synthesize numberOfComponents=_numberOfComponents;
- (void)updateEnabledStateOfViewForRow:(long long)arg1 inComponent:(long long)arg2;	// IMP=0x00000000012aa928
- (_Bool)_shouldEnableValueForRow:(long long)arg1 inComponent:(long long)arg2 calendarUnit:(unsigned long long)arg3;	// IMP=0x00000000012aa8a8
- (_Bool)_shouldEnableValueForRow:(long long)arg1 column:(long long)arg2;	// IMP=0x00000000012aa7b5
- (_Bool)_scrollingAnyColumnExcept:(int)arg1;	// IMP=0x00000000012aa73c
- (_Bool)_isComponentScrolling:(long long)arg1;	// IMP=0x00000000012aa6b1
- (_Bool)areValidDateComponents:(id)arg1 comparingUnits:(long long)arg2;	// IMP=0x00000000012aa54a
- (id)viewForRow:(long long)arg1 inComponent:(long long)arg2 reusingView:(id)arg3;	// IMP=0x00000000012aa0cf
- (void)updateDateForNewDateRange;	// IMP=0x00000000012a9dc1
- (id)dateComponentsByRestrictingSelectedComponents:(id)arg1 withLastManipulatedColumn:(long long)arg2;	// IMP=0x00000000012a99cf
- (_Bool)_monthExists:(long long)arg1 inYear:(long long)arg2;	// IMP=0x00000000012a98b4
- (long long)_numberOfDaysInDateComponents:(id)arg1;	// IMP=0x00000000012a974d
@property(readonly, nonatomic) _Bool hasSelectedDateComponents;
- (void)_updateSelectedDateComponentsWithNewValueInComponent:(long long)arg1 usingSelectionBarValue:(_Bool)arg2;	// IMP=0x00000000012a9188
- (void)resetSelectedDateComponentsWithValuesUnderSelectionBars;	// IMP=0x00000000012a9167
- (void)updateSelectedDateComponentsWithNewValueInComponent:(long long)arg1;	// IMP=0x00000000012a9153
- (void)loadDate:(id)arg1 animated:(_Bool)arg2;	// IMP=0x00000000012a8e1b
- (long long)validateValue:(long long)arg1 forCalendarUnit:(unsigned long long)arg2;	// IMP=0x00000000012a8e12
- (long long)rowForValue:(long long)arg1 forCalendarUnit:(unsigned long long)arg2 currentRow:(long long)arg3;	// IMP=0x00000000012a8cc0
- (long long)valueForDate:(id)arg1 dateComponents:(id)arg2 calendarUnit:(unsigned long long)arg3;	// IMP=0x00000000012a8c61
- (long long)rowForDate:(id)arg1 dateComponents:(id)arg2 component:(long long)arg3 currentRow:(long long)arg4;	// IMP=0x00000000012a8bbc
- (struct _NSRange)rangeForCalendarUnit:(unsigned long long)arg1;	// IMP=0x00000000012a8b39
- (long long)titleAlignmentForCalendarUnit:(unsigned long long)arg1;	// IMP=0x00000000012a8a98
- (id)titleForRow:(long long)arg1 inComponent:(long long)arg2;	// IMP=0x00000000012a8921
- (id)dateFormatForCalendarUnit:(unsigned long long)arg1;	// IMP=0x00000000012a88a1
- (id)dateForRow:(long long)arg1 inCalendarUnit:(unsigned long long)arg2;	// IMP=0x00000000012a8827
- (long long)valueForRow:(long long)arg1 inCalendarUnit:(unsigned long long)arg2;	// IMP=0x00000000012a86ef
- (long long)eraForYearRow:(long long)arg1;	// IMP=0x00000000012a864f
- (long long)yearForRow:(long long)arg1;	// IMP=0x00000000012a85af
- (long long)monthForRow:(long long)arg1;	// IMP=0x00000000012a8599
- (long long)dayForRow:(long long)arg1;	// IMP=0x00000000012a8583
- (long long)hourForRow:(long long)arg1;	// IMP=0x00000000012a8543
- (long long)minuteForRow:(long long)arg1;	// IMP=0x00000000012a84e8
- (long long)secondForRow:(long long)arg1;	// IMP=0x00000000012a848d
- (id)_dateForYearRow:(long long)arg1;	// IMP=0x00000000012a83d3
- (id)_dateByEnsuringValue:(long long)arg1 forCalendarUnit:(unsigned long long)arg2;	// IMP=0x00000000012a7fe4
- (unsigned long long)nextUnitSmallerThanUnit:(unsigned long long)arg1;	// IMP=0x00000000012a7f5c
- (unsigned long long)nextUnitLargerThanUnit:(unsigned long long)arg1;	// IMP=0x00000000012a7ed4
- (long long)_incrementForStaggeredTimeIntervals;	// IMP=0x00000000012a7e63
- (double)totalComponentWidthWithFont:(id)arg1;	// IMP=0x00000000012a7db1
@property(readonly, nonatomic) double totalComponentWidth; // @dynamic totalComponentWidth;
- (void)resetComponentWidths;	// IMP=0x00000000012a7cdd
- (void)noteCalendarChanged;	// IMP=0x00000000012a7b1d
- (long long)numberOfRowsForCalendarUnit:(unsigned long long)arg1;	// IMP=0x00000000012a7a9d
- (long long)numberOfRowsInComponent:(long long)arg1;	// IMP=0x00000000012a7a6c
- (long long)componentForCalendarUnit:(unsigned long long)arg1;	// IMP=0x00000000012a7a01
- (unsigned long long)calendarUnitForComponent:(long long)arg1;	// IMP=0x00000000012a79c5
@property(readonly, nonatomic) long long displayedCalendarUnits;
- (void)fixUpElementsForRTL;	// IMP=0x00000000012a77e8
@property(nonatomic) unsigned long long *elements;
@property(readonly, nonatomic, getter=isTimeIntervalMode) _Bool isTimeIntervalMode; // @dynamic isTimeIntervalMode;
- (double)widthForCalendarUnit:(unsigned long long)arg1 font:(id)arg2 maxWidth:(double)arg3;	// IMP=0x00000000012a75ec
- (double)widthForComponent:(long long)arg1 maxWidth:(double)arg2;	// IMP=0x00000000012a74dd
- (void)invalidateTodayTextColor;	// IMP=0x00000000012a7493
@property(readonly, nonatomic) UIColor *todayTextColor;
@property(readonly, nonatomic) double rowHeight;
@property(readonly, nonatomic) UIFont *amPmFont;
@property(readonly, nonatomic) UIFont *defaultTimeFont;
@property(readonly, nonatomic) UIFont *sizedFont;
@property(readonly, nonatomic) UIFont *font;
- (id)fontForCalendarUnit:(unsigned long long)arg1;	// IMP=0x00000000012a6ec6
@property(readonly, nonatomic) NSString *pmString;
@property(readonly, nonatomic) NSString *amString;
@property(retain, nonatomic) NSDateComponents *baseDateComponents;
- (void)clearBaseDate;	// IMP=0x00000000012a6abe
@property(retain, nonatomic) NSDateComponents *todayDateComponents;
- (id)dateFormatterForCalendarUnit:(unsigned long long)arg1;	// IMP=0x00000000012a6556
@property(readonly, nonatomic) long long datePickerMode;
@property(readonly, nonatomic, getter=is24Hour) _Bool is24Hour; // @dynamic is24Hour;
- (double)componentWidthForTwoDigitCalendarUnit:(unsigned long long)arg1 font:(id)arg2 maxWidth:(double)arg3;	// IMP=0x00000000012a627b
- (void)_shouldReset:(id)arg1;	// IMP=0x00000000012a61f1
- (id)_style;	// IMP=0x00000000012a6177
- (id)timeZone;	// IMP=0x00000000012a60fd
- (id)locale;	// IMP=0x00000000012a6083
- (id)calendarForFormatters;	// IMP=0x00000000012a6009
- (id)calendar;	// IMP=0x00000000012a5f8f
- (_Bool)followsSystemHourCycle;	// IMP=0x00000000012a5f21
- (long long)_yearlessYearForMonth:(long long)arg1;	// IMP=0x00000000012a5e7a
- (void)dealloc;	// IMP=0x00000000012a5de5
- (id)init;	// IMP=0x00000000012a5c88

@end

