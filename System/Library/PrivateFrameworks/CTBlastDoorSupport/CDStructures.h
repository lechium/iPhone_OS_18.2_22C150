//
//     Generated by classdump-c 4.2.0 (64 bit) (iOS port by DreamDevLost, Updated by Kevin Bradley.)(Debug version compiled Dec 27 2024 14:18:54).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Named Structures

struct AccessControl {
    struct Default fDefault;
    struct vector<ctb::ProvisioningConfiguration::AccessControl::Server, std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>> fServer;
};

struct AddressEntry;

struct AddressEntryList {
    struct vector<ctb::chatbot::AddressEntry, std::allocator<ctb::chatbot::AddressEntry>> fList;
};

struct BootstrappingInfo {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fBootstrappingTransactionID;
    long long fLifetime;
};

struct BotInformation {
    struct PCC fPcc;
    struct optional<std::string> fVersion;
    struct optional<std::string> fProvider;
    struct optional<std::string> fEmail;
    struct optional<std::string> fColor;
    struct optional<std::string> fBackgroundImageUrl;
    struct optional<std::string> fWebsite;
    struct optional<std::string> fTcPageUrl;
    struct optional<ctb::chatbot::AddressEntryList> fAddresses;
};

struct CPIMEncapsulatedMessage;

struct CPIMMessage {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fFromUri;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fToUri;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fDateTime;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fImdnMessageID;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fImdnDipositionNotification;
    struct vector<ctb::CPIMNamespace, std::allocator<ctb::CPIMNamespace>> fNamespaces;
    struct vector<ctb::CPIMEncapsulatedMessage, std::allocator<ctb::CPIMEncapsulatedMessage>> fEncapsulatedMessages;
};

struct CPIMNamespace;

struct CPMGroupManagement {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fId;
    struct optional<ctb::CPMGroupManagement::Response> fResponse;
};

struct CapDiscovery {
    long long fDefaultDisc;
    long long fNonRCSCapInfoExpiry;
    long long fCapInfoExpiry;
    _Bool fDisableInitialAddressBookScan;
};

struct CardCarouselContent;

struct CardCarouselLayout {
    int fWidth;
    struct optional<ctb::chatbot::CardTitleStyle> fTitleStyle;
    struct optional<ctb::chatbot::CardDescriptionStyle> fDescriptionStyle;
    struct optional<ctb::chatbot::CardStyle> fCardStyle;
};

struct CardCarouselMessage {
    struct CardCarouselLayout fLayout;
    struct vector<ctb::chatbot::CardCarouselContent, std::allocator<ctb::chatbot::CardCarouselContent>> fContent;
};

struct CardContent {
    struct optional<ctb::chatbot::CardMedia> fMedia;
    struct optional<ctb::chatbot::CardTitle> fTitle;
    struct optional<ctb::chatbot::CardDescription> fCardDescription;
    struct optional<ctb::chatbot::SuggestedChipList> fChipList;
};

struct CardDescription {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fText;
};

struct CardDescriptionStyle {
    struct CardFontStyle fStyle;
};

struct CardFontStyle {
    _Bool fBold;
    _Bool fItalics;
    _Bool fUnderline;
};

struct CardLayout {
    int fCardOrientation;
    int fImageAlignment;
    struct optional<ctb::chatbot::CardTitleStyle> fTitleStyle;
    struct optional<ctb::chatbot::CardDescriptionStyle> fDescriptionStyle;
    struct optional<ctb::chatbot::CardStyle> fCardStyle;
};

struct CardMedia {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fMediaUrl;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fMediaContentType;
    unsigned long long fMediaFileSize;
    struct optional<std::string> fThumbnailUrl;
    struct optional<std::string> fThumbnailContentType;
    struct optional<unsigned long> fThumbnailFileSize;
    int fHeight;
    struct optional<std::string> fContentDescription;
};

struct CardMessage {
    struct CardLayout fLayout;
    struct CardContent fContent;
};

struct CardStyle {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fUri;
};

struct CardTitle {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fText;
};

struct CardTitleStyle {
    struct CardFontStyle fStyle;
};

struct CategoryList {
    struct vector<std::string, std::allocator<std::string>> fCategoryList;
};

struct Chat {
    long long fChatRevokeTimer;
    long long fMaxSize;
    long long fTimerIdle;
    long long fMaxAdhocGroupSize;
    _Bool fAutAcceptGroupChat;
    _Bool fAutAccept;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fConferenceFactoryURI;
    struct optional<std::string> fSpamReportingURI;
};

struct Chatbot {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fSpecificChatbotsList;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fBotinfoFQDNRoot;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fChatbotDirectory;
    long long fChatbotMsgTech;
    _Bool fPrivacyDisable;
    _Bool fIdentityInEnrichedSearch;
};

struct ClientAuthenticityRequest {
    struct vector<ctb::ClientAuthenticityRequest::Method, std::allocator<ctb::ClientAuthenticityRequest::Method>> fMethods;
};

struct CommunicationAddress {
    struct TelephoneInformation fTelInformation;
    struct URIEntryList fUriList;
};

struct Default {
    struct set<std::string, std::less<std::string>, std::allocator<std::string>> fAppIDs;
};

struct Description {
    struct optional<std::string> fSubject;
    struct optional<ctb::SIPConferenceInfo::SubjectExt> fSubjectExt;
};

struct FileDescriptor {
    int fFileType;
    struct optional<ctb::FileTransferDescriptor::FileDescriptor::FileDisposition> fFileDisposition;
    unsigned long long fFileSize;
    struct optional<std::string> fFileName;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fResolvedContentType;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fUrl;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fExpirationDate;
    struct optional<unsigned long> fPlayingLengthInSeconds;
};

struct FileTransfer {
    long long fMaxSizeFileTr;
    struct optional<long> fFtWarnSize;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fFtHTTPCSURI;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fFtHTTPDLURI;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fFtHTTPCSUser;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fFtHTTPCSPwd;
    _Bool fFtHTTPFallback;
    _Bool fFtAutAccept;
    long long fFtMaxOneToManyRecipients;
};

struct FileTransferDescriptor {
    struct FileDescriptor fFileDescriptor;
    struct optional<ctb::FileTransferDescriptor::FileDescriptor> fThumbnailDescriptor;
};

struct GeoPushLocation {
    double fLatitude;
    double fLongitude;
};

struct IMCompositionIndication {
    int fState;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fLastActive;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fContentType;
    unsigned long long fRefresh;
};

struct IMDispositionNotification {
    int fDispositionType;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fMessageID;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fDateTime;
};

struct IMRevoke {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fMessageID;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fDestination;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fFrom;
    int fResult;
};

struct IMS3GPP {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fAppID;
    struct optional<std::string> fName;
    struct set<std::string, std::less<std::string>, std::allocator<std::string>> fPublicUserIdentityList;
    struct set<std::string, std::less<std::string>, std::allocator<std::string>> fPcscfList;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fHomeDomain;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fPrivateUserIdentity;
    long long fTimer_T4;
    long long fTimer_T2;
    long long fTimer_T1;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fRealm;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fAuthType;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fUserName;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fUserPassword;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fPsSignalling;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fPsMedia;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fPsRTMedia;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fPsSignallingRoaming;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fPsMediaRoaming;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fPsRTMediaRoaming;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fWifiSignalling;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fWifiMedia;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fWifiRTMedia;
    struct optional<long> fRegRetryBaseTime;
    struct optional<long> fRegRetryMaxTime;
    _Bool fPdpContextOperPref;
    _Bool fKeepAliveEnabled;
};

struct MediaEntry;

struct MediaList {
    struct vector<ctb::chatbot::MediaEntry, std::allocator<ctb::chatbot::MediaEntry>> fList;
};

struct MenuItem {
    struct vector<ctb::chatbot::MenuL0Content, std::allocator<ctb::chatbot::MenuL0Content>> fList;
};

struct MenuL0Content;

struct Message {
    struct optional<std::variant<ctb::chatbot::CardMessage, ctb::chatbot::CardCarouselMessage, ctb::chatbot::SuggestedChipList>> fMessageContent;
};

struct Messaging {
    _Bool fDisplayNotificationSwitch;
    long long fOnetoManySelectedTech;
    long long fMaxOneToManyRecipients;
    struct optional<ctb::ProvisioningConfiguration::Messaging::Chatbot> fChatbot;
    struct optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer> fFileTransfer;
    struct optional<ctb::ProvisioningConfiguration::Messaging::Chat> fChat;
    struct optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg> fStandaloneMsg;
};

struct Method;

struct OrgDetails {
    struct optional<ctb::chatbot::CommunicationAddress> fCommunicationAddress;
    struct optional<ctb::chatbot::MediaList> fMediaList;
    struct optional<ctb::chatbot::OrgName> fOrgName;
    struct optional<std::string> fOrgDescription;
    struct optional<ctb::chatbot::CategoryList> fCategoryList;
    struct optional<ctb::chatbot::WebResources> fWebResources;
};

struct OrgName {
    struct vector<ctb::chatbot::OrgNameEntry, std::allocator<ctb::chatbot::OrgNameEntry>> fList;
};

struct OrgNameEntry;

struct PCC {
    struct optional<ctb::chatbot::OrgDetails> fOrgDetails;
    struct optional<std::string> fPccType;
};

struct ProvisioningConfiguration {
    struct optional<ctb::ProvisioningConfiguration::Token> fToken;
    struct optional<ctb::ProvisioningConfiguration::Vers> fVers;
    struct optional<ctb::ProvisioningConfiguration::AccessControl> fAccessControl;
    struct optional<ctb::ProvisioningConfiguration::IMS3GPP> fIms;
    struct optional<ctb::ProvisioningConfiguration::Services> fServices;
    struct optional<ctb::ProvisioningConfiguration::Messaging> fMessaging;
    struct optional<ctb::ProvisioningConfiguration::CapDiscovery> fCapDiscovery;
};

struct RenderInformation {
    struct BotInformation fBotInfo;
    struct optional<ctb::chatbot::MenuItem> fPersistentMenu;
    struct VerificationDetails fVerificationDetails;
    struct optional<std::string> fGenericCSSTemplateUrl;
};

struct Response {
    unsigned int fResponseCode;
};

struct SIPConferenceInfo {
    struct optional<ctb::SIPConferenceInfo::Description> fDescription;
    struct vector<ctb::SIPConferenceInfo::User, std::allocator<ctb::SIPConferenceInfo::User>> fUsers;
};

struct SIPResourceLists {
    struct vector<std::string, std::allocator<std::string>> fParticipants;
};

struct Server;

struct Services {
    struct optional<ctb::ProvisioningConfiguration::Services::DataOffBehavior> fRcsMessagingDataOff;
    struct optional<ctb::ProvisioningConfiguration::Services::DataOffBehavior> fFileTransferDataOff;
    _Bool fGeolocPushAuth;
    int fStandaloneMsgAuth;
    _Bool fFtAuth;
    _Bool fGroupChatAuth;
    _Bool fChatAuth;
    struct set<std::string, std::less<std::string>, std::allocator<std::string>> fSupportedRCSProfileVersions;
};

struct StandaloneMsg {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fExploderUri;
    long long fSwitchoverSize;
    long long fMaxSize;
};

struct SubjectExt {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fParticipantURI;
};

struct SuggestedChip;

struct SuggestedChipList {
    struct vector<ctb::chatbot::SuggestedChip, std::allocator<ctb::chatbot::SuggestedChip>> fList;
};

struct TelephoneInformation {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fLabel;
    struct TelephoneNumber fTelNumber;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fTelephoneType;
};

struct TelephoneNumber {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fNumber;
};

struct Token {
    long long fValidity;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fTok;
};

struct URIEntry;

struct URIEntryList {
    struct vector<ctb::chatbot::URIEntry, std::allocator<ctb::chatbot::URIEntry>> fList;
};

struct User;

struct VerificationDetails {
    _Bool fVerified;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fVerifiedBy;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fExpires;
};

struct Vers {
    long long fVersion;
    long long fValidity;
};

struct WebEntry;

struct WebResources {
    struct vector<ctb::chatbot::WebEntry, std::allocator<ctb::chatbot::WebEntry>> fList;
};

struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep {
            union {
                struct __short {
                    struct {
                        unsigned int __is_long_:1;
                        unsigned int __size_:7;
                    } ;
                    char __padding_[0];
                    char __data_[23];
                } __s;
                struct __long {
                    struct {
                        unsigned int __is_long_:1;
                        unsigned int __cap_:63;
                    } ;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
};

struct optional<ctb::BootstrappingInfo> {
    union {
        char __null_state_;
        struct BootstrappingInfo __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::CPIMMessage> {
    union {
        char __null_state_;
        struct CPIMMessage __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::CPMGroupManagement::Response> {
    union {
        char __null_state_;
        struct Response __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::CPMGroupManagement> {
    union {
        char __null_state_;
        struct CPMGroupManagement __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::ClientAuthenticityRequest> {
    union {
        char __null_state_;
        struct ClientAuthenticityRequest __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::FileTransferDescriptor::FileDescriptor::FileDisposition> {
    CDUnion_81a57ede ;
    _Bool __engaged_;
};

struct optional<ctb::FileTransferDescriptor::FileDescriptor> {
    union {
        char __null_state_;
        struct FileDescriptor __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::FileTransferDescriptor> {
    union {
        char __null_state_;
        struct FileTransferDescriptor __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::GeoPushLocation> {
    union {
        char __null_state_;
        struct GeoPushLocation __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::IMCompositionIndication> {
    union {
        char __null_state_;
        struct IMCompositionIndication __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::IMDispositionNotification> {
    union {
        char __null_state_;
        struct IMDispositionNotification __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::IMRevoke> {
    union {
        char __null_state_;
        struct IMRevoke __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::ProvisioningConfiguration::AccessControl> {
    union {
        char __null_state_;
        struct AccessControl __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::ProvisioningConfiguration::CapDiscovery> {
    union {
        char __null_state_;
        struct CapDiscovery __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::ProvisioningConfiguration::IMS3GPP> {
    union {
        char __null_state_;
        struct IMS3GPP __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::ProvisioningConfiguration::Messaging::Chat> {
    union {
        char __null_state_;
        struct Chat __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::ProvisioningConfiguration::Messaging::Chatbot> {
    union {
        char __null_state_;
        struct Chatbot __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer> {
    union {
        char __null_state_;
        struct FileTransfer __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg> {
    union {
        char __null_state_;
        struct StandaloneMsg __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::ProvisioningConfiguration::Messaging> {
    union {
        char __null_state_;
        struct Messaging __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::ProvisioningConfiguration::Services::DataOffBehavior> {
    CDUnion_81a57ede ;
    _Bool __engaged_;
};

struct optional<ctb::ProvisioningConfiguration::Services> {
    union {
        char __null_state_;
        struct Services __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::ProvisioningConfiguration::Token> {
    union {
        char __null_state_;
        struct Token __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::ProvisioningConfiguration::Vers> {
    union {
        char __null_state_;
        struct Vers __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::ProvisioningConfiguration> {
    union {
        char __null_state_;
        struct ProvisioningConfiguration __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::SIPConferenceInfo::Description> {
    union {
        char __null_state_;
        struct Description __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::SIPConferenceInfo::SubjectExt> {
    union {
        char __null_state_;
        struct SubjectExt __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::SIPConferenceInfo> {
    union {
        char __null_state_;
        struct SIPConferenceInfo __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::SIPResourceLists> {
    union {
        char __null_state_;
        struct SIPResourceLists __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::chatbot::AddressEntryList> {
    union {
        char __null_state_;
        struct AddressEntryList __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::chatbot::CardDescription> {
    union {
        char __null_state_;
        struct CardDescription __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::chatbot::CardDescriptionStyle> {
    union {
        char __null_state_;
        struct CardDescriptionStyle __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::chatbot::CardMedia> {
    union {
        char __null_state_;
        struct CardMedia __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::chatbot::CardStyle> {
    union {
        char __null_state_;
        struct CardStyle __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::chatbot::CardTitle> {
    union {
        char __null_state_;
        struct CardTitle __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::chatbot::CardTitleStyle> {
    union {
        char __null_state_;
        struct CardTitleStyle __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::chatbot::CategoryList> {
    union {
        char __null_state_;
        struct CategoryList __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::chatbot::CommunicationAddress> {
    union {
        char __null_state_;
        struct CommunicationAddress __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::chatbot::MediaList> {
    union {
        char __null_state_;
        struct MediaList __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::chatbot::MenuItem> {
    union {
        char __null_state_;
        struct MenuItem __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::chatbot::Message> {
    union {
        char __null_state_;
        struct Message __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::chatbot::OrgDetails> {
    union {
        char __null_state_;
        struct OrgDetails __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::chatbot::OrgName> {
    union {
        char __null_state_;
        struct OrgName __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::chatbot::RenderInformation> {
    union {
        char __null_state_;
        struct RenderInformation __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::chatbot::SuggestedChipList> {
    union {
        char __null_state_;
        struct SuggestedChipList __val_;
    } ;
    _Bool __engaged_;
};

struct optional<ctb::chatbot::WebResources> {
    union {
        char __null_state_;
        struct WebResources __val_;
    } ;
    _Bool __engaged_;
};

struct optional<long> {
    union {
        char __null_state_;
        long long __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::string> {
    union {
        char __null_state_;
        struct basic_string<char, std::char_traits<char>, std::allocator<char>> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::variant<ctb::chatbot::CardMessage, ctb::chatbot::CardCarouselMessage, ctb::chatbot::SuggestedChipList>> {
    union {
        char __null_state_;
        struct variant<ctb::chatbot::CardMessage, ctb::chatbot::CardCarouselMessage, ctb::chatbot::SuggestedChipList> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<unsigned long> {
    union {
        char __null_state_;
        unsigned long long __val_;
    } ;
    _Bool __engaged_;
};

struct set<std::string, std::less<std::string>, std::allocator<std::string>> {
    struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::string, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> {
                void *__left_;
            } __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::less<std::string>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct variant<ctb::chatbot::CardMessage, ctb::chatbot::CardCarouselMessage, ctb::chatbot::SuggestedChipList> {
    struct __impl<ctb::chatbot::CardMessage, ctb::chatbot::CardCarouselMessage, ctb::chatbot::SuggestedChipList> {
        union __union<std::__variant_detail::_Trait::_Available, 0UL, ctb::chatbot::CardMessage, ctb::chatbot::CardCarouselMessage, ctb::chatbot::SuggestedChipList> {
            char __dummy;
            struct __alt<0UL, ctb::chatbot::CardMessage> {
                struct CardMessage __value;
            } __head;
            union __union<std::__variant_detail::_Trait::_Available, 1UL, ctb::chatbot::CardCarouselMessage, ctb::chatbot::SuggestedChipList> {
                char __dummy;
                struct __alt<1UL, ctb::chatbot::CardCarouselMessage> {
                    struct CardCarouselMessage __value;
                } __head;
                union __union<std::__variant_detail::_Trait::_Available, 2UL, ctb::chatbot::SuggestedChipList> {
                    char __dummy;
                    struct __alt<2UL, ctb::chatbot::SuggestedChipList> {
                        struct SuggestedChipList __value;
                    } __head;
                    union __union<std::__variant_detail::_Trait::_Available, 3UL> __tail;
                } __tail;
            } __tail;
        } __data;
        unsigned int __index;
    } __impl_;
};

struct vector<ctb::CPIMEncapsulatedMessage, std::allocator<ctb::CPIMEncapsulatedMessage>> {
    struct CPIMEncapsulatedMessage *__begin_;
    struct CPIMEncapsulatedMessage *__end_;
    struct __compressed_pair<ctb::CPIMEncapsulatedMessage *, std::allocator<ctb::CPIMEncapsulatedMessage>> {
        struct CPIMEncapsulatedMessage *__value_;
    } __end_cap_;
};

struct vector<ctb::CPIMNamespace, std::allocator<ctb::CPIMNamespace>> {
    struct CPIMNamespace *__begin_;
    struct CPIMNamespace *__end_;
    struct __compressed_pair<ctb::CPIMNamespace *, std::allocator<ctb::CPIMNamespace>> {
        struct CPIMNamespace *__value_;
    } __end_cap_;
};

struct vector<ctb::ClientAuthenticityRequest::Method, std::allocator<ctb::ClientAuthenticityRequest::Method>> {
    struct Method *__begin_;
    struct Method *__end_;
    struct __compressed_pair<ctb::ClientAuthenticityRequest::Method *, std::allocator<ctb::ClientAuthenticityRequest::Method>> {
        struct Method *__value_;
    } __end_cap_;
};

struct vector<ctb::ProvisioningConfiguration::AccessControl::Server, std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>> {
    struct Server *__begin_;
    struct Server *__end_;
    struct __compressed_pair<ctb::ProvisioningConfiguration::AccessControl::Server *, std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>> {
        struct Server *__value_;
    } __end_cap_;
};

struct vector<ctb::SIPConferenceInfo::User, std::allocator<ctb::SIPConferenceInfo::User>> {
    struct User *__begin_;
    struct User *__end_;
    struct __compressed_pair<ctb::SIPConferenceInfo::User *, std::allocator<ctb::SIPConferenceInfo::User>> {
        struct User *__value_;
    } __end_cap_;
};

struct vector<ctb::chatbot::AddressEntry, std::allocator<ctb::chatbot::AddressEntry>> {
    struct AddressEntry *__begin_;
    struct AddressEntry *__end_;
    struct __compressed_pair<ctb::chatbot::AddressEntry *, std::allocator<ctb::chatbot::AddressEntry>> {
        struct AddressEntry *__value_;
    } __end_cap_;
};

struct vector<ctb::chatbot::CardCarouselContent, std::allocator<ctb::chatbot::CardCarouselContent>> {
    struct CardCarouselContent *__begin_;
    struct CardCarouselContent *__end_;
    struct __compressed_pair<ctb::chatbot::CardCarouselContent *, std::allocator<ctb::chatbot::CardCarouselContent>> {
        struct CardCarouselContent *__value_;
    } __end_cap_;
};

struct vector<ctb::chatbot::MediaEntry, std::allocator<ctb::chatbot::MediaEntry>> {
    struct MediaEntry *__begin_;
    struct MediaEntry *__end_;
    struct __compressed_pair<ctb::chatbot::MediaEntry *, std::allocator<ctb::chatbot::MediaEntry>> {
        struct MediaEntry *__value_;
    } __end_cap_;
};

struct vector<ctb::chatbot::MenuL0Content, std::allocator<ctb::chatbot::MenuL0Content>> {
    struct MenuL0Content *__begin_;
    struct MenuL0Content *__end_;
    struct __compressed_pair<ctb::chatbot::MenuL0Content *, std::allocator<ctb::chatbot::MenuL0Content>> {
        struct MenuL0Content *__value_;
    } __end_cap_;
};

struct vector<ctb::chatbot::OrgNameEntry, std::allocator<ctb::chatbot::OrgNameEntry>> {
    struct OrgNameEntry *__begin_;
    struct OrgNameEntry *__end_;
    struct __compressed_pair<ctb::chatbot::OrgNameEntry *, std::allocator<ctb::chatbot::OrgNameEntry>> {
        struct OrgNameEntry *__value_;
    } __end_cap_;
};

struct vector<ctb::chatbot::SuggestedChip, std::allocator<ctb::chatbot::SuggestedChip>> {
    struct SuggestedChip *__begin_;
    struct SuggestedChip *__end_;
    struct __compressed_pair<ctb::chatbot::SuggestedChip *, std::allocator<ctb::chatbot::SuggestedChip>> {
        struct SuggestedChip *__value_;
    } __end_cap_;
};

struct vector<ctb::chatbot::URIEntry, std::allocator<ctb::chatbot::URIEntry>> {
    struct URIEntry *__begin_;
    struct URIEntry *__end_;
    struct __compressed_pair<ctb::chatbot::URIEntry *, std::allocator<ctb::chatbot::URIEntry>> {
        struct URIEntry *__value_;
    } __end_cap_;
};

struct vector<ctb::chatbot::WebEntry, std::allocator<ctb::chatbot::WebEntry>> {
    struct WebEntry *__begin_;
    struct WebEntry *__end_;
    struct __compressed_pair<ctb::chatbot::WebEntry *, std::allocator<ctb::chatbot::WebEntry>> {
        struct WebEntry *__value_;
    } __end_cap_;
};

struct vector<std::string, std::allocator<std::string>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::string *, std::allocator<std::string>> {
        void *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct optional<ctb::BootstrappingInfo> {
    union {
        char __null_state_;
        struct BootstrappingInfo __val_;
    } ;
    _Bool __engaged_;
} optional_80a8b70e;

typedef struct optional<ctb::CPIMMessage> {
    union {
        char __null_state_;
        struct CPIMMessage __val_;
    } ;
    _Bool __engaged_;
} optional_63141056;

typedef struct optional<ctb::CPMGroupManagement> {
    union {
        char __null_state_;
        struct CPMGroupManagement __val_;
    } ;
    _Bool __engaged_;
} optional_5019a05a;

typedef struct optional<ctb::ClientAuthenticityRequest> {
    union {
        char __null_state_;
        struct ClientAuthenticityRequest __val_;
    } ;
    _Bool __engaged_;
} optional_421dc93d;

typedef struct optional<ctb::FileTransferDescriptor> {
    union {
        char __null_state_;
        struct FileTransferDescriptor __val_;
    } ;
    _Bool __engaged_;
} optional_105961c5;

typedef struct optional<ctb::GeoPushLocation> {
    union {
        char __null_state_;
        struct GeoPushLocation __val_;
    } ;
    _Bool __engaged_;
} optional_bc49e883;

typedef struct optional<ctb::IMCompositionIndication> {
    union {
        char __null_state_;
        struct IMCompositionIndication __val_;
    } ;
    _Bool __engaged_;
} optional_c045e140;

typedef struct optional<ctb::IMDispositionNotification> {
    union {
        char __null_state_;
        struct IMDispositionNotification __val_;
    } ;
    _Bool __engaged_;
} optional_63c704a5;

typedef struct optional<ctb::IMRevoke> {
    union {
        char __null_state_;
        struct IMRevoke __val_;
    } ;
    _Bool __engaged_;
} optional_a6e83268;

typedef struct optional<ctb::ProvisioningConfiguration> {
    union {
        char __null_state_;
        struct ProvisioningConfiguration __val_;
    } ;
    _Bool __engaged_;
} optional_f5e0e83c;

typedef struct optional<ctb::SIPConferenceInfo> {
    union {
        char __null_state_;
        struct SIPConferenceInfo __val_;
    } ;
    _Bool __engaged_;
} optional_d3dd8cf3;

typedef struct optional<ctb::SIPResourceLists> {
    union {
        char __null_state_;
        struct SIPResourceLists __val_;
    } ;
    _Bool __engaged_;
} optional_6b01d645;

typedef struct optional<ctb::chatbot::Message> {
    union {
        char __null_state_;
        struct Message __val_;
    } ;
    _Bool __engaged_;
} optional_8288a809;

typedef struct optional<ctb::chatbot::RenderInformation> {
    union {
        char __null_state_;
        struct RenderInformation __val_;
    } ;
    _Bool __engaged_;
} optional_5be15e2c;

#pragma mark Typedef'd Unions

typedef union {
    char __null_state_;
    int __val_;
} CDUnion_81a57ede;

