//
//     Generated by classdump-c 4.2.0 (64 bit) (iOS port by DreamDevLost, Updated by Kevin Bradley.)(Debug version compiled Dec 27 2024 14:18:54).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class VKCameraRegionRestriction, VKFootprint, VKViewVolume;

__attribute__((visibility("hidden")))
@interface VKCamera : NSObject
{
    struct RunLoopController *_runLoopController;	// 8 = 0x8
    CDStruct_7a7719de _frustum;	// 16 = 0x10
    double _minHeight;	// 64 = 0x40
    double _maxHeight;	// 72 = 0x48
    double _maxPitch;	// 80 = 0x50
    double _terrainHeight;	// 88 = 0x58
    _Bool _needsUpdate;	// 96 = 0x60
    _Bool _updating;	// 97 = 0x61
    VKViewVolume *_viewVolume;	// 104 = 0x68
    VKFootprint *_footprint;	// 112 = 0x70
    double _tanHalfHorizFOV;	// 120 = 0x78
    double _tanHalfVerticalFOV;	// 128 = 0x80
    Matrix_6e1d3589 _forward;	// 136 = 0x88
    Matrix_6e1d3589 _right;	// 160 = 0xa0
    Matrix_6e1d3589 _up;	// 184 = 0xb8
    double _fractionOfScreenAboveFarClipPlaneAtCanonicalPitch;	// 208 = 0xd0
    double _distanceToGroundAndFarClipPlaneIntersection;	// 216 = 0xd8
    double _screenHeightOfGroundAndFarClipPlaneIntersection;	// 224 = 0xe0
    double _canonicalPitch;	// 232 = 0xe8
    double _horizontalOffset;	// 240 = 0xf0
    double _ndcZNear;	// 248 = 0xf8
    _Bool _nearFarReset;	// 256 = 0x100
    double _aspectRatio;	// 264 = 0x108
    Unit_5669e52e _verticalFieldOfView;	// 272 = 0x110
    double _near;	// 280 = 0x118
    double _far;	// 288 = 0x120
    double _width;	// 296 = 0x128
    double _height;	// 304 = 0x130
    RigidTransform_b9386d13 _transform;	// 312 = 0x138
    Matrix_08d701e4 _scaledViewMatrix;	// 368 = 0x170
    Matrix_08d701e4 _scaledProjectionMatrix;	// 496 = 0x1f0
    Matrix_08d701e4 _scaledViewProjectionMatrix;	// 624 = 0x270
    Matrix_08d701e4 _unscaledViewMatrix;	// 752 = 0x2f0
    Matrix_08d701e4 _unscaledProjectionMatrix;	// 880 = 0x370
    Matrix_08d701e4 _worldMatrix;	// 1008 = 0x3f0
    double _maxHeightNoPitch;	// 1136 = 0x470
    VKCameraRegionRestriction *_regionRestriction;	// 1144 = 0x478
    optional_76e85d3d _minDistanceToGroundRestriction;	// 1152 = 0x480
    optional_76e85d3d _maxDistanceToGroundRestriction;	// 1168 = 0x490
}

- (id).cxx_construct;	// IMP=0x00000000000b34e0
- (void).cxx_destruct;	// IMP=0x00000000000b3480
@property(nonatomic) optional_c8a16ffb maxDistanceToGroundRestriction; // @synthesize maxDistanceToGroundRestriction=_maxDistanceToGroundRestriction;
@property(nonatomic) optional_c8a16ffb minDistanceToGroundRestriction; // @synthesize minDistanceToGroundRestriction=_minDistanceToGroundRestriction;
@property(retain, nonatomic) VKCameraRegionRestriction *regionRestriction; // @synthesize regionRestriction=_regionRestriction;
@property(nonatomic) double ndcZNear; // @synthesize ndcZNear=_ndcZNear;
@property(nonatomic) double horizontalOffset; // @synthesize horizontalOffset=_horizontalOffset;
@property(nonatomic) double canonicalPitch; // @synthesize canonicalPitch=_canonicalPitch;
@property(readonly, nonatomic) double screenHeightOfGroundAndFarClipPlaneIntersection; // @synthesize screenHeightOfGroundAndFarClipPlaneIntersection=_screenHeightOfGroundAndFarClipPlaneIntersection;
@property(readonly, nonatomic) double distanceToGroundAndFarClipPlaneIntersection; // @synthesize distanceToGroundAndFarClipPlaneIntersection=_distanceToGroundAndFarClipPlaneIntersection;
@property(nonatomic) double fractionOfScreenAboveFarClipPlaneAtCanonicalPitch; // @synthesize fractionOfScreenAboveFarClipPlaneAtCanonicalPitch=_fractionOfScreenAboveFarClipPlaneAtCanonicalPitch;
@property(nonatomic) double terrainHeight; // @synthesize terrainHeight=_terrainHeight;
@property(nonatomic) double maxPitch; // @synthesize maxPitch=_maxPitch;
@property(nonatomic) double maxHeight; // @synthesize maxHeight=_maxHeight;
@property(nonatomic) double minHeight; // @synthesize minHeight=_minHeight;
@property(nonatomic) double maxHeightNoPitch; // @synthesize maxHeightNoPitch=_maxHeightNoPitch;
@property(nonatomic) double aspectRatio; // @synthesize aspectRatio=_aspectRatio;
- (void)updateCamera:(shared_ptr_46708168)arg1 withAdjustment:(function_eb9f6bd6)arg2;	// IMP=0x00000000000b2ea0
- (CameraFrame_b765d6d7)cameraFrame:(_Bool)arg1;	// IMP=0x00000000000b2c40
- (View_a667aa2f)view:(struct ViewSize)arg1;	// IMP=0x00000000000b29f0
@property(readonly, nonatomic) const void *unscaledProjectionMatrix;
@property(readonly, nonatomic) const void *unscaledViewMatrix;
@property(readonly, nonatomic) const void *scaledViewMatrix;
@property(readonly, nonatomic) const void *scaledProjectionMatrix;
@property(readonly, nonatomic) const void *scaledViewProjectionMatrix;
- (void)adjustClipPlanes;	// IMP=0x00000000000b27c0
- (float)zoomAtCentrePoint;	// IMP=0x00000000000b27a0
- (float)zoomAtPoint:(struct CGPoint)arg1;	// IMP=0x00000000000b2700
- (double)depthForViewWidth:(double)arg1;	// IMP=0x00000000000b26c0
- (double)widthOfViewAtDepth:(double)arg1;	// IMP=0x00000000000b2690
- (struct CGPoint)screenPointFromGroundPoint:(const void *)arg1;	// IMP=0x00000000000b2570
- (optional_67826ebe)groundPointFromScreenPoint:(struct CGPoint)arg1 atGroundLevel:(double)arg2;	// IMP=0x00000000000b2410
- (optional_67826ebe)groundPointFromScreenPoint:(struct CGPoint)arg1;	// IMP=0x00000000000b23e0
- (void)updateIfNeeded;	// IMP=0x00000000000b1210
- (void)setNeedsUpdate;	// IMP=0x00000000000b11e0
- (CDUnknownBlockType)annotationCoordinateTest;	// IMP=0x00000000000b11c0
- (CDUnknownBlockType)annotationRectTest;	// IMP=0x00000000000b11a0
- (Matrix_6e1d3589)groundPlaneIntersectionPoint;	// IMP=0x00000000000b10c0
@property(nonatomic) struct VKCameraState cameraState;
@property(readonly, nonatomic) double yaw;
@property(readonly, nonatomic) double pitch;
- (double)displayZoomLevel;	// IMP=0x00000000000b0de0
@property(readonly, nonatomic) Matrix_6e1d3589 groundPoint;
@property(readonly, nonatomic) Matrix_6e1d3589 forwardVector;
@property(readonly, nonatomic) Matrix_6e1d3589 rightVector;
@property(readonly, nonatomic) Matrix_6e1d3589 upVector;
@property(readonly, nonatomic) VKFootprint *footprint;
@property(readonly, nonatomic) VKViewVolume *viewVolume;
@property(readonly, nonatomic) double tanHalfVerticalFOV;
@property(readonly, nonatomic) double tanHalfHorizFOV;
@property(nonatomic) double nearClipDistance;
@property(nonatomic) double farClipDistance;
@property(readonly, nonatomic) Unit_5669e52e horizontalFieldOfView;
@property(nonatomic) Unit_5669e52e verticalFieldOfView;
@property(nonatomic) const void *orientation;
@property(readonly, nonatomic) CDStruct_7a7719de frustum;
@property(nonatomic) const void *transform;
@property(nonatomic) const void *position;
- (Mercator3_d8bb135c)mercatorPosition;	// IMP=0x00000000000b0560
- (void)setMercatorPosition:(const void *)arg1;	// IMP=0x00000000000b0420
- (void)_setPosition:(const void *)arg1;	// IMP=0x00000000000b03e0
- (id)descriptionDictionaryRepresentation;	// IMP=0x00000000000b00a0
- (id)description;	// IMP=0x00000000000afea0
- (id)detailedDescription;	// IMP=0x00000000000afe80
- (id)initWithRunLoopController:(struct RunLoopController *)arg1;	// IMP=0x00000000000afce0

@end

