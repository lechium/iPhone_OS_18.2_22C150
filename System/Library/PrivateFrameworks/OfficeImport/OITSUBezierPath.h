//
//     Generated by classdump-c 4.2.0 (64 bit) (iOS port by DreamDevLost, Updated by Kevin Bradley.)(Debug version compiled Dec 27 2024 14:18:54).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

__attribute__((visibility("hidden")))
@interface OITSUBezierPath : NSObject
{
    long long sfr_elementCount;	// 8 = 0x8
    long long sfr_elementMax;	// 16 = 0x10
    struct PATHSEGMENT *sfr_head;	// 24 = 0x18
    double *sfr_elementLength;	// 32 = 0x20
    double sfr_totalLength;	// 40 = 0x28
    long long sfr_lastSubpathIndex;	// 48 = 0x30
    void *sfr_extraSegments;	// 56 = 0x38
    double sfr_lineWidth;	// 64 = 0x40
    struct CGRect sfr_controlPointBounds;	// 72 = 0x48
    double sfr_miterLimit;	// 104 = 0x68
    double sfr_flatness;	// 112 = 0x70
    double *sfr_dashedLinePattern;	// 120 = 0x78
    unsigned long long sfr_dashedLineCount;	// 128 = 0x80
    double sfr_dashedLinePhase;	// 136 = 0x88
    void *sfr_path;	// 144 = 0x90
    long long sfr_extraSegmentCount;	// 152 = 0x98
    long long sfr_extraSegmentMax;	// 160 = 0xa0
    struct {
        unsigned int sfr_flags:8;
        unsigned int sfr_pathState:2;
        unsigned int sfr_calculatedLengths:1;
        unsigned int sfr_unused:21;
    } sfr_bpFlags;	// 168 = 0xa8
}

+ (double)defaultLineWidth;	// IMP=0x0010000000271671
+ (void)setDefaultLineWidth:(double)arg1;	// IMP=0x0010000000271663
+ (unsigned long long)defaultLineJoinStyle;	// IMP=0x0010000000271656
+ (void)setDefaultLineJoinStyle:(unsigned long long)arg1;	// IMP=0x0010000000271649
+ (unsigned long long)defaultLineCapStyle;	// IMP=0x001000000027163c
+ (void)setDefaultLineCapStyle:(unsigned long long)arg1;	// IMP=0x001000000027162f
+ (unsigned long long)defaultWindingRule;	// IMP=0x0010000000271622
+ (void)setDefaultWindingRule:(unsigned long long)arg1;	// IMP=0x0010000000271615
+ (double)defaultFlatness;	// IMP=0x0010000000271607
+ (void)setDefaultFlatness:(double)arg1;	// IMP=0x00100000002715f9
+ (double)defaultMiterLimit;	// IMP=0x00100000002715eb
+ (void)setDefaultMiterLimit:(double)arg1;	// IMP=0x00100000002715dd
+ (void)strokeLineFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2;	// IMP=0x0010000000271542
+ (void)clipRect:(struct CGRect)arg1;	// IMP=0x001000000027151c
+ (void)strokeRect:(struct CGRect)arg1;	// IMP=0x0010000000271362
+ (void)fillRect:(struct CGRect)arg1;	// IMP=0x001000000027133c
+ (id)bezierPathWithCGPath:(struct CGPath *)arg1;	// IMP=0x0010000000271172
+ (id)bezierPathWithRoundedRect:(struct CGRect)arg1 cornerRadius:(double)arg2;	// IMP=0x0010000000271120
+ (id)bezierPathWithOvalInRect:(struct CGRect)arg1;	// IMP=0x00100000002710d7
+ (id)bezierPathWithRect:(struct CGRect)arg1;	// IMP=0x001000000027108e
+ (id)bezierPathWithStart:(struct CGPoint)arg1 end:(struct CGPoint)arg2;	// IMP=0x0010000000271021
+ (id)bezierPath;	// IMP=0x001000000027100f
+ (void)initialize;	// IMP=0x0010000000270fcf
+ (double)lineWidth;	// IMP=0x0010000000276ff6
+ (void)setLineWidth:(double)arg1;	// IMP=0x0010000000276fe4
+ (unsigned long long)lineJoinStyle;	// IMP=0x0010000000276fd2
+ (void)setLineJoinStyle:(unsigned long long)arg1;	// IMP=0x0010000000276fc0
+ (unsigned long long)lineCapStyle;	// IMP=0x0010000000276fae
+ (void)setLineCapStyle:(unsigned long long)arg1;	// IMP=0x0010000000276f9c
+ (unsigned long long)windingRule;	// IMP=0x0010000000276f8a
+ (void)setWindingRule:(unsigned long long)arg1;	// IMP=0x0010000000276f78
+ (double)flatness;	// IMP=0x0010000000276f66
+ (void)setFlatness:(double)arg1;	// IMP=0x0010000000276f54
+ (double)miterLimit;	// IMP=0x0010000000276f42
+ (void)setMiterLimit:(double)arg1;	// IMP=0x0010000000276f30
- (id)initWithCString:(const char *)arg1;	// IMP=0x0000000000276560
- (const char *)cString;	// IMP=0x0000000000276274
- (id)initWithCoder:(id)arg1;	// IMP=0x0000000000275a31
- (void)encodeWithCoder:(id)arg1;	// IMP=0x00000000002753ba
- (_Bool)containsPoint:(struct CGPoint)arg1;	// IMP=0x0000000000275336
- (void)appendBezierPathWithArcFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2 radius:(double)arg3;	// IMP=0x0000000000274f1e
- (void)appendBezierPathWithArcWithCenter:(struct CGPoint)arg1 radius:(double)arg2 startAngle:(double)arg3 endAngle:(double)arg4;	// IMP=0x0000000000274f07
- (void)appendBezierPathWithArcWithCenter:(struct CGPoint)arg1 radius:(double)arg2 startAngle:(double)arg3 endAngle:(double)arg4 clockwise:(_Bool)arg5;	// IMP=0x0000000000274c21
- (void)_appendArcSegmentWithCenter:(struct CGPoint)arg1 radius:(double)arg2 angle1:(double)arg3 angle2:(double)arg4;	// IMP=0x0000000000274b00
- (void)appendBezierPathWithOvalInRect:(struct CGRect)arg1;	// IMP=0x000000000027492c
- (void)appendBezierPathWithPoints:(struct CGPoint *)arg1 count:(long long)arg2;	// IMP=0x000000000027487d
- (void)appendBezierPathWithRect:(struct CGRect)arg1;	// IMP=0x000000000027476c
- (void)appendBezierPath:(id)arg1;	// IMP=0x0000000000274758
- (void)appendBezierPath:(id)arg1 skippingInitialMoveIfPossible:(_Bool)arg2;	// IMP=0x0000000000274578
- (void)_appendToPath:(id)arg1 skippingInitialMoveIfPossible:(_Bool)arg2;	// IMP=0x000000000027441f
- (void)setAssociatedPoints:(struct CGPoint *)arg1 atIndex:(long long)arg2;	// IMP=0x000000000027434b
- (long long)elementAtIndex:(long long)arg1 allPoints:(struct CGPoint *)arg2;	// IMP=0x0000000000274273
- (long long)elementAtIndex:(long long)arg1 associatedPoints:(struct CGPoint *)arg2;	// IMP=0x00000000002741b7
- (long long)elementAtIndex:(long long)arg1;	// IMP=0x00000000002741a3
- (long long)elementCount;	// IMP=0x0000000000274199
- (double)lengthToElement:(long long)arg1;	// IMP=0x00000000002740e9
- (double)lengthOfElement:(long long)arg1;	// IMP=0x00000000002740b5
- (double)length;	// IMP=0x0000000000274087
- (void)calculateLengths;	// IMP=0x0000000000273fe8
- (double)calculateLengthOfElement:(long long)arg1;	// IMP=0x0000000000273f3c
- (_Bool)isClockwise;	// IMP=0x0000000000273d27
- (_Bool)isFlat;	// IMP=0x0000000000273d16
- (struct CGRect)bounds;	// IMP=0x0000000000273c90
- (struct CGRect)controlPointBounds;	// IMP=0x0000000000273b61
- (struct CGPoint)currentPoint;	// IMP=0x0000000000273b01
- (_Bool)isEmpty;	// IMP=0x0000000000273af3
- (_Bool)isCircular;	// IMP=0x0000000000273918
- (_Bool)isRectangular;	// IMP=0x0000000000273590
- (_Bool)isDiamond;	// IMP=0x0000000000273340
- (_Bool)isTriangular;	// IMP=0x00000000002731e6
- (struct CGPath *)CGPath;	// IMP=0x00000000002731a8
- (void)transformUsingAffineTransform:(struct CGAffineTransform)arg1;	// IMP=0x0000000000273058
- (id)p_bezierPathByRemovingRedundantElementAndSubregionsSmallerThanThreshold:(double)arg1;	// IMP=0x0000000000272b71
- (id)bezierPathByRemovingRedundantElements;	// IMP=0x0000000000272b5c
- (id)bezierPathByRemovingSmallSubpathsForInteriorWrapsForInset:(double)arg1;	// IMP=0x0000000000272b46
- (id)bezierPathByReversingPath;	// IMP=0x000000000027296f
- (id)_copyFlattenedPath;	// IMP=0x000000000027293a
- (id)bezierPathByFlatteningPathWithFlatness:(double)arg1;	// IMP=0x00000000002728c6
- (id)bezierPathByFlatteningPath;	// IMP=0x00000000002728ac
- (void)flattenIntoPath:(id)arg1 flatness:(double)arg2;	// IMP=0x0000000000272776
- (void)flattenIntoPath:(id)arg1;	// IMP=0x000000000027275c
- (void)subdivideBezierWithFlatness:(double)arg1 startPoint:(struct CGPoint)arg2 controlPoint1:(struct CGPoint)arg3 controlPoint2:(struct CGPoint)arg4 endPoint:(struct CGPoint)arg5;	// IMP=0x0000000000272584
- (void)addClip;	// IMP=0x0000000000272454
- (void)fill;	// IMP=0x0000000000272324
- (void)stroke;	// IMP=0x00000000002721a8
- (void)_doPath;	// IMP=0x0000000000271ff3
- (struct CGPoint)_checkPointForValidity:(struct CGPoint)arg1;	// IMP=0x0000000000271f8f
- (_Bool)_isValid:(double)arg1;	// IMP=0x0000000000271f76
- (void)getLineDash:(double *)arg1 count:(long long *)arg2 phase:(double *)arg3;	// IMP=0x0000000000271f21
- (void)setLineDash:(const double *)arg1 count:(long long)arg2 phase:(double)arg3;	// IMP=0x0000000000271e47
- (void)setFlatness:(double)arg1;	// IMP=0x0000000000271e3c
- (double)flatness;	// IMP=0x0000000000271e31
- (void)setMiterLimit:(double)arg1;	// IMP=0x0000000000271e26
- (double)miterLimit;	// IMP=0x0000000000271e1b
- (void)setWindingRule:(unsigned long long)arg1;	// IMP=0x0000000000271dfe
- (unsigned long long)windingRule;	// IMP=0x0000000000271dec
- (void)setLineJoinStyle:(unsigned long long)arg1;	// IMP=0x0000000000271dcf
- (unsigned long long)lineJoinStyle;	// IMP=0x0000000000271dbd
- (void)setLineCapStyle:(unsigned long long)arg1;	// IMP=0x0000000000271d9e
- (unsigned long long)lineCapStyle;	// IMP=0x0000000000271d8c
- (void)setLineWidth:(double)arg1;	// IMP=0x0000000000271d81
- (double)lineWidth;	// IMP=0x0000000000271d76
- (void)relativeCurveToPoint:(struct CGPoint)arg1 controlPoint1:(struct CGPoint)arg2 controlPoint2:(struct CGPoint)arg3;	// IMP=0x0000000000271cf4
- (void)relativeLineToPoint:(struct CGPoint)arg1;	// IMP=0x0000000000271caa
- (void)relativeMoveToPoint:(struct CGPoint)arg1;	// IMP=0x0000000000271c60
- (void)removeAllPoints;	// IMP=0x0000000000271bff
- (void)closePath;	// IMP=0x0000000000271bed
- (void)curveToPoint:(struct CGPoint)arg1 controlPoint1:(struct CGPoint)arg2 controlPoint2:(struct CGPoint)arg3;	// IMP=0x0000000000271b54
- (void)lineToPoint:(struct CGPoint)arg1;	// IMP=0x0000000000271ae6
- (void)moveToPoint:(struct CGPoint)arg1;	// IMP=0x0000000000271ad4
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x0000000000271a82
- (void)copyPathAttributesTo:(id)arg1;	// IMP=0x000000000027198b
- (unsigned long long)hash;	// IMP=0x0000000000271979
- (_Bool)isEqual:(id)arg1;	// IMP=0x00000000002717dc
- (void)dealloc;	// IMP=0x000000000027174c
- (id)init;	// IMP=0x000000000027167f
- (void)_deviceClosePath;	// IMP=0x0000000000276df0
- (void)_deviceCurveToPoint:(struct CGPoint)arg1 controlPoint1:(struct CGPoint)arg2 controlPoint2:(struct CGPoint)arg3;	// IMP=0x0000000000276ca1
- (void)_deviceLineToPoint:(struct CGPoint)arg1;	// IMP=0x0000000000276c69
- (void)_deviceMoveToPoint:(struct CGPoint)arg1;	// IMP=0x0000000000276bdb
- (void)_addPathSegment:(long long)arg1 point:(struct CGPoint)arg2;	// IMP=0x0000000000276a45
- (id)description;	// IMP=0x0000000000277008
- (void)appendBezierPathWithArcWithEllipseBounds:(struct CGRect)arg1 startRadialVector:(struct CGPoint)arg2 endRadialVector:(struct CGPoint)arg3 angleSign:(int)arg4 startNewPath:(_Bool)arg5;	// IMP=0x000000000028ce60
- (void)appendBezierPathWithArcWithEllipseBounds:(struct CGRect)arg1 startAngle:(double)arg2 swingAngle:(double)arg3 angleType:(int)arg4 startNewPath:(_Bool)arg5;	// IMP=0x000000000028c9bc
- (void)attachBezierPath:(id)arg1;	// IMP=0x0000000000369ef0

@end

