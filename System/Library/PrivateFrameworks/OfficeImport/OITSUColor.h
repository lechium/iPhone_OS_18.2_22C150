//
//     Generated by classdump-c 4.2.0 (64 bit) (iOS port by DreamDevLost, Updated by Kevin Bradley.)(Debug version compiled Dec 27 2024 14:18:54).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class UIColor;

__attribute__((visibility("hidden")))
@interface OITSUColor : NSObject
{
    struct CGColor *mCGColor;	// 8 = 0x8
    unsigned long long mColorRGBSpace;	// 16 = 0x10
}

+ (id)brownColor;	// IMP=0x00100000002c5213
+ (id)purpleColor;	// IMP=0x00100000002c51db
+ (id)orangeColor;	// IMP=0x00100000002c51a3
+ (id)magentaColor;	// IMP=0x00100000002c5170
+ (id)yellowColor;	// IMP=0x00100000002c513d
+ (id)cyanColor;	// IMP=0x00100000002c510a
+ (id)blueColor;	// IMP=0x00100000002c50d7
+ (id)greenColor;	// IMP=0x00100000002c50a4
+ (id)redColor;	// IMP=0x00100000002c5071
+ (id)lightGrayColor;	// IMP=0x00100000002c503f
+ (id)grayColor;	// IMP=0x00100000002c500d
+ (id)whiteColor;	// IMP=0x00100000002c4fe0
+ (id)blackColor;	// IMP=0x00100000002c4fb3
+ (id)clearColor;	// IMP=0x00100000002c4f8b
+ (id)randomColor;	// IMP=0x00100000002c4f46
+ (id)colorWithUIColor:(id)arg1;	// IMP=0x00100000002c4efd
+ (id)colorWithHexString:(id)arg1;	// IMP=0x00100000002c4eb4
+ (id)colorWithPatternImage:(id)arg1;	// IMP=0x00100000002c4e6b
+ (id)colorWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4 targetRGBSpace:(unsigned long long)arg5;	// IMP=0x00100000002c4e11
+ (id)colorWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4;	// IMP=0x00100000002c4dbf
+ (id)colorWithWhite:(double)arg1 alpha:(double)arg2;	// IMP=0x00100000002c4d81
+ (id)colorWithRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;	// IMP=0x00100000002c4d2f
+ (id)colorWithCGColor:(struct CGColor *)arg1;	// IMP=0x00100000002c4d00
+ (id)stringForColor:(id)arg1;	// IMP=0x00100000002cec27
+ (id)stringForSystemColorID:(int)arg1;	// IMP=0x00100000002cec06
+ (id)colorWithSystemColorID:(int)arg1;	// IMP=0x00100000002ceba3
+ (id)colorWithBGR:(unsigned int)arg1;	// IMP=0x00100000002ceb2f
+ (id)colorWithCatalogName:(id)arg1 colorName:(id)arg2;	// IMP=0x00100000002ce7c9
+ (id)colorWithDeviceCyan:(double)arg1 magenta:(double)arg2 yellow:(double)arg3 black:(double)arg4 alpha:(double)arg5;	// IMP=0x00100000002ce73e
+ (id)colorWithDeviceRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;	// IMP=0x00100000002ce725
+ (id)colorWithDeviceHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4;	// IMP=0x00100000002ce6ec
+ (id)colorWithDeviceWhite:(double)arg1 alpha:(double)arg2;	// IMP=0x00100000002ce6d3
+ (id)colorWithCalibratedRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;	// IMP=0x00100000002ce6ba
+ (id)colorWithCalibratedHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4;	// IMP=0x00100000002ce681
+ (id)colorWithCalibratedWhite:(double)arg1 alpha:(double)arg2;	// IMP=0x00100000002ce668
+ (id)colorWithBinaryRed:(int)arg1 green:(int)arg2 blue:(int)arg3 alpha:(int)arg4;	// IMP=0x00100000002ce625
+ (id)colorWithBinaryRed:(int)arg1 green:(int)arg2 blue:(int)arg3;	// IMP=0x00100000002ce60d
+ (id)colorWithEshColor:(const struct EshColor *)arg1;	// IMP=0x0010000000346a5c
+ (id)colorWithCsColour:(const struct CsColour *)arg1;	// IMP=0x00100000003469ae
+ (id)colorWithRGBBytes:(unsigned char)arg1 green:(unsigned char)arg2 blue:(unsigned char)arg3;	// IMP=0x001000000035e3bf
+ (id)colorWithRGBValue:(long long)arg1;	// IMP=0x00100000003a06da
+ (id)colorWithBGRValue:(long long)arg1;	// IMP=0x00100000003a0663
@property(readonly, nonatomic) unsigned long long colorRGBSpace; // @synthesize colorRGBSpace=mColorRGBSpace;
- (id)hexString;	// IMP=0x00000000002c72f3
- (void)paintPath:(struct CGPath *)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x00000000002c72a7
- (void)paintRect:(struct CGRect)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x00000000002c7259
- (id)newBlendedColorWithFraction:(double)arg1 ofColor:(id)arg2;	// IMP=0x00000000002c710d
- (id)blendedColorWithFraction:(double)arg1 ofColor:(id)arg2;	// IMP=0x00000000002c70f3
- (_Bool)wantsHighContrastBackgroundForDarkMode:(id)arg1;	// IMP=0x00000000002c7068
- (_Bool)isNearlyWhite;	// IMP=0x00000000002c6fb1
- (_Bool)isOpaque;	// IMP=0x00000000002c6f85
- (double)luminance;	// IMP=0x00000000002c6e26
- (id)colorWithAlphaComponent:(double)arg1;	// IMP=0x00000000002c6ddd
- (id)invertedColor;	// IMP=0x00000000002c6c8c
- (id)grayscaleColor;	// IMP=0x00000000002c6bcf
@property(readonly, nonatomic) UIColor *UIColor;
- (double)brightnessComponent;	// IMP=0x00000000002c6b0c
- (double)saturationComponent;	// IMP=0x00000000002c6a7e
- (double)hueComponent;	// IMP=0x00000000002c69f0
- (void)getRGBAComponents:(double *)arg1;	// IMP=0x00000000002c68d2
@property(readonly, nonatomic) double alphaComponent;
@property(readonly, nonatomic) double blueComponent;
@property(readonly, nonatomic) double greenComponent;
@property(readonly, nonatomic) double redComponent;
- (double)p_rgbComponentWithIndex:(unsigned char)arg1;	// IMP=0x00000000002c67cd
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x00000000002c67c2
- (_Bool)isEqualWithTolerance:(id)arg1;	// IMP=0x00000000002c6748
- (_Bool)isAlmostEqualToColor:(id)arg1;	// IMP=0x00000000002c660b
- (_Bool)p_isEqualToColor:(id)arg1 withTolerance:(double)arg2;	// IMP=0x00000000002c6287
- (_Bool)isEqual:(id)arg1;	// IMP=0x00000000002c6275
- (unsigned long long)hash;	// IMP=0x00000000002c626a
- (void)dealloc;	// IMP=0x00000000002c6230
- (id)initWithUIColor:(id)arg1;	// IMP=0x00000000002c5fdd
- (id)initWithHexString:(id)arg1;	// IMP=0x00000000002c5c85
- (id)initWithPatternImage:(id)arg1;	// IMP=0x00000000002c5adf
- (id)initWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4 targetRGBSpace:(unsigned long long)arg5;	// IMP=0x00000000002c5a45
- (id)initWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4;	// IMP=0x00000000002c5a2b
- (id)initWithWhite:(double)arg1 alpha:(double)arg2;	// IMP=0x00000000002c5a10
- (id)initWithRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4 colorSpace:(unsigned long long)arg5;	// IMP=0x00000000002c592c
- (id)initWithRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;	// IMP=0x00000000002c5912
- (id)initWithCGColor:(struct CGColor *)arg1;	// IMP=0x00000000002c58fb
- (id)initWithCGColor:(struct CGColor *)arg1 colorSpace:(unsigned long long)arg2;	// IMP=0x00000000002c5255
@property(readonly) struct CGColor *CGColor;
- (void)set;	// IMP=0x00000000002cedc3
- (id)colorWithShadeValue:(double)arg1;	// IMP=0x00000000002ced40
- (id)colorWithTintValue:(double)arg1;	// IMP=0x00000000002cecbc
- (unsigned int)toBGR;	// IMP=0x00000000002ceb17
- (id)copy;	// IMP=0x00000000002ceacb
@property(readonly) int CGColorSpaceModel;
@property(readonly) struct CGColorSpace *CGColorSpace;
- (void)getCyan:(double *)arg1 magenta:(double *)arg2 yellow:(double *)arg3 black:(double *)arg4 alpha:(double *)arg5;	// IMP=0x00000000002ce9e3
@property(readonly) double blackComponent;
@property(readonly) double yellowComponent;
@property(readonly) double magentaComponent;
@property(readonly) double cyanComponent;
- (double)p_cmykComponentWithIndex:(unsigned char)arg1;	// IMP=0x00000000002ce918
- (void)getWhite:(double *)arg1 alpha:(double *)arg2;	// IMP=0x00000000002ce8c7
@property(readonly) double whiteComponent;
- (void)getRed:(double *)arg1 green:(double *)arg2 blue:(double *)arg3 alpha:(double *)arg4;	// IMP=0x00000000002ce7d1
- (id)solidColoredPngImage;	// IMP=0x00000000002ce605
- (id)newSolidColoredBitmap:(struct CGSize)arg1;	// IMP=0x00000000002ce5fd
- (CDStruct_a06f635e)ttColor;	// IMP=0x00000000002ce550
- (struct EshColor)eshColor;	// IMP=0x0000000000346afc
- (struct CsColour)csColour;	// IMP=0x0000000000346a11
- (void)getRGBBytes:(char *)arg1 green:(char *)arg2 blue:(char *)arg3;	// IMP=0x000000000035e3fa
- (_Bool)isBlack;	// IMP=0x0000000000471414

@end

