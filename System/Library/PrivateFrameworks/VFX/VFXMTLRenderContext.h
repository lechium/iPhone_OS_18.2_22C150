//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CAMetalLayer, CFXVFXRenderTargetInfo, MISSING_TYPE, MTLRenderPassDescriptor, NSMutableArray, NSMutableDictionary, NSString, VFXMTLRenderPipeline, VFXMTLResourceManager;
@protocol CAMetalDrawable, MTLBuffer, MTLCommandBuffer, MTLCommandQueue, MTLDepthStencilState, MTLDevice, MTLRenderCommandEncoder, MTLSamplerState, MTLTexture, OS_dispatch_group, OS_dispatch_queue, OS_dispatch_semaphore, VFXMTLRenderContextCommandBufferStatusMonitor, VFXMTLRenderContextResourceManagerMonitor, VFXTextureAttachmentProvider;

@interface VFXMTLRenderContext : NSObject
{
    unsigned long long _currentFrameIndex;	// 8 = 0x8
    struct __CFXEngineStats *__engineStats;	// 16 = 0x10
    float _superSamplingFactor;	// 24 = 0x18
    CDStruct_14d5dc5e _screenTransform;	// 32 = 0x20
    long long _sampleCount;	// 96 = 0x60
    _Bool _needSuperSampling;	// 104 = 0x68
    VFXMTLResourceManager *_resourceManager;	// 112 = 0x70
    id <MTLDevice> _device;	// 120 = 0x78
    _Bool _isValidationEnabled;	// 128 = 0x80
    int _profile;	// 132 = 0x84
    unsigned int _features;	// 136 = 0x88
    struct __CFXEngineContext *_engineContext;	// 144 = 0x90
    unsigned int _wantsWideGamut:1;	// 152 = 0x98
    unsigned int _isOpaque:1;	// 152 = 0x98
    unsigned int _enableARMode:1;	// 152 = 0x98
    unsigned int _shouldDelegateARCompositing:1;	// 152 = 0x98
    unsigned int _forceAsyncShaderCompilation:1;	// 152 = 0x98
    id <MTLCommandQueue> _ownedCommandQueue;	// 160 = 0xa0
    NSObject<OS_dispatch_semaphore> *_inFlightSemaphore;	// 168 = 0xa8
    struct atomic<int> _pendingGPUFrameCount;	// 176 = 0xb0
    id <MTLTexture> _textureTarget;	// 184 = 0xb8
    CAMetalLayer *_layerTarget;	// 192 = 0xc0
    id <CAMetalDrawable> _drawable;	// 200 = 0xc8
    float _targetedFrameInterval;	// 208 = 0xd0
    _Bool _shouldPresentAfterMinimumDuration;	// 212 = 0xd4
    _Bool _shouldPresentWithTransaction;	// 213 = 0xd5
    MTLRenderPassDescriptor *_currentRenderPassDescriptor;	// 216 = 0xd8
    MTLRenderPassDescriptor *_originalRenderPassDescriptor;	// 224 = 0xe0
    MISSING_TYPE *_renderSize;	// 232 = 0xe8
    id <MTLCommandBuffer> _currentCommandBuffer;	// 240 = 0xf0
    struct VFXMTLRenderCommandEncoder *_renderEncoder;	// 248 = 0xf8
    id <MTLCommandBuffer> _resourceCommandBuffer;	// 256 = 0x100
    struct VFXMTLBlitCommandEncoder _resourceBlitEncoder;	// 264 = 0x108
    struct VFXMTLComputeCommandEncoder _resourceComputeEncoder;	// 280 = 0x118
    CDStruct_c218849e _renderPassParameters;	// 312 = 0x138
    CDStruct_21854d8c _currentStreamBufferIndices;	// 317 = 0x13d
    struct VFXMTLBufferPool **_volatileBufferPools;	// 320 = 0x140
    void *_frameVolatileBufferPool;	// 328 = 0x148
    NSMutableArray *_volatileMeshes;	// 336 = 0x150
    NSMutableArray *_bufferPool;	// 344 = 0x158
    NSMutableArray *_usedVolatileMeshElements;	// 352 = 0x160
    NSMutableArray *_freeVolatileMeshElements;	// 360 = 0x168
    long long _maxInFlightFrameCount;	// 368 = 0x170
    struct VFXMTLBufferPool **_constantBufferPools;	// 376 = 0x178
    void *_frameConstantBufferPool;	// 384 = 0x180
    void *_frameTexturePool;	// 392 = 0x188
    id <MTLDepthStencilState> _defaultDepthStencilState;	// 400 = 0x190
    id <MTLSamplerState> _defaultSamplerState;	// 408 = 0x198
    struct __CFXFXProgram *_background2DProgram[3];	// 416 = 0x1a0
    struct __CFXFXProgram *_backgroundCubeProgram[3];	// 440 = 0x1b8
    struct __CFXFXProgram *_backgroundVideoProgram;	// 464 = 0x1d0
    struct __CFXFXProgram *_backgroundVideoAlpha0Program;	// 472 = 0x1d8
    struct __CFXRasterizerStates *_backgroundRasterizerStates;	// 480 = 0x1e0
    NSObject<OS_dispatch_queue> *_resourceQueue;	// 488 = 0x1e8
    NSObject<OS_dispatch_group> *_resourceGroup;	// 496 = 0x1f0
    _Bool _shouldCaptureNextFrame;	// 504 = 0x1f8
    _Bool _captureStarted;	// 505 = 0x1f9
    id <MTLBuffer> _shadowKernelBuffer;	// 512 = 0x200
    struct {
        struct __CFXFXPassInstance *passInstance;
        struct __CFXLightingSystem *lightingSystem;
        struct __CFXDynamicBatchingSystem *dynamicBatchingSystem;
        struct __CFXFXPass *pass;
        void *renderGraphPass;
        _Bool passRequiresLighting;
        _Bool isMainPass;
        struct __CFXTransformTree *transformTree;
        unsigned long long programHashCodeStoreKey;
    } _processingContext;	// 520 = 0x208
    unsigned int _seed;	// 584 = 0x248
    struct VFXWorldBuffer _frameUniforms[16];	// 592 = 0x250
    struct {
        id <MTLBuffer> buffer;
        unsigned long long offset;
    } _worldUniforms;	// 13136 = 0x3350
    struct {
        struct float4x4 modelTransform;
        struct float4x4 lastFrameModelTransform;
        struct float4x4 normalTransforms[16];
        struct float4x4 modelViewTransforms[16];
        struct float4x4 modelViewProjectionTransforms[16];
        struct float2x3 boundingBox;
        struct float2x3 worldBoundingBox;
        struct __CFXNode *instanceNode;
        unsigned int flags;
        unsigned int *probeCacheIndex;
    } _nodeUniforms;	// 13152 = 0x3360
    struct {
        struct unordered_map<unsigned long long, VFXMTLLightSetData, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, VFXMTLLightSetData>>> frameLightingSetDatas;
        unsigned long long currentLightingHashKey;
        struct {
            long long count;
            struct __CFXLight *lights[8];
            struct __CFXLightRuntimeData *lightsData[8];
        } currentLightingDesc;
        CDStruct_14d5dc5e currentLightingSpace;
        CDStruct_14d5dc5e currentLightingSpaceShadow;
        _Bool needLightingSpaceTransformation;
        struct VFXMTLClusterSystem clusterSystem;
        struct Info clusterInfo;
        id <MTLTexture> reflectionProbesTextureArray;
    } _lighting;	// 16448 = 0x4040
    struct {
        CDStruct_14d5dc5e view_from_crworld[2];
        CDStruct_14d5dc5e proj_from_crworld[2];
        CDStruct_14d5dc5e proj_from_view[2];
        CDStruct_14d5dc5e view_from_proj[2];
        MISSING_TYPE *crws_camera_pos[2];
        unsigned int worldReferencePosition__renderTargetSize__viewportCount;
        unsigned int useVertexAmplification;
        MISSING_TYPE *viewport_percents[2];
    } _vfxCoreViewConstants;	// 17360 = 0x43d0
    CDStruct_4b2885c7 _vfxCoreViewports[2];	// 17984 = 0x4640
    struct Cache _cache;	// 18080 = 0x46a0
    struct {
        unsigned long long hash;
        VFXMTLRenderPipeline *pipeline;
    } _compositeRendering[1];	// 18368 = 0x47c0
    VFXMTLRenderPipeline *_downSamplePipeline;	// 18384 = 0x47d0
    struct {
        unsigned long long pixelFormat;
        unsigned long long sampleCount;
        VFXMTLRenderPipeline *displayCubemapPipeline;
        VFXMTLRenderPipeline *displayTexture2DPipeline;
        VFXMTLRenderPipeline *displayDepth2DPipeline;
        VFXMTLRenderPipeline *displayDepthCubePipeline;
    } _debug;	// 18392 = 0x47d8
    _Bool _showsAuthoringEnvironment;	// 18440 = 0x4808
    struct {
        _Bool collectEnabled;
        NSMutableDictionary *errors;
    } _compilationIssues;	// 18448 = 0x4810
    struct {
        unsigned int modelTransformBindingCount;
        unsigned int modelViewTransformBindingCount;
        unsigned int normalTransformBindingCount;
        unsigned int nodeOpacityBindingCount;
    } _counters;	// 18464 = 0x4820
    struct {
        unsigned long long passHash;
        struct __CFXMaterial *material;
    } _renderGraph;	// 18480 = 0x4830
    id <VFXTextureAttachmentProvider> _attachmentProvider;	// 18496 = 0x4840
    id <VFXMTLRenderContextResourceManagerMonitor> _resourceManagerMonitor;	// 18504 = 0x4848
    id <VFXMTLRenderContextCommandBufferStatusMonitor> _commandBufferStatusMonitor;	// 18512 = 0x4850
    id _commandBufferScheduledHandlers;	// 18520 = 0x4858
    id _commandBufferCompletedHandlers;	// 18528 = 0x4860
    id _drawablePresentedHandlers;	// 18536 = 0x4868
    CFXVFXRenderTargetInfo *_renderTargetInfo;	// 18544 = 0x4870
    _Bool _depthOnly;	// 18552 = 0x4878
    _Bool _canRecycleParticleBuffers;	// 18553 = 0x4879
    _Bool _requireLoadFinalTexture;	// 18554 = 0x487a
    _Bool _simulateCommandBufferFailure;	// 18555 = 0x487b
    unsigned short _commonProfileConditioner;	// 18556 = 0x487c
    unsigned int _renderMode;	// 18560 = 0x4880
    MTLRenderPassDescriptor *_clientRenderPassDescriptor;	// 18568 = 0x4888
    id <MTLRenderCommandEncoder> _clientRenderCommandEncoder;	// 18576 = 0x4890
    id <MTLCommandBuffer> _clientCommandBuffer;	// 18584 = 0x4898
    unsigned long long _debugOptions;	// 18592 = 0x48a0
    id <MTLCommandQueue> _clientCommandQueue;	// 18600 = 0x48a8
    NSString *_generatedTexturePath;	// 18608 = 0x48b0
}

+ (void)registerBindings;	// IMP=0x00100000000ed7dd
- (id).cxx_construct;	// IMP=0x00000000000f2e04
- (void).cxx_destruct;	// IMP=0x00000000000f2db6
@property(retain, nonatomic) NSString *generatedTexturePath; // @synthesize generatedTexturePath=_generatedTexturePath;
@property(nonatomic) float superSamplingFactor; // @synthesize superSamplingFactor=_superSamplingFactor;
@property(nonatomic) _Bool simulateCommandBufferFailure; // @synthesize simulateCommandBufferFailure=_simulateCommandBufferFailure;
@property(nonatomic) _Bool requireLoadFinalTexture; // @synthesize requireLoadFinalTexture=_requireLoadFinalTexture;
@property(nonatomic) _Bool canRecycleParticleBuffers; // @synthesize canRecycleParticleBuffers=_canRecycleParticleBuffers;
@property(nonatomic) __weak id <VFXMTLRenderContextCommandBufferStatusMonitor> commandBufferStatusMonitor; // @synthesize commandBufferStatusMonitor=_commandBufferStatusMonitor;
@property(nonatomic) __weak id <VFXMTLRenderContextResourceManagerMonitor> resourceManagerMonitor; // @synthesize resourceManagerMonitor=_resourceManagerMonitor;
@property(retain, nonatomic) id <MTLCommandQueue> clientCommandQueue; // @synthesize clientCommandQueue=_clientCommandQueue;
@property(readonly, nonatomic) void *renderEncoder; // @synthesize renderEncoder=_renderEncoder;
@property(nonatomic) _Bool shouldPresentAfterMinimumDuration; // @synthesize shouldPresentAfterMinimumDuration=_shouldPresentAfterMinimumDuration;
@property(readonly, nonatomic) void *frameTexturePool; // @synthesize frameTexturePool=_frameTexturePool;
@property(readonly, nonatomic) VFXMTLResourceManager *resourceManager; // @synthesize resourceManager=_resourceManager;
@property(nonatomic) unsigned long long debugOptions; // @synthesize debugOptions=_debugOptions;
@property(retain, nonatomic) id <MTLCommandBuffer> clientCommandBuffer; // @synthesize clientCommandBuffer=_clientCommandBuffer;
@property(retain, nonatomic) id <MTLRenderCommandEncoder> clientRenderCommandEncoder; // @synthesize clientRenderCommandEncoder=_clientRenderCommandEncoder;
@property(retain, nonatomic) MTLRenderPassDescriptor *clientRenderPassDescriptor; // @synthesize clientRenderPassDescriptor=_clientRenderPassDescriptor;
@property(readonly, nonatomic) CFXVFXRenderTargetInfo *renderTargetInfo;
- (void)_VFXWorldRendererMainPassCustomPostProcessSupportDrawSceneBackgroundUsingEncoder:(id)arg1 commandBuffer:(id)arg2 renderPassDescriptor:(id)arg3;	// IMP=0x00000000000f29ab
- (void)_allowGPUBackgroundExecution;	// IMP=0x00000000000f2912
- (void)addDrawablePresentedHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000f27ff
- (void)addCommandBufferCompletedHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000f26ec
- (void)addCommandBufferScheduledHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000f25d9
- (unsigned long long)cubeArrayTypeIfSupported;	// IMP=0x00000000000f25c1
- (struct __CFXMaterial *)getCurrentPassMaterial;	// IMP=0x00000000000f25b4
- (unsigned long long)getCurrentPassHash;	// IMP=0x00000000000f25a7
- (void)setCurrentPassMaterial:(struct __CFXMaterial *)arg1;	// IMP=0x00000000000f259a
- (void)setCurrentPassHash:(unsigned long long)arg1;	// IMP=0x00000000000f258d
- (void)writeBytes:(const void *)arg1 length:(unsigned long long)arg2;	// IMP=0x00000000000f24ee
- (MISSING_TYPE *)renderSize;	// IMP=0x00000000000f24e0
- (float)renderTime;	// IMP=0x00000000000f24d2
- (void)_drawFullScreenTexture:(id)arg1;	// IMP=0x00000000000f21eb
- (void)_drawShadowMaps;	// IMP=0x00000000000f1caa
- (void)_drawPBRTextures;	// IMP=0x00000000000f1349
@property(readonly, nonatomic) id <MTLCommandBuffer> currentCommandBuffer;
@property(readonly, nonatomic) MTLRenderPassDescriptor *currentRenderPassDescriptor;
@property(readonly, nonatomic) id <MTLRenderCommandEncoder> currentRenderCommandEncoder;
- (void)drawFullScreenQuadForPass:(struct __CFXFXPass *)arg1;	// IMP=0x00000000000f11e1
- (void)resetVolatileMeshElements;	// IMP=0x00000000000f1043
- (void)unmapVolatileMeshElement:(struct __CFXMeshElement *)arg1;	// IMP=0x00000000000f0fdc
- (struct __CFXMeshElement *)createVolatileMeshElementOfType:(BOOL)arg1 primitiveCount:(long long)arg2 bytesPerIndex:(long long)arg3;	// IMP=0x00000000000f0e24
- (void)_recycleMTLBufferToPool:(id)arg1;	// IMP=0x00000000000f0d9b
- (id)_newMTLBufferFromPoolWithLength:(unsigned long long)arg1;	// IMP=0x00000000000f0cbd
- (void)resetVolatileMeshes;	// IMP=0x00000000000f0b9f
- (void)unmapVolatileMesh:(struct __CFXMesh *)arg1 modifiedVerticesCount:(long long)arg2;	// IMP=0x00000000000f0ab7
- (_Bool)mapVolatileMesh:(struct __CFXMesh *)arg1 verticesCount:(long long)arg2;	// IMP=0x00000000000f08ec
- (void)drawWireframeOverlayForElements:(CDStruct_d65e47c4 *)arg1 range:(CDStruct_912cb5d2)arg2 store:(struct __CFXRendererElementStore *)arg3 passInstance:(struct __CFXFXPassInstance *)arg4;	// IMP=0x00000000000ed53e
@property(readonly, nonatomic) NSMutableDictionary *compilationErrors;
@property(nonatomic) _Bool collectsCompilationErrors;
@property(nonatomic) _Bool forceAsyncShaderCompilation;
@property(nonatomic) _Bool showsAuthoringEnvironment;
- (void)drawRenderElement:(struct __CFXRendererElement *)arg1 withPass:(struct __CFXFXPass *)arg2;	// IMP=0x00000000000ecc45
- (void)_executeDrawCommand:(CDStruct_8b09f293)arg1;	// IMP=0x00000000000e97b1
- (void)_prepareMaterialTextures:(struct __CFXMaterial *)arg1;	// IMP=0x00000000000e96f3
- (void)stopProcessingRendererElements:(_Bool)arg1;	// IMP=0x00000000000e95d4
- (void)startProcessingRendererElementsWithEngineIterationContext:(CDStruct_e0207beb *)arg1;	// IMP=0x00000000000e8784
- (void)processRendererElements:(CDStruct_d65e47c4 *)arg1 count:(unsigned int)arg2 engineIterationContext:(CDStruct_e0207beb *)arg3;	// IMP=0x00000000000e801f
- (void)renderMesh:(struct __CFXMesh *)arg1 meshElement:(struct __CFXMeshElement *)arg2 withProgram:(struct __CFXFXProgram *)arg3 engineContext:(struct __CFXEngineContext *)arg4 transform:(CDStruct_14d5dc5e)arg5 color:(const struct CFXColor4 *)arg6 rasterizerStates:(struct __CFXRasterizerStates *)arg7 blendState:(struct __CFXBlendStates *)arg8 texture:(struct __CFXImage *)arg9 depthBias:(_Bool)arg10;	// IMP=0x00000000000e7c77
- (void)renderVideoBackground:(struct __CFXImageProxy *)arg1 engineContext:(struct __CFXEngineContext *)arg2 materialProperty:(struct __CFXMaterialProperty *)arg3;	// IMP=0x00000000000e74f3
- (void)renderBackground:(struct __CFXMaterialProperty *)arg1 engineContext:(struct __CFXEngineContext *)arg2 passInstance:(struct __CFXFXPassInstance *)arg3;	// IMP=0x00000000000e6850
- (float)_zFarForSkyboxRenderingProjectionMatrix:(const CDStruct_14d5dc5e *)arg1 defaultZFar:(float)arg2;	// IMP=0x00000000000e6831
- (void)_updateProjectionMatrixForOrthographicSkyboxRenderingIfNeeded:(CDStruct_14d5dc5e *)arg1;	// IMP=0x00000000000e6625
- (void)_drawPatchForMeshElement:(id)arg1 instanceCount:(unsigned long long)arg2;	// IMP=0x00000000000e64ca
- (void)_drawMeshElement:(id)arg1 instanceCount:(unsigned long long)arg2;	// IMP=0x00000000000e621f
- (void)_setMeshBuffers:(id)arg1;	// IMP=0x00000000000e60c9
- (void)_setWorldBufferAtVertexIndex:(long long)arg1 fragmentIndex:(long long)arg2;	// IMP=0x00000000000e6055
- (void)popDebugGroup;	// IMP=0x00000000000e6038
- (void)pushDebugGroup:(id)arg1;	// IMP=0x00000000000e601b
- (void)setRasterizerStates:(struct __CFXRasterizerStates *)arg1;	// IMP=0x00000000000e5e8c
- (void)_logLightingInformation;	// IMP=0x00000000000e5e3e
- (id)radianceTextureForMaterialProperty:(struct __CFXMaterialProperty *)arg1;	// IMP=0x00000000000e5d74
- (id)irradianceTextureForMaterialProperty:(struct __CFXMaterialProperty *)arg1;	// IMP=0x00000000000e5c45
- (id)textureForMaterialProperty:(struct __CFXMaterialProperty *)arg1;	// IMP=0x00000000000e5c1f
@property(retain, nonatomic) id <VFXTextureAttachmentProvider> attachmentProvider;
- (void)endRenderPass;	// IMP=0x00000000000e5bba
- (void)setRenderPassParameters:(CDStruct_c218849e)arg1;	// IMP=0x00000000000e5ba4
- (void)beginRenderPass:(id)arg1 renderEncoder:(void *)arg2 parameters:(CDStruct_c218849e)arg3;	// IMP=0x00000000000e5b67
- (void)beginRenderPass:(id)arg1 renderEncoder:(void *)arg2;	// IMP=0x00000000000e5a53
@property(readonly, nonatomic) struct VFXMTLComputeCommandEncoder *resourceComputeEncoder;
@property(readonly, nonatomic) struct VFXMTLBlitCommandEncoder *resourceBlitEncoder;
@property(readonly, nonatomic) id <MTLCommandBuffer> resourceCommandBuffer;
- (void)_createResourceCommandBufferIfNeeded;	// IMP=0x00000000000e56db
- (void)_clearRenderCaches;	// IMP=0x00000000000e56c3
- (void *)_clusterInfo;	// IMP=0x00000000000e56b6
- (void)_setReflectionProbeArrayTexture:(id)arg1;	// IMP=0x00000000000e56a9
- (id)_reflectionProbeArrayTexture;	// IMP=0x00000000000e569c
- (id)_finalRenderTexture;	// IMP=0x00000000000e5485
@property(readonly, nonatomic) CAMetalLayer *layerTarget;
@property(readonly, nonatomic) id <MTLTexture> textureTarget;
- (void)endFrameWaitingUntilCompleted:(_Bool)arg1 status:(unsigned long long *)arg2 error:(id *)arg3;	// IMP=0x00000000000e4b14
- (void)endFrameWorldSpecifics;	// IMP=0x00000000000e4ae6
- (void)beginFrame:(id)arg1;	// IMP=0x00000000000e4556
- (void)captureNextFrame;	// IMP=0x00000000000e4549
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *resourceQueue;
@property(readonly, nonatomic) NSObject<OS_dispatch_group> *resourceGroup;
@property(readonly, nonatomic) long long currentFrameIndex;
- (struct __CFXEngineStats *)stats;	// IMP=0x00000000000e451b
- (void)_clearUnusedBindingPoints;	// IMP=0x00000000000e4301
@property(nonatomic) _Bool isOpaque;
@property(nonatomic) long long sampleCount;
@property(nonatomic) _Bool shouldDelegateARCompositing;
@property(nonatomic) _Bool enableARMode;
@property(readonly, nonatomic) long long pendingGPUFrameCount;
@property(nonatomic) _Bool wantsWideGamut;
- (_Bool)supportsMTLFeatureSet:(unsigned long long)arg1;	// IMP=0x00000000000e41a3
@property(readonly, nonatomic) int profile;
@property(readonly, nonatomic) unsigned int features;
@property(nonatomic) CDStruct_14d5dc5e screenTransform;
@property(readonly, nonatomic) void *frameConstantBufferPool;
@property(nonatomic) long long preferredFramesPerSecond;
@property(readonly, nonatomic) id <MTLCommandQueue> commandQueue;
@property(readonly, nonatomic) struct __CFXEngineContext *engineContext;
@property(readonly, nonatomic) id <MTLDevice> device;
- (void)dealloc;	// IMP=0x00000000000e3d28
- (id)initWithDevice:(id)arg1 engineContext:(struct __CFXEngineContext *)arg2;	// IMP=0x00000000000e36d0
- (void)_reduceStatsOfConstantBuffer:(id)arg1;	// IMP=0x00000000000e369c
- (_Bool)isLayeredRendering;	// IMP=0x00000000000f338b
- (_Bool)isDrawingBlur;	// IMP=0x00000000000f3383
- (long long)renderMode;	// IMP=0x00000000000f3377
- (_Bool)outputsNormal;	// IMP=0x00000000000f3369
- (_Bool)renderInGBuffer;	// IMP=0x00000000000f3359
- (_Bool)depthOnly;	// IMP=0x00000000000f334d
- (void)viewports:(const void **)arg1:(long long *)arg2;	// IMP=0x00000000000f3333
- (_Bool)constantOffsetAndSize:(int)arg1:(id)arg2:(long long *)arg3:(long long *)arg4;	// IMP=0x00000000000f3168
- (const char *)constantData:(int)arg1;	// IMP=0x00000000000f314b
- (id)sampler:(int)arg1:(id)arg2;	// IMP=0x00000000000f3130
- (id)buffer:(int)arg1:(id)arg2:(long long *)arg3:(long long *)arg4;	// IMP=0x00000000000f2fb2
- (id)texture:(int)arg1:(id)arg2;	// IMP=0x00000000000f2f5f

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
// Preceding property had unknown attributes: ?
// Original attribute string: T@"NSString",?,R,C

@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

