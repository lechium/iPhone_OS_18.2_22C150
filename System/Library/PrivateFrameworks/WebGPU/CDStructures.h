//
//     Generated by classdump-c 4.2.0 (64 bit) (iOS port by DreamDevLost, Updated by Kevin Bradley.)(Debug version compiled Dec 27 2024 14:18:54).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Named Structures

struct BindableResources;

struct Buffer;

struct ExternalTexture;

struct HashMap<unsigned long long, WebGPU::IndexBufferAndIndexData, WTF::DefaultHash<unsigned long long>, WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>, WTF::HashTraits<WebGPU::IndexBufferAndIndexData>, WTF::HashTableTraits> {
    struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WebGPU::IndexBufferAndIndexData>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WebGPU::IndexBufferAndIndexData>>, WTF::DefaultHash<unsigned long long>, WTF::HashMap<unsigned long long, WebGPU::IndexBufferAndIndexData, WTF::DefaultHash<unsigned long long>, WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::KeyValuePairTraits, WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>> m_impl;
};

struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WebGPU::IndexBufferAndIndexData>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WebGPU::IndexBufferAndIndexData>>, WTF::DefaultHash<unsigned long long>, WTF::HashMap<unsigned long long, WebGPU::IndexBufferAndIndexData, WTF::DefaultHash<unsigned long long>, WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::KeyValuePairTraits, WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>> {
    union {
        void *m_table;
        unsigned int *m_tableForLLDB;
    } ;
};

struct OptionSet<WebGPU::BindGroupEntryUsage> {
    unsigned int m_storage;
};

struct RefPtr<WebGPU::Buffer, WTF::RawPtrTraits<WebGPU::Buffer>, WTF::DefaultRefDerefTraits<WebGPU::Buffer>> {
    struct Buffer *m_ptr;
};

struct RefPtr<const WebGPU::ExternalTexture, WTF::RawPtrTraits<const WebGPU::ExternalTexture>, WTF::DefaultRefDerefTraits<const WebGPU::ExternalTexture>> {
    struct ExternalTexture *m_ptr;
};

struct RefPtr<const WebGPU::TextureView, WTF::RawPtrTraits<const WebGPU::TextureView>, WTF::DefaultRefDerefTraits<const WebGPU::TextureView>> {
    struct TextureView *m_ptr;
};

struct TextureView;

struct Vector<WebGPU::BindableResources, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> {
    struct BindableResources *m_buffer;
    unsigned int m_capacity;
    unsigned int m_size;
};

struct variant<WTF::RefPtr<WebGPU::Buffer>, WTF::RefPtr<const WebGPU::TextureView>, WTF::RefPtr<const WebGPU::ExternalTexture>> {
    struct __impl<WTF::RefPtr<WebGPU::Buffer>, WTF::RefPtr<const WebGPU::TextureView>, WTF::RefPtr<const WebGPU::ExternalTexture>> {
        union __union<std::__variant_detail::_Trait::_Available, 0UL, WTF::RefPtr<WebGPU::Buffer>, WTF::RefPtr<const WebGPU::TextureView>, WTF::RefPtr<const WebGPU::ExternalTexture>> {
            char __dummy;
            struct __alt<0UL, WTF::RefPtr<WebGPU::Buffer>> {
                struct RefPtr<WebGPU::Buffer, WTF::RawPtrTraits<WebGPU::Buffer>, WTF::DefaultRefDerefTraits<WebGPU::Buffer>> __value;
            } __head;
            union __union<std::__variant_detail::_Trait::_Available, 1UL, WTF::RefPtr<const WebGPU::TextureView>, WTF::RefPtr<const WebGPU::ExternalTexture>> {
                char __dummy;
                struct __alt<1UL, WTF::RefPtr<const WebGPU::TextureView>> {
                    struct RefPtr<const WebGPU::TextureView, WTF::RawPtrTraits<const WebGPU::TextureView>, WTF::DefaultRefDerefTraits<const WebGPU::TextureView>> __value;
                } __head;
                union __union<std::__variant_detail::_Trait::_Available, 2UL, WTF::RefPtr<const WebGPU::ExternalTexture>> {
                    char __dummy;
                    struct __alt<2UL, WTF::RefPtr<const WebGPU::ExternalTexture>> {
                        struct RefPtr<const WebGPU::ExternalTexture, WTF::RawPtrTraits<const WebGPU::ExternalTexture>, WTF::DefaultRefDerefTraits<const WebGPU::ExternalTexture>> __value;
                    } __head;
                    union __union<std::__variant_detail::_Trait::_Available, 3UL> __tail;
                } __tail;
            } __tail;
        } __data;
        unsigned int __index;
    } __impl_;
};

#pragma mark Typedef'd Structures

typedef struct {
    double red;
    double green;
    double blue;
    double alpha;
} CDStruct_3ead2808;

// Template types
typedef struct OptionSet<WebGPU::BindGroupEntryUsage> {
    unsigned int m_storage;
} OptionSet_6745f400;

typedef struct variant<WTF::RefPtr<WebGPU::Buffer>, WTF::RefPtr<const WebGPU::TextureView>, WTF::RefPtr<const WebGPU::ExternalTexture>> {
    struct __impl<WTF::RefPtr<WebGPU::Buffer>, WTF::RefPtr<const WebGPU::TextureView>, WTF::RefPtr<const WebGPU::ExternalTexture>> {
        union __union<std::__variant_detail::_Trait::_Available, 0UL, WTF::RefPtr<WebGPU::Buffer>, WTF::RefPtr<const WebGPU::TextureView>, WTF::RefPtr<const WebGPU::ExternalTexture>> {
            char __dummy;
            struct __alt<0UL, WTF::RefPtr<WebGPU::Buffer>> {
                struct RefPtr<WebGPU::Buffer, WTF::RawPtrTraits<WebGPU::Buffer>, WTF::DefaultRefDerefTraits<WebGPU::Buffer>> __value;
            } __head;
            union __union<std::__variant_detail::_Trait::_Available, 1UL, WTF::RefPtr<const WebGPU::TextureView>, WTF::RefPtr<const WebGPU::ExternalTexture>> {
                char __dummy;
                struct __alt<1UL, WTF::RefPtr<const WebGPU::TextureView>> {
                    struct RefPtr<const WebGPU::TextureView, WTF::RawPtrTraits<const WebGPU::TextureView>, WTF::DefaultRefDerefTraits<const WebGPU::TextureView>> __value;
                } __head;
                union __union<std::__variant_detail::_Trait::_Available, 2UL, WTF::RefPtr<const WebGPU::ExternalTexture>> {
                    char __dummy;
                    struct __alt<2UL, WTF::RefPtr<const WebGPU::ExternalTexture>> {
                        struct RefPtr<const WebGPU::ExternalTexture, WTF::RawPtrTraits<const WebGPU::ExternalTexture>, WTF::DefaultRefDerefTraits<const WebGPU::ExternalTexture>> __value;
                    } __head;
                    union __union<std::__variant_detail::_Trait::_Available, 3UL> __tail;
                } __tail;
            } __tail;
        } __data;
        unsigned int __index;
    } __impl_;
} variant_211dee7e;

