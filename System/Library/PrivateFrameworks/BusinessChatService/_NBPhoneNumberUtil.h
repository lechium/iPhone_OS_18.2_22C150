//
//     Generated by classdump-c 4.2.0 (64 bit) (iOS port by DreamDevLost, Updated by Kevin Bradley.)(Debug version compiled Dec 27 2024 14:18:54).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CTTelephonyNetworkInfo, NSDictionary, NSLock, NSMutableDictionary, NSRegularExpression, _NBMetadataHelper, _NBRegExMatcher;

__attribute__((visibility("hidden")))
@interface _NBPhoneNumberUtil : NSObject
{
    NSLock *_entireStringCacheLock;	// 8 = 0x8
    NSMutableDictionary *_entireStringRegexCache;	// 16 = 0x10
    NSLock *_lockPatternCache;	// 24 = 0x18
    NSMutableDictionary *_regexPatternCache;	// 32 = 0x20
    NSRegularExpression *_CAPTURING_DIGIT_PATTERN;	// 40 = 0x28
    NSRegularExpression *_VALID_ALPHA_PHONE_PATTERN;	// 48 = 0x30
    _NBMetadataHelper *_helper;	// 56 = 0x38
    _NBRegExMatcher *_matcher;	// 64 = 0x40
}

+ (void)initialize;	// IMP=0x00600000000702cd
+ (id)sharedInstance;	// IMP=0x006000000006f004
- (void).cxx_destruct;	// IMP=0x000000000007c04a
@property(retain, nonatomic) _NBRegExMatcher *matcher; // @synthesize matcher=_matcher;
@property(retain, nonatomic) _NBMetadataHelper *helper; // @synthesize helper=_helper;
@property(retain, nonatomic) NSRegularExpression *VALID_ALPHA_PHONE_PATTERN; // @synthesize VALID_ALPHA_PHONE_PATTERN=_VALID_ALPHA_PHONE_PATTERN;
@property(retain, nonatomic) NSRegularExpression *CAPTURING_DIGIT_PATTERN; // @synthesize CAPTURING_DIGIT_PATTERN=_CAPTURING_DIGIT_PATTERN;
@property(retain, nonatomic) NSMutableDictionary *regexPatternCache; // @synthesize regexPatternCache=_regexPatternCache;
@property(retain, nonatomic) NSLock *lockPatternCache; // @synthesize lockPatternCache=_lockPatternCache;
@property(retain, nonatomic) NSMutableDictionary *entireStringRegexCache; // @synthesize entireStringRegexCache=_entireStringRegexCache;
@property(retain, nonatomic) NSLock *entireStringCacheLock; // @synthesize entireStringCacheLock=_entireStringCacheLock;
- (_Bool)matchesEntirely:(id)arg1 string:(id)arg2;	// IMP=0x000000000007be39
- (_Bool)canBeInternationallyDialled:(id)arg1;	// IMP=0x000000000007bd29
- (_Bool)canBeInternationallyDialled:(id)arg1 error:(id *)arg2;	// IMP=0x000000000007bbd6
- (_Bool)isNationalNumberSuffixOfTheOther:(id)arg1 second:(id)arg2;	// IMP=0x000000000007baac
- (long long)isNumberMatch:(id)arg1 second:(id)arg2;	// IMP=0x000000000007b2e1
- (long long)isNumberMatch:(id)arg1 second:(id)arg2 error:(id *)arg3;	// IMP=0x000000000007b16d
- (void)buildNationalNumberForParsing:(id)arg1 nationalNumber:(id *)arg2;	// IMP=0x000000000007ae8f
- (id)parseHelper:(id)arg1 defaultRegion:(id)arg2 keepRawInput:(_Bool)arg3 checkRegion:(_Bool)arg4 error:(id *)arg5;	// IMP=0x000000000007a187
- (void)setItalianLeadingZerosForPhoneNumber:(id)arg1 phoneNumber:(id)arg2;	// IMP=0x000000000007a01b
- (id)parseAndKeepRawInput:(id)arg1 defaultRegion:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000079e8e
- (id)countryCodeByCarrier;	// IMP=0x0000000000079ddd
@property(readonly, nonatomic) CTTelephonyNetworkInfo *telephonyNetworkInfo;
- (id)parseWithPhoneCarrierRegion:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000079c6e
- (id)parse:(id)arg1 defaultRegion:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000079b79
- (_Bool)checkRegionForParsing:(id)arg1 defaultRegion:(id)arg2;	// IMP=0x0000000000079af0
- (id)maybeStripExtension:(id *)arg1;	// IMP=0x00000000000798e0
- (_Bool)maybeStripNationalPrefixAndCarrierCode:(id *)arg1 metadata:(id)arg2 carrierCode:(id *)arg3;	// IMP=0x00000000000793c7
- (long long)maybeStripInternationalPrefixAndNormalize:(id *)arg1 possibleIddPrefix:(id)arg2;	// IMP=0x000000000007928f
- (_Bool)parsePrefixAsIdd:(id)arg1 sourceString:(id *)arg2;	// IMP=0x0000000000078f82
- (_Bool)descHasPossibleNumberData:(id)arg1;	// IMP=0x0000000000078eaf
- (id)maybeExtractCountryCode:(id)arg1 metadata:(id)arg2 nationalNumber:(id *)arg3 keepRawInput:(_Bool)arg4 phoneNumber:(id *)arg5 error:(id *)arg6;	// IMP=0x0000000000078859
- (id)getSupportedRegions;	// IMP=0x000000000007879f
- (id)extractCountryCode:(id)arg1 nationalNumber:(id *)arg2;	// IMP=0x00000000000784fb
- (_Bool)truncateTooLongNumber:(id)arg1;	// IMP=0x000000000007835b
- (_Bool)isPossibleNumberString:(id)arg1 regionDialingFrom:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000782ab
- (long long)isPossibleNumberWithReason:(id)arg1;	// IMP=0x000000000007818b
- (long long)isPossibleNumberWithReason:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000078038
- (long long)testNumberLength:(id)arg1 desc:(id)arg2;	// IMP=0x0000000000077e1c
- (long long)validateNumberLength:(id)arg1 metadata:(id)arg2 type:(long long)arg3;	// IMP=0x00000000000778c3
- (long long)validateNumberLength:(id)arg1 metadata:(id)arg2;	// IMP=0x00000000000778aa
- (_Bool)isPossibleNumber:(id)arg1;	// IMP=0x0000000000077890
- (_Bool)isPossibleNumber:(id)arg1 error:(id *)arg2;	// IMP=0x000000000007773d
- (_Bool)isAlphaNumber:(id)arg1;	// IMP=0x0000000000077645
- (_Bool)isLeadingZeroPossible:(id)arg1;	// IMP=0x00000000000775a3
- (_Bool)isNANPACountry:(id)arg1;	// IMP=0x000000000007736c
- (id)getNddPrefixForRegion:(id)arg1 stripNonDigits:(_Bool)arg2;	// IMP=0x0000000000077251
- (id)getCountryCodeForValidRegion:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000770f0
- (id)getCountryCodeForRegion:(id)arg1;	// IMP=0x0000000000077043
- (id)getRegionCodesForCountryCode:(id)arg1;	// IMP=0x000000000007702a
- (id)getRegionCodeForCountryCode:(id)arg1;	// IMP=0x0000000000076fbe
- (id)getRegionCodeForNumberFromRegionList:(id)arg1 regionCodes:(id)arg2;	// IMP=0x0000000000076dc3
- (id)getRegionCodeForNumber:(id)arg1;	// IMP=0x0000000000076cb5
- (_Bool)isValidNumberForRegion:(id)arg1 regionCode:(id)arg2;	// IMP=0x0000000000076aa6
- (_Bool)isValidNumber:(id)arg1;	// IMP=0x0000000000076a34
- (_Bool)isNumberMatchingDesc:(id)arg1 numberDesc:(id)arg2;	// IMP=0x00000000000768e3
- (long long)getNumberTypeHelper:(id)arg1 metadata:(id)arg2;	// IMP=0x0000000000076472
- (long long)getNumberType:(id)arg1;	// IMP=0x000000000007637c
- (id)getNumberDescByType:(id)arg1 type:(long long)arg2;	// IMP=0x000000000007626a
- (id)maybeGetFormattedExtension:(id)arg1 metadata:(id)arg2 numberFormat:(long long)arg3;	// IMP=0x0000000000076060
- (id)getExampleNumberForNonGeoEntity:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000075bf9
- (id)getExampleNumberForType:(id)arg1 type:(long long)arg2 error:(id *)arg3;	// IMP=0x0000000000075a7d
- (id)getExampleNumber:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000075a66
- (id)formatNsnUsingPattern:(id)arg1 formattingPattern:(id)arg2 numberFormat:(long long)arg3 carrierCode:(id)arg4;	// IMP=0x00000000000756af
- (id)chooseFormattingPatternForNumber:(id)arg1 nationalNumber:(id)arg2;	// IMP=0x00000000000753ca
- (id)formatNsn:(id)arg1 metadata:(id)arg2 phoneNumberFormat:(long long)arg3 carrierCode:(id)arg4;	// IMP=0x0000000000075284
- (id)formatOutOfCountryKeepingAlphaChars:(id)arg1 regionCallingFrom:(id)arg2;	// IMP=0x0000000000074cac
- (id)formatOutOfCountryKeepingAlphaChars:(id)arg1 regionCallingFrom:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000074b2c
- (_Bool)hasFormattingPatternForNumber:(id)arg1;	// IMP=0x00000000000749fa
- (_Bool)hasUnexpectedItalianLeadingZero:(id)arg1;	// IMP=0x0000000000074973
- (_Bool)rawInputContainsNationalPrefix:(id)arg1 nationalPrefix:(id)arg2 regionCode:(id)arg3;	// IMP=0x000000000007483b
- (id)formatInOriginalFormat:(id)arg1 regionCallingFrom:(id)arg2;	// IMP=0x0000000000074164
- (id)formatInOriginalFormat:(id)arg1 regionCallingFrom:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000073fe4
- (id)prefixNumberWithCountryCallingCode:(id)arg1 phoneNumberFormat:(long long)arg2 formattedNationalNumber:(id)arg3 formattedExtension:(id)arg4;	// IMP=0x0000000000073ece
- (id)formatOutOfCountryCallingNumber:(id)arg1 regionCallingFrom:(id)arg2;	// IMP=0x00000000000739ff
- (id)formatOutOfCountryCallingNumber:(id)arg1 regionCallingFrom:(id)arg2 error:(id *)arg3;	// IMP=0x000000000007387f
- (id)formatNumberForMobileDialing:(id)arg1 regionCallingFrom:(id)arg2 withFormatting:(_Bool)arg3;	// IMP=0x0000000000073491
- (id)formatNumberForMobileDialing:(id)arg1 regionCallingFrom:(id)arg2 withFormatting:(_Bool)arg3 error:(id *)arg4;	// IMP=0x0000000000073301
- (id)formatNationalNumberWithPreferredCarrierCode:(id)arg1 fallbackCarrierCode:(id)arg2;	// IMP=0x0000000000073234
- (id)formatNationalNumberWithPreferredCarrierCode:(id)arg1 fallbackCarrierCode:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000730b4
- (id)getMetadataForRegionOrCallingCode:(id)arg1 regionCode:(id)arg2;	// IMP=0x0000000000072ff6
- (id)formatNationalNumberWithCarrierCode:(id)arg1 carrierCode:(id)arg2;	// IMP=0x0000000000072e52
- (id)formatNationalNumberWithCarrierCode:(id)arg1 carrierCode:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000072cd2
- (id)formatByPattern:(id)arg1 numberFormat:(long long)arg2 userDefinedFormats:(id)arg3;	// IMP=0x0000000000072952
- (id)formatByPattern:(id)arg1 numberFormat:(long long)arg2 userDefinedFormats:(id)arg3 error:(id *)arg4;	// IMP=0x00000000000727c2
- (id)format:(id)arg1 numberFormat:(long long)arg2;	// IMP=0x00000000000724ff
- (id)format:(id)arg1 numberFormat:(long long)arg2 error:(id *)arg3;	// IMP=0x000000000007239a
- (_Bool)hasValidCountryCallingCode:(id)arg1;	// IMP=0x0000000000072360
- (_Bool)isValidRegionCode:(id)arg1;	// IMP=0x0000000000072223
- (_Bool)isNumberGeographical:(id)arg1;	// IMP=0x000000000007217a
- (_Bool)formattingRuleHasFirstGroupOnly:(id)arg1;	// IMP=0x000000000007210e
- (id)normalizeHelper:(id)arg1 normalizationReplacements:(id)arg2 removeNonMatches:(_Bool)arg3;	// IMP=0x0000000000071fa8
- (id)getCountryMobileTokenFromCountryCode:(long long)arg1;	// IMP=0x0000000000071f1b
- (int)getLengthOfNationalDestinationCode:(id)arg1;	// IMP=0x0000000000071b2f
- (int)getLengthOfNationalDestinationCode:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000719dc
- (int)getLengthOfGeographicalAreaCode:(id)arg1;	// IMP=0x00000000000718c5
- (int)getLengthOfGeographicalAreaCode:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000071772
- (id)convertAlphaCharactersInNumber:(id)arg1;	// IMP=0x00000000000716f5
- (id)normalizeDiallableCharsOnly:(id)arg1;	// IMP=0x0000000000071675
- (id)normalizeDigitsOnly:(id)arg1;	// IMP=0x00000000000715d8
- (void)normalizeSB:(id *)arg1;	// IMP=0x00000000000715a0
- (id)normalize:(id)arg1;	// IMP=0x0000000000071503
- (_Bool)isViablePhoneNumber:(id)arg1;	// IMP=0x000000000007147a
- (id)extractPossibleNumber:(id)arg1;	// IMP=0x0000000000071360
- (void)initNormalizationMappings;	// IMP=0x0000000000070a00
@property(readonly, nonatomic) NSDictionary *DIGIT_MAPPINGS;
- (void)initRegularExpressionSet;	// IMP=0x00000000000703df
- (id)init;	// IMP=0x0000000000070317
- (id)getNationalSignificantNumber:(id)arg1;	// IMP=0x000000000007012f
- (_Bool)isAllDigits:(id)arg1;	// IMP=0x0000000000070087
- (id)stringByReplacingOccurrencesString:(id)arg1 withMap:(id)arg2 removeNonMatches:(_Bool)arg3;	// IMP=0x000000000006ff37
- (_Bool)isStartingStringByRegex:(id)arg1 regex:(id)arg2;	// IMP=0x000000000006fd41
- (id)matchedStringByRegex:(id)arg1 regex:(id)arg2;	// IMP=0x000000000006fb39
- (id)matchesByRegex:(id)arg1 regex:(id)arg2;	// IMP=0x000000000006fa7a
- (id)matchFirstByRegex:(id)arg1 regex:(id)arg2;	// IMP=0x000000000006f987
- (id)replaceStringByRegex:(id)arg1 regex:(id)arg2 withTemplate:(id)arg3;	// IMP=0x000000000006f781
- (id)replaceFirstStringByRegex:(id)arg1 regex:(id)arg2 withTemplate:(id)arg3;	// IMP=0x000000000006f619
- (int)indexOfStringByString:(id)arg1 target:(id)arg2;	// IMP=0x000000000006f601
- (int)stringPositionByRegex:(id)arg1 regex:(id)arg2;	// IMP=0x000000000006f486
- (id)componentsSeparatedByRegex:(id)arg1 regex:(id)arg2;	// IMP=0x000000000006f3ea
- (id)regularExpressionWithPattern:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;	// IMP=0x000000000006f2c3
- (id)entireRegularExpressionWithPattern:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;	// IMP=0x000000000006f129
- (id)errorWithObject:(id)arg1 withDomain:(id)arg2;	// IMP=0x000000000006f089

@end

