//
//     Generated by classdump-c 4.2.0 (64 bit) (iOS port by DreamDevLost, Updated by Kevin Bradley.)(Debug version compiled Dec 27 2024 14:18:54).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class CRVehicle, NSArray, NSData, NSDictionary, NSString, NSURL, NSUUID;

@protocol CRCarKitService
- (void)postBannerToPhone:(NSString *)arg1 notificationMessage:(NSString *)arg2 reply:(void (^)(void))arg3;
- (void)fetchScaledDisplaysWithReply:(NSArray *)arg1 reply:(void (^)(NSArray *, NSError *))arg2;
- (void)fetchInstrumentClusterURLsWithReply:(void (^)(NSArray *, NSError *))arg1;
- (void)vehicleIdentifierForCertificateSerial:(NSData *)arg1 reply:(void (^)(NSString *, NSError *))arg2;
- (void)handleCarPlayDiagnosticsWithDeviceScreenshotURL:(NSURL *)arg1 carScreenshotURL:(NSURL *)arg2 attachmentURLs:(NSArray *)arg3 activeBundleIdentifier:(NSString *)arg4 reply:(void (^)(void))arg5;
- (void)supportedAirPlayFeaturesForVehicleIdentifier:(NSUUID *)arg1 reply:(void (^)(NSArray *, NSError *))arg2;
- (void)supportedCarPlayFeaturesForCertificateSerial:(NSData *)arg1 reply:(void (^)(NSNumber *, NSError *))arg2;
- (void)setCarPlayFeatures:(unsigned long long)arg1 disabled:(_Bool)arg2 forVehicleIdentifier:(NSUUID *)arg3 reply:(void (^)(_Bool, NSError *))arg4;
- (void)disablesCarPlayFeatures:(unsigned long long)arg1 forVehicleIdentifier:(NSUUID *)arg2 reply:(void (^)(NSNumber *, NSError *))arg3;
- (void)deviceSupportedCarPlayFeaturesWithReply:(void (^)(NSNumber *, NSError *))arg1;
- (void)isCarPlayAllowedWithReply:(void (^)(_Bool, NSError *))arg1;
- (void)handleCarPlayRestrictionChangedWithReply:(void (^)(void))arg1;
- (void)isEnhancedIntegrationEnabledWithCertificateSerial:(NSData *)arg1 reply:(void (^)(unsigned long long, NSError *))arg2;
- (void)isPairedWithCertificateSerial:(NSData *)arg1 reply:(void (^)(_Bool, NSError *))arg2;
- (void)allowsConnectionsForCertificateSerial:(NSData *)arg1 reply:(void (^)(_Bool, NSError *))arg2;
- (void)allowsConnectionsForWiFiUUID:(NSString *)arg1 reply:(void (^)(_Bool, NSError *))arg2;
- (void)wantsCarPlayControlAdvertisingForWiFiUUID:(NSString *)arg1 reply:(void (^)(_Bool, NSError *))arg2;
- (void)wantsCarPlayControlAdvertisingForUSBWithReply:(void (^)(_Bool, NSError *))arg1;
- (void)saveWiFiCredentials:(NSDictionary *)arg1 forAccessoryConnectionIdentifier:(unsigned long long)arg2 reply:(void (^)(_Bool, NSError *))arg3;
- (void)handleCarPlayConnectionRequestForConnectionID:(unsigned int)arg1 startSessionProperties:(NSDictionary *)arg2 reply:(void (^)(_Bool, NSError *))arg3;
- (void)startBluetoothClassicPairingForDeviceAddress:(NSString *)arg1 deviceName:(NSString *)arg2 numericCode:(NSString *)arg3 showBluetoothOnlyOption:(_Bool)arg4 reply:(void (^)(_Bool, NSError *))arg5;
- (void)startBluetoothLEPairingForIdentifier:(NSString *)arg1 deviceName:(NSString *)arg2 reply:(void (^)(_Bool, NSError *))arg3;
- (void)handleBluetoothClassicPairingCompletedForDeviceAddress:(NSString *)arg1 name:(NSString *)arg2 preApproved:(_Bool)arg3 reply:(void (^)(_Bool, NSError *))arg4;
- (void)isBluetoothInCarWithReply:(void (^)(_Bool, NSString *, NSError *))arg1;
- (void)handleDidDisconnectBluetoothAddress:(NSString *)arg1 reply:(void (^)(_Bool, NSError *))arg2;
- (void)handleDidConnectBluetoothAddress:(NSString *)arg1 reply:(void (^)(_Bool, NSString *, NSError *))arg2;
- (void)hasVehiclesWithReply:(void (^)(_Bool, NSError *))arg1;
- (void)fetchAllVehiclesWithReply:(void (^)(NSSet *, NSError *))arg1;
- (void)removeVehicle:(CRVehicle *)arg1 reply:(void (^)(_Bool, NSError *))arg2;
- (void)saveVehicle:(CRVehicle *)arg1 reply:(void (^)(CRVehicle *, NSError *))arg2;
@end

